<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.13.2">
  <compound kind="file">
    <name>__init__.py</name>
    <path>bindings/python/proxsuite/</path>
    <filename>____init_____8py.html</filename>
    <namespace>proxsuite</namespace>
  </compound>
  <compound kind="file">
    <name>__init__.py</name>
    <path>bindings/python/proxsuite/torch/</path>
    <filename>torch_2____init_____8py.html</filename>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::torch</namespace>
  </compound>
  <compound kind="file">
    <name>qplayer.py</name>
    <path>bindings/python/proxsuite/torch/</path>
    <filename>qplayer_8py.html</filename>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::torch</namespace>
    <namespace>proxsuite::torch::qplayer</namespace>
  </compound>
  <compound kind="file">
    <name>utils.py</name>
    <path>bindings/python/proxsuite/torch/</path>
    <filename>utils_8py.html</filename>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::torch</namespace>
    <namespace>proxsuite::torch::utils</namespace>
  </compound>
  <compound kind="file">
    <name>1-Overview.md</name>
    <path>doc/</path>
    <filename>1-Overview_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>2-ProxQP_api.md</name>
    <path>doc/</path>
    <filename>2-ProxQP__api_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>3-ProxQP_solve.md</name>
    <path>doc/</path>
    <filename>3-ProxQP__solve_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>4-qplayer.md</name>
    <path>doc/</path>
    <filename>4-qplayer_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>5-installation.md</name>
    <path>doc/</path>
    <filename>5-installation_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>common.hpp</name>
    <path>include/proxsuite/helpers/</path>
    <filename>common_8hpp.html</filename>
    <class kind="struct">proxsuite::helpers::infinite_bound</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::helpers</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROXSUITE_DEDUCE_RET</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a9d2496890d1f3fb611974cfc9f9c749e</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>instruction-set.hpp</name>
    <path>include/proxsuite/helpers/</path>
    <filename>instruction-set_8hpp.html</filename>
    <class kind="struct">proxsuite::helpers::InstructionSet</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::helpers</namespace>
  </compound>
  <compound kind="file">
    <name>optional.hpp</name>
    <path>include/proxsuite/helpers/</path>
    <filename>optional_8hpp.html</filename>
    <includes id="fwd_8hpp" name="fwd.hpp" local="no" import="no" module="no" objc="no">proxsuite/fwd.hpp</includes>
    <includes id="tl-optional_8hpp" name="tl-optional.hpp" local="no" import="no" module="no" objc="no">proxsuite/helpers/tl-optional.hpp</includes>
    <class kind="struct">proxsuite::detail::nullopt_instance</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::detail</namespace>
  </compound>
  <compound kind="file">
    <name>tl-optional.hpp</name>
    <path>include/proxsuite/helpers/</path>
    <filename>tl-optional_8hpp.html</filename>
    <class kind="class">tl::monostate</class>
    <class kind="struct">tl::in_place_t</class>
    <class kind="struct">tl::detail::conjunction</class>
    <class kind="struct">tl::detail::conjunction&lt; B &gt;</class>
    <class kind="struct">tl::detail::conjunction&lt; B, Bs... &gt;</class>
    <class kind="struct">tl::detail::invoke_result_impl&lt; F, decltype(detail::invoke(std::declval&lt; F &gt;(), std::declval&lt; Us &gt;()...), void()), Us... &gt;</class>
    <class kind="struct">tl::detail::swap_adl_tests::tag</class>
    <class kind="struct">tl::detail::swap_adl_tests::is_std_swap_noexcept</class>
    <class kind="struct">tl::detail::swap_adl_tests::is_std_swap_noexcept&lt; T[N]&gt;</class>
    <class kind="struct">tl::detail::swap_adl_tests::is_adl_swap_noexcept</class>
    <class kind="struct">tl::detail::is_swappable</class>
    <class kind="struct">tl::detail::is_swappable&lt; T[N], T[N]&gt;</class>
    <class kind="struct">tl::detail::is_nothrow_swappable</class>
    <class kind="struct">tl::detail::voider</class>
    <class kind="struct">tl::detail::is_optional_impl</class>
    <class kind="struct">tl::detail::is_optional_impl&lt; optional&lt; T &gt; &gt;</class>
    <class kind="struct">tl::detail::returns_void_impl&lt; F, void_t&lt; invoke_result_t&lt; F, U... &gt; &gt;, U... &gt;</class>
    <class kind="struct">tl::detail::optional_storage_base</class>
    <class kind="struct">tl::detail::optional_storage_base::dummy</class>
    <class kind="struct">tl::detail::optional_storage_base&lt; T, true &gt;</class>
    <class kind="struct">tl::detail::optional_storage_base&lt; T, true &gt;::dummy</class>
    <class kind="struct">tl::detail::optional_operations_base</class>
    <class kind="struct">tl::detail::optional_copy_base</class>
    <class kind="struct">tl::detail::optional_copy_base&lt; T, false &gt;</class>
    <class kind="struct">tl::detail::optional_move_base</class>
    <class kind="struct">tl::detail::optional_move_base&lt; T, false &gt;</class>
    <class kind="struct">tl::detail::optional_copy_assign_base</class>
    <class kind="struct">tl::detail::optional_copy_assign_base&lt; T, false &gt;</class>
    <class kind="struct">tl::detail::optional_move_assign_base</class>
    <class kind="struct">tl::detail::optional_move_assign_base&lt; T, false &gt;</class>
    <class kind="struct">tl::detail::optional_delete_ctor_base</class>
    <class kind="struct">tl::detail::optional_delete_ctor_base&lt; T, true, false &gt;</class>
    <class kind="struct">tl::detail::optional_delete_ctor_base&lt; T, false, true &gt;</class>
    <class kind="struct">tl::detail::optional_delete_ctor_base&lt; T, false, false &gt;</class>
    <class kind="struct">tl::detail::optional_delete_assign_base</class>
    <class kind="struct">tl::detail::optional_delete_assign_base&lt; T, true, false &gt;</class>
    <class kind="struct">tl::detail::optional_delete_assign_base&lt; T, false, true &gt;</class>
    <class kind="struct">tl::detail::optional_delete_assign_base&lt; T, false, false &gt;</class>
    <class kind="struct">tl::nullopt_t</class>
    <class kind="struct">tl::nullopt_t::do_not_use</class>
    <class kind="class">tl::bad_optional_access</class>
    <class kind="class">tl::optional</class>
    <class kind="struct">tl::detail::i_am_secret</class>
    <class kind="class">tl::optional&lt; T &amp; &gt;</class>
    <class kind="struct">std::hash&lt; tl::optional&lt; T &gt; &gt;</class>
    <namespace>tl</namespace>
    <namespace>tl::detail</namespace>
    <namespace>tl::detail::swap_adl_tests</namespace>
    <namespace>std</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_VERSION_MAJOR</name>
      <anchorfile>tl-optional_8hpp.html</anchorfile>
      <anchor>aa70d2d557d853f3c3120cbb62a64ea4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_VERSION_MINOR</name>
      <anchorfile>tl-optional_8hpp.html</anchorfile>
      <anchor>adb15831f471c567a5e38bcd0036d6dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_VERSION_PATCH</name>
      <anchorfile>tl-optional_8hpp.html</anchorfile>
      <anchor>a05047b5f3f649025182fec20aaaf9ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_IS_TRIVIALLY_COPY_CONSTRUCTIBLE</name>
      <anchorfile>tl-optional_8hpp.html</anchorfile>
      <anchor>aaa63d17874c7d1b6b715183d21c2be35</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_IS_TRIVIALLY_COPY_ASSIGNABLE</name>
      <anchorfile>tl-optional_8hpp.html</anchorfile>
      <anchor>a7f33879e981f40bb99f40d8d41701aab</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_IS_TRIVIALLY_DESTRUCTIBLE</name>
      <anchorfile>tl-optional_8hpp.html</anchorfile>
      <anchor>a09d77a005b8205210f42a7889f854520</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_11_CONSTEXPR</name>
      <anchorfile>tl-optional_8hpp.html</anchorfile>
      <anchor>a871c57934f04050d51dc9f568870b63f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_MONOSTATE_INPLACE_MUTEX</name>
      <anchorfile>tl-optional_8hpp.html</anchorfile>
      <anchor>aada132df87570346fb17ebb0c6c62ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_TRAITS_MUTEX</name>
      <anchorfile>tl-optional_8hpp.html</anchorfile>
      <anchor>a72467552f8a2944113e9a59c14b13356</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>version.hpp</name>
    <path>include/proxsuite/helpers/</path>
    <filename>version_8hpp.html</filename>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::helpers</namespace>
  </compound>
  <compound kind="file">
    <name>ldlt.hpp</name>
    <path>include/proxsuite/linalg/dense/</path>
    <filename>ldlt_8hpp.html</filename>
    <includes id="dense_2factorize_8hpp" name="factorize.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/factorize.hpp</includes>
    <includes id="dense_2update_8hpp" name="update.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/update.hpp</includes>
    <includes id="modify_8hpp" name="modify.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/modify.hpp</includes>
    <includes id="solve_8hpp" name="solve.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/solve.hpp</includes>
    <includes id="vec_8hpp" name="vec.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <class kind="struct">proxsuite::linalg::dense::_detail::SimdAlignedSystemAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; proxsuite::linalg::dense::_detail::SimdAlignedSystemAlloc &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::Ldlt</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::dense</namespace>
    <namespace>proxsuite::linalg::dense::_detail</namespace>
  </compound>
  <compound kind="file">
    <name>modify.hpp</name>
    <path>include/proxsuite/linalg/dense/</path>
    <filename>modify_8hpp.html</filename>
    <includes id="dense_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/core.hpp</includes>
    <includes id="dense_2update_8hpp" name="update.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/update.hpp</includes>
    <includes id="dense_2factorize_8hpp" name="factorize.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/factorize.hpp</includes>
    <includes id="dynamic__stack_8hpp" name="dynamic_stack.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/dynamic_stack.hpp</includes>
    <class kind="struct">proxsuite::linalg::dense::_detail::IndicesR</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::dense</namespace>
    <namespace>proxsuite::linalg::dense::_detail</namespace>
  </compound>
  <compound kind="file">
    <name>solve.hpp</name>
    <path>include/proxsuite/linalg/dense/</path>
    <filename>solve_8hpp.html</filename>
    <includes id="dense_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/core.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::dense</namespace>
    <namespace>proxsuite::linalg::dense::_detail</namespace>
  </compound>
  <compound kind="file">
    <name>factorize.hpp</name>
    <path>include/proxsuite/linalg/dense/</path>
    <filename>dense_2factorize_8hpp.html</filename>
    <includes id="dense_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/core.hpp</includes>
    <includes id="dynamic__stack_8hpp" name="dynamic_stack.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/dynamic_stack.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::dense</namespace>
    <namespace>proxsuite::linalg::dense::_detail</namespace>
  </compound>
  <compound kind="file">
    <name>factorize.hpp</name>
    <path>include/proxsuite/linalg/sparse/</path>
    <filename>sparse_2factorize_8hpp.html</filename>
    <includes id="sparse_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/sparse/core.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::sparse</namespace>
    <namespace>proxsuite::linalg::sparse::_detail</namespace>
  </compound>
  <compound kind="file">
    <name>rowmod.hpp</name>
    <path>include/proxsuite/linalg/sparse/</path>
    <filename>rowmod_8hpp.html</filename>
    <includes id="sparse_2update_8hpp" name="update.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/sparse/update.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::sparse</namespace>
  </compound>
  <compound kind="file">
    <name>update.hpp</name>
    <path>include/proxsuite/linalg/dense/</path>
    <filename>dense_2update_8hpp.html</filename>
    <includes id="dense_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/dense/core.hpp</includes>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankUpdateLoadW</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankUpdateUpdateWAndL</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankUpdateStoreW</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankUpdateLoadPMu</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankRUpdateLoopImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankRUpdateLoopImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::ConstantR</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::dense</namespace>
    <namespace>proxsuite::linalg::dense::_detail</namespace>
  </compound>
  <compound kind="file">
    <name>update.hpp</name>
    <path>include/proxsuite/linalg/sparse/</path>
    <filename>sparse_2update_8hpp.html</filename>
    <includes id="sparse_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/sparse/core.hpp</includes>
    <includes id="tuple_8hpp" name="tuple.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/tuple.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::sparse</namespace>
  </compound>
  <compound kind="file">
    <name>assert_impl.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>assert__impl_8hpp.html</filename>
    <includes id="typedefs_8hpp" name="typedefs.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/typedefs.hpp</includes>
    <includes id="defer_8hpp" name="defer.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/util/defer.hpp</includes>
    <includes id="internal_2dbg_8hpp" name="dbg.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/dbg.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>VEG_ASSERT</name>
      <anchorfile>assert__impl_8hpp.html</anchorfile>
      <anchor>aaa8d005d06cd4e33683fba9135cae09e</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_ASSERT_ALL_OF</name>
      <anchorfile>assert__impl_8hpp.html</anchorfile>
      <anchor>aa6ff52163dbdeb01e9d3c3fe1cd770cc</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_UNIMPLEMENTED</name>
      <anchorfile>assert__impl_8hpp.html</anchorfile>
      <anchor>ac243842bf4fb4f1c7ff36b978d91e5a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collection_algo.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>collection__algo_8hpp.html</filename>
    <includes id="memory_2alloc_8hpp" name="alloc.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/alloc.hpp</includes>
    <includes id="defer_8hpp" name="defer.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/util/defer.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::DestroyImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::Cleanup</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::DestroyImpl&lt; false &gt;</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_collections</namespace>
  </compound>
  <compound kind="file">
    <name>dbg.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>internal_2dbg_8hpp.html</filename>
    <includes id="primitives_8hpp" name="primitives.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/primitives.hpp</includes>
    <includes id="terminate_8hpp" name="terminate.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/terminate.hpp</includes>
    <includes id="constructible_8hpp" name="constructible.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/constructible.hpp</includes>
    <includes id="ref_8hpp" name="ref.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/ref.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dbg.hpp</name>
    <path>include/proxsuite/linalg/veg/util/</path>
    <filename>util_2dbg_8hpp.html</filename>
    <includes id="internal_2dbg_8hpp" name="dbg.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/dbg.hpp</includes>
  </compound>
  <compound kind="file">
    <name>delete_special_members.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>delete__special__members_8hpp.html</filename>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="typedefs_8hpp" name="typedefs.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/typedefs.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoDefaultCtor</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoMoveAssign</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoCopyAssign</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoMoveCtor</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoCopyCtor</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoMove</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoCopy</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
  </compound>
  <compound kind="file">
    <name>dyn_index.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>dyn__index_8hpp.html</filename>
    <includes id="assert_8hpp" name="assert.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/util/assert.hpp</includes>
    <includes id="fix__index_8hpp" name="fix_index.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/fix_index.hpp</includes>
    <includes id="narrow_8hpp" name="narrow.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/narrow.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::Boolean&lt; maybe &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::Dyn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Dyn, Dyn &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Fix&lt; N &gt;, Dyn &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Fix&lt; 0 &gt;, Dyn &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Dyn, Fix&lt; N &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::fmt::Debug&lt; Boolean&lt; maybe &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::fmt::Debug&lt; Dyn &gt;</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::literals</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VEG_OP</name>
      <anchorfile>dyn__index_8hpp.html</anchorfile>
      <anchor>a882a863eff9ff812562c0abe87fd4bfc</anchor>
      <arglist>(Op, Name, TypeName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CMP</name>
      <anchorfile>dyn__index_8hpp.html</anchorfile>
      <anchor>aa15a275f685a99039edc84e80d0e4468</anchor>
      <arglist>(Name, TypeName, Op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_OP</name>
      <anchorfile>dyn__index_8hpp.html</anchorfile>
      <anchor>abf0277545f8f7807e1c5bbf4725e4f39</anchor>
      <arglist>(Name, TypeName, Op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CMP</name>
      <anchorfile>dyn__index_8hpp.html</anchorfile>
      <anchor>aa15a275f685a99039edc84e80d0e4468</anchor>
      <arglist>(Name, TypeName, Op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>epilogue.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>epilogue_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>hedley.ext.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/external/</path>
    <filename>hedley_8ext_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_VERSION</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a592e47bbc0e3f6963cd28338ad56ca63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_STRINGIFY_EX</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ad99ad37282904d1d4dd12a093240a22e</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_STRINGIFY</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a00ac1aec7bf484e07229ed49405451d5</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CONCAT_EX</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a15d250859f509f0b684eab9e64a75a6d</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CONCAT</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aec0fbcb41662a94cce1b1e349eb8ae5e</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CONCAT3_EX</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a8590edeb09d121274c5f8e658984eb43</anchor>
      <arglist>(a, b, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CONCAT3</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aa0f0275e0a4b32dc3997a88b27c21faf</anchor>
      <arglist>(a, b, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_VERSION_ENCODE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a7ff986d7e621dc76dfb91cf1609527f0</anchor>
      <arglist>(major, minor, revision)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_VERSION_DECODE_MAJOR</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ad7ac136a069e1719c638486206127668</anchor>
      <arglist>(version)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_VERSION_DECODE_MINOR</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a4bc2ac5ffa24585e83fd3945beaf85f6</anchor>
      <arglist>(version)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_VERSION_DECODE_REVISION</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>af1239337279920adfb5a8af675875d53</anchor>
      <arglist>(version)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GNUC_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>acf47a4e5778bde48022291ff45849755</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_MSVC_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a253e55b883c30d60a37a3534bf3a7008</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_INTEL_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aecf79ca581ed3115704fd16723ea31f0</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_INTEL_CL_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a0a07fc2205879adf35054e6a734a61b7</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PGI_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a50ed0115cf3c405a949dd05f6a16d89b</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_SUNPRO_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ae82d73b1c8dbd54752a9919ff89090af</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_EMSCRIPTEN_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a4fba6b4834ddc5ab00513b9263eb4c13</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_ARM_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>acefc7fd9d46d19fbf4692ce9551a8fb2</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_IBM_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a2ccd0b956cb4e715477e9b7041078a6c</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_TI_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a78f62eef70a7bad69d7eb0bffbcba489</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_TI_CL2000_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a59d0adb4a2f74e5e0753a8b94d52b2a9</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_TI_CL430_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a287152db29bebf58dadc75145280b9cd</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_TI_ARMCL_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a257bf1a98b917d81812b1c7b3c4b71c2</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_TI_CL6X_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ab5b6364473c34fa9e95d4d6a2a425ef2</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_TI_CL7X_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a42a1a0580307ec902aa330fe23143a84</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_TI_CLPRU_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a39914cef0d42effa2e86c563e5305551</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CRAY_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a281ba6b4973ba3754d397e7022e32df7</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_IAR_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a90dfbd864b344368ae2f68bf0d5b8edb</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_TINYC_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a34fa98cba6d8b47f79b49584eac49de7</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DMC_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a46e4d3220bea853cb4a156da84ac269b</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_COMPCERT_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ac5c3df73ff288b8fd6626acbacbec98a</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PELLES_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a6f6580fe3eeb3770e01d214734020fee</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GCC_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a461919b137c21c9da9915b7ce345ac67</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_HAS_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>abf3ef58817c8012165be3e0f0a542a69</anchor>
      <arglist>(attribute)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GNUC_HAS_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a7c7593b55c40b4973b4cdf2d664a4072</anchor>
      <arglist>(attribute, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GCC_HAS_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ac691bbbdcbebe3c52c9c045154098448</anchor>
      <arglist>(attribute, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_HAS_CPP_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a81cc528e0f51c05f7657862107d0442c</anchor>
      <arglist>(attribute)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_HAS_CPP_ATTRIBUTE_NS</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a457616f0dfdc3b90a5ffdd899c9d6a97</anchor>
      <arglist>(ns, attribute)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GNUC_HAS_CPP_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aee59b9ef76fb4cecb9e53cc9da460740</anchor>
      <arglist>(attribute, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GCC_HAS_CPP_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ad6266165c7336bc67eae64c5911b0ff4</anchor>
      <arglist>(attribute, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_HAS_BUILTIN</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a71c3beba167f9433da5df5b59479127f</anchor>
      <arglist>(builtin)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GNUC_HAS_BUILTIN</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a6b5e283e4760fb076b5378866c84e615</anchor>
      <arglist>(builtin, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GCC_HAS_BUILTIN</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a192027af1050907ccf3aaa98d69a5fb3</anchor>
      <arglist>(builtin, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_HAS_FEATURE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a85cd7839e1260468651d778f295dc130</anchor>
      <arglist>(feature)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GNUC_HAS_FEATURE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a616a82b1d21d5252c1a6346bc8fe2145</anchor>
      <arglist>(feature, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GCC_HAS_FEATURE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a3aeedac39570f71e3651d57ec6b4205c</anchor>
      <arglist>(feature, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_HAS_EXTENSION</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>af61a62b064f0735118f0fca072850d20</anchor>
      <arglist>(extension)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GNUC_HAS_EXTENSION</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a2d919345629386a2c3810a337d84d792</anchor>
      <arglist>(extension, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GCC_HAS_EXTENSION</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>abac361d303151dd53f397bd97e49b8e0</anchor>
      <arglist>(extension, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_HAS_DECLSPEC_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a1700be1e8b99d8c3f18dc3dfcd5cecad</anchor>
      <arglist>(attribute)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a615d1f120878591f2f7f947595459088</anchor>
      <arglist>(attribute, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>acd5e841575197e6de08ed747e16ffe04</anchor>
      <arglist>(attribute, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_HAS_WARNING</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a24d26e34dd5d1c49d06d115a83fe6895</anchor>
      <arglist>(warning)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GNUC_HAS_WARNING</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ae073dfb62c45a0545bfdf2d81c605f8d</anchor>
      <arglist>(warning, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GCC_HAS_WARNING</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a337945063a50b068c79dfb8ced1371ae</anchor>
      <arglist>(warning, major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PRAGMA</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a340188165b0f1d67892be2f64102d896</anchor>
      <arglist>(value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DIAGNOSTIC_PUSH</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a5efe2b71b6f2cb87c15780f9778de186</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DIAGNOSTIC_POP</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aa8b9322c2d82f400ed07d170c0ded65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a9d82695f38d600791d3e6edfc704abdb</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CONST_CAST</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a25785cb6bce377f51c875139fa22078b</anchor>
      <arglist>(T, expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_REINTERPRET_CAST</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>adfe38caa9c7f9dcd402d3f31d45e42a5</anchor>
      <arglist>(T, expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_STATIC_CAST</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aa6b92d5e6ef13ad56065f6d656da1edb</anchor>
      <arglist>(T, expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CPP_CAST</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a8947cf5db3b19adae1ad7e3cbfdabd6d</anchor>
      <arglist>(T, expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aad1bc42ffaa58e9d96bf56e79ab64f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ad20de39d7781c2da8c2004e21c35a526</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a0e33207887a442fc0c19bd96aacbe676</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a46de7b5c4467c9651259b760baa5e19c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DEPRECATED</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ae616c013e5a3568ee0a5bf3797bff3a7</anchor>
      <arglist>(since)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_DEPRECATED_FOR</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ae39806454ade828243b89d8090c24d9d</anchor>
      <arglist>(since, replacement)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_UNAVAILABLE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a3a02e9b5f7139f5c9b0b2c1b90ec40c4</anchor>
      <arglist>(available_since)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_WARN_UNUSED_RESULT</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a0531b56695618c29565af2bf0a428f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_WARN_UNUSED_RESULT_MSG</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a0e2802554bba8934793b164f846d175a</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_SENTINEL</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ad2b84bec574e582723c880a017c4d480</anchor>
      <arglist>(position)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_NO_RETURN</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>acb9672700849506ad467eec2389d44fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_NO_ESCAPE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aaf5522fdb5e7233f0a146df8d40fbbb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_ASSUME</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a39aeeb8a62c08039ed8dadd8ab9c9629</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_UNREACHABLE_RETURN</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a2c5b7ad9c9d0094f86446fd4bd79dae9</anchor>
      <arglist>(value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_UNREACHABLE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a4baf2cbb115fd9c5309425b27ecf2ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_NON_NULL</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aef9ec5ca6e2b12e76d643f9aa390b1c9</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PRINTF_FORMAT</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a09027dab377cea793f75e042512378be</anchor>
      <arglist>(string_idx, first_to_check)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CONSTEXPR</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ae1008171a096da2a97b1731f06ddb92b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PREDICT</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a09f845024acfb1472b17700ca5ec05ff</anchor>
      <arglist>(expr, expected, probability)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PREDICT_TRUE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aaaedde89d06418960a840bfbd6a4c527</anchor>
      <arglist>(expr, probability)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PREDICT_FALSE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a3e5ab84e68c5afbd01fc2a2a87310301</anchor>
      <arglist>(expr, probability)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_LIKELY</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ade577c9567577c191fce5cbc1250b4a9</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_UNLIKELY</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a1d257a42a33c4434e85f235ccfa007ec</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_UNPREDICTABLE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a58133edde9c4efab60e91f6bd865aff2</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_MALLOC</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a76519d86e3870a94a2cc2d63f4eed7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PURE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a023348b255378d220b94c56eb076eefe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CONST</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a627db13f87f14e86ca2492bdf266bb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_RESTRICT</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ae177fbbda7d7b4251a7b7619088a6910</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_INLINE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ae2f395332f60b03e7ff4b5f70a479761</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_ALWAYS_INLINE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a8bed7efc9cf9a6acf6f7d8f76a57b24f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_NEVER_INLINE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a7114b4ec18d969dea18fd8c572fba024</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PRIVATE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a094e539e8ee75b446afebdf944b90559</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_PUBLIC</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a2e2bb3fdc202c574c484f418f222a0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_IMPORT</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a2fedda788307a1a4ef41d11d1d9bc04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_NO_THROW</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a8d322505b9333cb3bd38e70c6935d3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_FALL_THROUGH</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a5fe64861d27556b18ced98894eaf9147</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_RETURNS_NON_NULL</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a385b1fd682e659fc1922d38b70b86212</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_ARRAY_PARAM</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>af42e5282cb0b345c983cf4556b7e0e40</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_IS_CONSTANT</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a83ed18d74a63a0038bd73e4591739778</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_REQUIRE_CONSTEXPR</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aa02831516fcc0bedf5b7aafda8a4d0d6</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_BEGIN_C_DECLS</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>af7eda2f1dacffe1dc65680ad614bebfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_END_C_DECLS</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>afca123794f7597451f5a2db4d629bd30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_C_DECL</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a667f5bf508b74528a5f03da785181012</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_STATIC_ASSERT</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ad36f255b04d6ab74bcbcb206da04fa15</anchor>
      <arglist>(expr, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_NULL</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a3e2748f147590efd3f4d5b97d54da76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_MESSAGE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a09e891bc1801819d2ff4f8c38f2348fb</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_WARNING</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>acfb647b98536d2f148f414e2db1a7cc9</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_REQUIRE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a33b349ce086b82c65ca0adba3a35f7bf</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_REQUIRE_MSG</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ae3537c023cb21ae997db9104bed58d9c</anchor>
      <arglist>(expr, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_FLAGS</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a277d8ba570e8d1f603b246c9ce794857</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_FLAGS_CAST</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a32195936e60f6e0fae91d0c9bcb08a0d</anchor>
      <arglist>(T, expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_EMPTY_BASES</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>af41ee7a6f4a25ac258c03de397e0d17d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_GCC_NOT_CLANG_VERSION_CHECK</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>aa1dc627b104715f7be81da9d98d64846</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CLANG_HAS_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>addbc619d90a863da09db9f5b7df8c85d</anchor>
      <arglist>(attribute)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CLANG_HAS_CPP_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>ad9a2d7e251e75ca04204a45f4ef3cae7</anchor>
      <arglist>(attribute)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CLANG_HAS_BUILTIN</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a1c03ed773c3cde520d870cf8e9d18ab5</anchor>
      <arglist>(builtin)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CLANG_HAS_FEATURE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a2e8aadd8d0084048429a5700246b48c6</anchor>
      <arglist>(feature)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CLANG_HAS_EXTENSION</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a74c44661d3ef95eb1a832e9e8e0db561</anchor>
      <arglist>(extension)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CLANG_HAS_DECLSPEC_ATTRIBUTE</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a1cb7f71e2da0aa2ea53ed2cad4aebf78</anchor>
      <arglist>(attribute)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEDLEY_CLANG_HAS_WARNING</name>
      <anchorfile>hedley_8ext_8hpp.html</anchorfile>
      <anchor>a52721b5a21ed046e5352deeda1dc1ff9</anchor>
      <arglist>(warning)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unhedley.ext.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/external/</path>
    <filename>unhedley_8ext_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>fix_index.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>fix__index_8hpp.html</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/tags.hpp</includes>
    <includes id="std_8hpp" name="std.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/std.hpp</includes>
    <includes id="internal_2dbg_8hpp" name="dbg.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/dbg.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::idx::adl::IdxBase</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_fix</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_fix&lt; Fix&lt; N &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::Boolean</class>
    <class kind="struct">proxsuite::linalg::veg::Fix</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::Error</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::char_seq</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Fix&lt; N &gt;, Fix&lt; M &gt; &gt;</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::idx</namespace>
    <namespace>proxsuite::linalg::veg::_detail::idx::adl</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_meta</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
    <namespace>proxsuite::linalg::veg::literals</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VEG_OP</name>
      <anchorfile>fix__index_8hpp.html</anchorfile>
      <anchor>a882a863eff9ff812562c0abe87fd4bfc</anchor>
      <arglist>(Op, Name, TypeName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CMP</name>
      <anchorfile>fix__index_8hpp.html</anchorfile>
      <anchor>aa15a275f685a99039edc84e80d0e4468</anchor>
      <arglist>(Name, TypeName, Op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_OP</name>
      <anchorfile>fix__index_8hpp.html</anchorfile>
      <anchor>abf0277545f8f7807e1c5bbf4725e4f39</anchor>
      <arglist>(Name, TypeName, Op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CMP</name>
      <anchorfile>fix__index_8hpp.html</anchorfile>
      <anchor>aa15a275f685a99039edc84e80d0e4468</anchor>
      <arglist>(Name, TypeName, Op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>has_asan.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>has__asan_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_ASAN</name>
      <anchorfile>has__asan_8hpp.html</anchorfile>
      <anchor>ac10a2faf570426225364ceeae837d5ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>integer_seq.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>integer__seq_8hpp.html</filename>
    <includes id="typedefs_8hpp" name="typedefs.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/typedefs.hpp</includes>
    <includes id="macros_8hpp" name="macros.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/macros.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::meta::and_test</class>
    <class kind="struct">proxsuite::linalg::veg::meta::or_test</class>
    <class kind="struct">proxsuite::linalg::veg::meta::pack_size</class>
    <class kind="struct">proxsuite::linalg::veg::meta::and_test&lt; index_sequence&lt; Is... &gt;, indexed&lt; Is, true_type &gt;... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::or_test&lt; index_sequence&lt; Is... &gt;, indexed&lt; Is, false_type &gt;... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::all_same_impl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::all_same_impl&lt; meta::index_sequence&lt; Is... &gt;, discard_1st&lt; decltype(Is), T &gt;... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::all_same_impl&lt; meta::index_sequence&lt;&gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::apply_type_seq&lt; F, meta::type_sequence&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq&lt; meta::true_type, F &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq&lt; meta::true_type, F, F&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq2&lt; F, F&lt; Ts... &gt;, F&lt; Zipped... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::specializes</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::specializes&lt; F, F&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::specialize_len</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::specialize_len&lt; F, F&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq&lt; meta::true_type, F, F&lt; Ts... &gt;, Seq, Seqs... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F, F&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F, F&lt; Ts... &gt;, F&lt; Us... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F, F&lt; Ts... &gt;, F&lt; Us... &gt;, F&lt; Vs... &gt;, Seqs... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::HollowLeaf</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::HollowIndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::pack_ith_elem</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::pack_idx_elem</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::meta</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_meta</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>macros.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>macros_8hpp.html</filename>
    <includes id="hedley_8ext_8hpp" name="hedley.ext.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/external/hedley.ext.hpp</includes>
    <includes id="typedefs_8hpp" name="typedefs.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/typedefs.hpp</includes>
    <includes id="preprocessor_8hpp" name="preprocessor.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/preprocessor.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::_detail::Wrapper</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::enable_if</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::enable_if&lt; false, T &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T const &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T volatile &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T volatile const &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::unref&lt; T &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::static_const</class>
    <class kind="struct">proxsuite::linalg::veg::nb::unused</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::EmptyI</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_merge&lt; integer_sequence&lt; T, Nums1... &gt;, integer_sequence&lt; T, Nums2... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_merge_p1&lt; integer_sequence&lt; T, Nums1... &gt;, integer_sequence&lt; T, Nums2... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence&lt; T, N, false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence&lt; T, 0 &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence&lt; T, 1 &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::SimpleLeaf</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::SimpleITuple&lt; _meta::integer_sequence&lt; usize, Is... &gt;, Ts... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::mem_ptr_type&lt; Mem C::* &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::member_extract_access</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::member_extract_access::DetectImpl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::member_extract_access::DetectImpl&lt; U, typename U::_veglib_impl_member_extract::Type &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::constant</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::wrapper_base</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::wrapper</class>
    <class kind="struct">proxsuite::linalg::veg::Str</class>
    <class kind="struct">proxsuite::linalg::veg::StrLiteralConstant</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::Array_</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::ExtractCharsImpl&lt; LiteralType, _meta::integer_sequence&lt; usize, Is... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::ExtractCharsImplExpr&lt; LiteralType, _meta::integer_sequence&lt; usize, Is... &gt; &gt;</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::meta</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_meta</namespace>
    <namespace>proxsuite::linalg::veg::nb</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_meta::_detail</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
    <namespace>proxsuite::linalg::veg::tags</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROXSUITE_PRETTY_FUNCTION</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a6135d760c10c50254e56782685d2b876</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROXSUITE_THROW_PRETTY</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ac0eb1c8c69c787eab56cb75308ce593d</anchor>
      <arglist>(condition, exception, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROXSUITE_CHECK_ARGUMENT_SIZE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>aa58523167d4f9bef2ebad7c56de9453c</anchor>
      <arglist>(size, expected_size, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEPRECATED</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a89394db0bff078cfb16f3d48b7a3d957</anchor>
      <arglist>(Reason)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_UNUSED_VARIABLE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a595cdd534c8d4bcef18a6c3a56a0c425</anchor>
      <arglist>(var)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_ONLY_USED_FOR_DEBUG</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a24e8be9829a417e726368390195e081d</anchor>
      <arglist>(var)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_WRAP_SILENCE_WARNING</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>aeaf8d1c503c5c102b73bfa38b9bd36ea</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_NO_UNIQUE_ADDRESS</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>aee403ca2ac777b8cc341f7607f0cadd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NO_UNIQUE_ADDRESS</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a9cb0d75b83ad1db8e2a22b03cf3ff253</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_INLINE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a92d27b065d6a699b0e19e9fc2dc7cb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NO_INLINE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a9a1345fd14d0ee76ef22246e1aae7c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_CONCEPTS</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a0848377b146366c500ca9a84f226179d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DECLVAL</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>acc251ff3df7143b95cb3c2a03d212cdc</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_ARROW</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a13db7f706f9c13068e6506878e34b244</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_LAZY_BY_REF</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ae01a1072b3598ae1f83707b736f49bb8</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_LIFT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a99cac9ca22548cd427f18d961d4dff3b</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEDUCE_RET</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ac37fabcc58aa72a02f6758e3eeb30560</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_FOLD_EXPR</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a93ebd45c8c1d5f40cea52034f55ee165</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_ALL_OF</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a0259dae300622279c2eeaa1a231d02cf</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_ANY_OF</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ad81c1e00f356348013f9c64e58edc19f</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_EVAL_ALL</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a04bee7ebadc5d502c2d400d8582f273a</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_DEF_CONCEPT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a63fead4784cc0f27f86329ee693ca36b</anchor>
      <arglist>(Tpl, Name, Value,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_NO_WARNING_PRAGMA_PUSH</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a97155c5ae6fa5286c6f8ea6c486eddee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_NO_WARNING_PRAGMA_POP</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ab26ee4d295aaa8fb44fb6fe502a42098</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a015c7c9516ab685a782bb60b216af850</anchor>
      <arglist>(Tpl, TplNames, Name, Expr,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CONCEPT_MACRO</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ab7f5b3f07285744299621591ac41c117</anchor>
      <arglist>(Namespace,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_ADD_VALUE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>af4d79c391700bd3a97777116cc078310</anchor>
      <arglist>(I, _, Param)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_TRAIT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a64dda2f2cf220bb0fd2a90177adb6162</anchor>
      <arglist>(Param)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PUT_TRAIT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a9ddf0e623d038af7a5de404215d45018</anchor>
      <arglist>(I, _, Param)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CHECK_CONCEPT_MACRO</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ac8345631e78e2bd84c56fa8d17337026</anchor>
      <arglist>(Namespace,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ae1600d0c634adada70559ae9ed57d6db</anchor>
      <arglist>(Tpl, Name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_SFINAE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a70fbedfc05e0d55aab7409eea3ade022</anchor>
      <arglist>(_, Param)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_OVERLOAD</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ae214583c50537ceb4bd0b2a40d6c3b24</anchor>
      <arglist>(Name_Tpl, Param)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEF_CONCEPT_BOOL_CONJUNCTION_IMPL</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>abf29f721a76a7a1305197ef85bb9d5c4</anchor>
      <arglist>(Tpl, Name, Base, Seq)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEF_CONCEPT_BOOL_DISJUNCTION_IMPL</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>aca5401fa67070af7568fd24a9508cdf2</anchor>
      <arglist>(Tpl, Name, Base, Seq)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEF_CONCEPT_CONJUNCTION</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>aaf0cd65f3ad03bc14e57f4325dfb4a1c</anchor>
      <arglist>(Tpl, Name, Terms)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEF_CONCEPT_DISJUNCTION</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a67bc901ff9337ae4477374905e668f5b</anchor>
      <arglist>(Tpl, Name, Terms)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_CONJUNCTION</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ac37cd179e76a580a0e0d06ff9fe7bc00</anchor>
      <arglist>(Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_DISJUNCTION</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ac9ba89a7056118fd2003ec827b197e46</anchor>
      <arglist>(Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a6d9e53b17be1359c6645f3d2dd68a386</anchor>
      <arglist>(TParams, Constraint, Attr_Name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CONSTRAINED_MEMBER_FN</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>aaad03f89e0d644515e3f0f12eeb624cb</anchor>
      <arglist>(Constraint, Attr_Name, Params,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_TEMPLATE_CVT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a38e6dffed81314218352ef78f069164a</anchor>
      <arglist>(TParams, Constraint, Attr,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_TEMPLATE_EXPLICIT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ae127ff67d599f446026605f47c6feb2c</anchor>
      <arglist>( TParams, Constraint, Explicit_Cond, Attr_Name, Params,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_TEMPLATE_CVT_EXPLICIT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ac6db6f167e5581675d162997762d907a</anchor>
      <arglist>( TParams, Constraint, Explicit_Cond, Attr, Type,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PREFIX_requires</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a70a975c3f3853d55b411efd630abcef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PREFIX_explicit</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>abd1558b03de1a72943d462774002704b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PARAM_EXPAND</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a663141c80ade3b5cf932f60b611216cb</anchor>
      <arglist>(I, _, Param)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_TEMPLATE2_HELPER_0</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a9fbbdd0731a1236da3bfd73882755851</anchor>
      <arglist>(Constraint, Param)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_TEMPLATE2_HELPER_1</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>aae9372f7fd0c026fbf8d0f1654a46c0c</anchor>
      <arglist>(Constraint, Param)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_TEMPLATE2_HELPER</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>aeee6dc77f6faee435f4acb8a90355403</anchor>
      <arglist>(I, Constraint, Param)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_TEMPLATE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ad09e11934b4c7545c7cdc8487f511396</anchor>
      <arglist>(Attr_Name, TParams, Constraint,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_INLINE_VAR</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a8aa8cf6426861f8f6b31b070188db99b</anchor>
      <arglist>(Name, Obj)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_INLINE_VAR_TEMPLATE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a49d87fd197b39bc64455d863837f0289</anchor>
      <arglist>(Tpl, Name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a7e0b2fa1b8e863dd5406f70e7736aca3</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NIEBLOID_TEMPLATE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a7035ac105b9479ec403dbddd2e2e99a7</anchor>
      <arglist>(Tpl, Name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_TAG</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a59229da18d1303c0856e4101fa7fbd02</anchor>
      <arglist>(Name, Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_TAG_TEMPLATE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ab91f888ff944473dac2265d1fd2db65f</anchor>
      <arglist>(Tpl, Name, Type,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_FWD</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>aa188f9c212af5b45780dedb3e7ecb76f</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_FWD2</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ae942c8fc016ff9252e97d21241b8cfc8</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_MOV</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a6e1f4f97d7f51450c9ac20269e385c20</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_INSTANTIATE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a2a15d79fc5261c8c8823a2aa3200a069</anchor>
      <arglist>(Fn,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_INSTANTIATE</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a3357776b81e838cea7cccdf0edb8f83c</anchor>
      <arglist>(Fn, Name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_INSTANTIATE_CLASS</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a4e4a27fccf3772d13a11c1471f0462cc</anchor>
      <arglist>(Class,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NOM_SEMICOLON</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>af6a7c1634b1a3c472b56843004a4c6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_ID</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ad5eeb95624d5a90730e7dca7ce930835</anchor>
      <arglist>(id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEF_CONCEPT_BUILTIN_OR_INTERNAL</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a123d7c3acfc1a72069075caf03ca4fa0</anchor>
      <arglist>(Tpl, Name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_UTF8_CONST</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a9ca2c435cccdb05eb6ca9bdbfccd076e</anchor>
      <arglist>(Literal)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DECLTYPE_VOID</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a4d8e20bdc64f3b523acbe59e6c17e015</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_BOOL_NOEXCEPT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a6fce19d74e670f5a9f6e6faaa453e85c</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CHECK_CONCEPT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ae45fe051ba47de6c78e8ed5f4aadf6fa</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CONCEPT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a6c79efb65e887fd88337eac51ccf5784</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_GET_MEMBER_PTR</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a29e3031d0c38efac73991a704bef9974</anchor>
      <arglist>(_, MemberPtr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_GET_MEMBER_NAME_PTR</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>af83f679ae62a969da55c373379e202b7</anchor>
      <arglist>(_, MemberPtr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_GET_MEMBER_NAME_LEN</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ac5949effcb24424831f5a61bf46fae7e</anchor>
      <arglist>(_, MemberPtr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_STRUCT_SETUP</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>a54d166551d0ef356a04b7eb8eab57ca2</anchor>
      <arglist>(PClass,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_REFLECT</name>
      <anchorfile>macros_8hpp.html</anchorfile>
      <anchor>ae0f165dd2ebcd8c76811041b2ac2dda9</anchor>
      <arglist>(PClass,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>narrow.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>narrow_8hpp.html</filename>
    <includes id="fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/fwd.hpp</includes>
    <includes id="assert_8hpp" name="assert.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/util/assert.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">proxsuite/helpers/common.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::nb::narrow</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::nb</namespace>
  </compound>
  <compound kind="file">
    <name>preprocessor.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>preprocessor_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_COUNT</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a670b05c8a5aa4f36462d7621c2be28f8</anchor>
      <arglist>(Arg_0, Arg_1, Arg_2, Arg_3, Arg_4, Arg_5, Arg_6, Arg_7, Arg_8, Arg_9, Arg_10, Arg_11, Arg_12, Arg_13, Arg_14, Arg_15, Arg_16, Arg_17, Arg_18, Arg_19, Arg_20, Arg_21, Arg_22, Arg_23, Arg_24, Arg_25, Arg_26, Arg_27, Arg_28, Arg_29, Arg_30, Arg_31, N,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a0680e7477d385186e31e3020d53d4118</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_2</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a447c97de5d2c5fe87f8a6f96598ce5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_3</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab5b48b6ff96e708b272350cbe39fc13d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_4</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4b6d7a9048e3b8b5adef3775aaae02d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_5</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a9269ed397519d04517c1ef60eacad436</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_6</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a230be9081b00227f07acfafb0c5f8c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_7</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a747d575fa0a4033ebfef8834ee416f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_8</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ac47a67c09f89d169d0d4331f493462c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_9</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a52c8fa0fb69cfdd3a1a145480a00c371</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_10</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae67cfe07a8346dde2b4c65f927e80aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_11</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4242d7c6db00d084b1ae813248f11a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_12</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a2b60478565065d7ac29ca8caca141294</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_13</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aee4dcf1618f0034317096be6ea158a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_14</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a89046678b94f666942569e65cd92dbcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_15</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a72f84d1f60f11065def7f1a10b0c8ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_16</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab736b29b4d2f31768d839f3ed29a3d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_17</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>acde701260ec06155afe644b0bebcf021</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_18</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab7d7355948cda0589373dfefe4281ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_19</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>acc2493d74d886f8cb5aaa604b9ed69f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_20</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a0ad42aa51256930a90bb454352b4dc64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_21</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a3930cbe183e1e0f7eeeb7070ed240d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_22</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4fadfcda173aa47f58202e82595c309e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_23</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a92b35042ef6cb1d46397b4ef7e721995</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_24</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a3e62b26dec2bb1804f79f971e8899465</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_25</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a00f5df9ae1b844dbf6423cb52c800c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_26</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae2a0e1cb41cd4eaf908ca282f0f8a5b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_27</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a7cd23f299ac4cd1b40d96246e23e10d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_28</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aa25d3b3764e5d57c8fab96a480d77c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_29</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>abab1227062208536a4ef8bb394b6484d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_30</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aff769220feeaa4abb07efaaa4b1e1b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_31</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a6f51b76c364dc80decb79f4577860b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_32</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a0c80ae52500a504bbb5f7fbd2ba93c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_33</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a5420d6e23146f24e1a693fb3ce27425c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a48d9b721e6d3cafd46212339a6066fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_2</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae8a48fe2590a50067e268095f8c851e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_3</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a986b4dcba795d2fe1e70b5dda6b09adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_4</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a515c603b58e32fd32823c964a4a5e6e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_5</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a65337ab4b3de008a74b135412f1a33e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_6</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a012a95d56e589a1285e4f0f994bd8b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_7</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4986a1e0275820dd3257f3273af1af3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_8</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aca3f38b7589ee0a6799483b68ae204af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_9</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>afe601dec379484431c9929273cd82956</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_10</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a8e8537bd9d6ada3a71cb066f8b5b9915</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_11</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a0dc9a02e15e2c635668cfc496db5f251</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_12</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae6a800684ea4acc0192ab88643296983</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_13</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a64fcb45bb8bf933a321fbb65579e8d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_14</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>afde5445c913adaa3b48facd93d8bde77</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_15</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae2ba772dbc3814792744da777292b671</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_16</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af206abff82a95c85b0d91b4dec60f176</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_17</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a269962903a74e53289a28728957965d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_18</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a00c5cb71ce992290e3b0a05ad826b57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_19</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a8903607ba09d2fb766b921fec234fdc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_20</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a44903444c0dd1aec55e22371debcb3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_21</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aee10f6fb178cb91952140bf45f143a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_22</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aba74260dbf4ab7b82e5c0a7f41cbac11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_23</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aa35716c7c5f1edaa8ee4f4958c025f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_24</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aa3078b1d976366bb802614f76a42545f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_25</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aaaf3cc95c9bb5fbc52b75f92120fa2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_26</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a992787cc8c704881cf44e81a051f295f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_27</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a274119f566908f9aaeb459bc3accbbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_28</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>acdeb10c5c42d1582b065225295c5a2cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_29</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a6a70ca877cf70ac8d6498e43c14bfee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_30</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a315de585aab80b5dff9d0e316510602f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_31</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af9c976b7311da40c522f8d89573f1db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_32</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a5df20585ef1581fe6e40d2b5ac7dd0fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_33</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a907331199a1ccef8b6e83f66a5639f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_0</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a8545f83bdd4eae6d378700b369c32583</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a94577a86923e6dcc0a3c44ead0ee4c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_2</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae79c7bd430a5cd4d6cc78b604cf5869c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_3</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a49b9ab583fa2822aab07fe7c648a5603</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_4</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>afbcd035efbd48b6b0be51484fa3d8582</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_5</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4c3f509bf8061169c2efe2c29f862eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_6</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aafa541f46ada233fbf3c25df36b45692</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_7</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a6ef120b3d817116106f820f1a4162b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_8</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aab217fbffbce66f651e6d5e89838057b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_9</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a64286db2c85f42403810d18b039243ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_10</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a51d34941c2f55f191b993c3bd8d80224</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_11</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a118ebb5ed755a6e8b9623e9c8da3e592</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_12</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a1adb8068cfde7365a6d6e30aa840ad8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_13</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a2ecc8c201be8337f33023b7c319bb225</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_14</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a941c0ca6d2a48fed5590e033c46184a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_15</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a6093966b9395c9e0f5a9e11f3903a3e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_16</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a663a0c690356eded613c78ea834f46fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_17</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a5fecb65ce830dcc594739a4a19253dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_18</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aa7b10166a0d992bf64a120f434f2009d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_19</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aab5b749d242f5fdb99d1c4f08dd931fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_20</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a02ec38f4f33b5229b8a6d0b190faef2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_21</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a8fd8a0ea495e3ca6617f0bdfe7dd2b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_22</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a9d0d44e1804bae55d8b3e4e0362eaef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_23</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af830f39e2b85027c8803df6a5a7fe792</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_24</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a5f6318eecdeb590c2a3035b5695739e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_25</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae351d2f2ad8c267faf7ef21ffb276dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_26</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a65746b4c284972745a5eedff9ce64f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_27</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a60b149e9b1252c3c639452c6acb0eaef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_28</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>abaef97647869c1b845ae68afece38901</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_29</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab7b2b1f2b795f7d02de9df30cfb5855f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_30</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aba1af044014b1a16cd940ca445737efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_31</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a697c7b94f506883802aeeeb4a4c9ccd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_32</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a87dad29a5a1b2ab47acd49cc60a09909</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC_I</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a29a6a5374e52ac3dc0cf35d19002ad09</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_DEC</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a137c4038db6eebf7735cef63c1d8aef3</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC_I</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a0f025b4007cebc71c6cbfd0dad33ed32</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_INC</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a97372e7817396f02c97e5c3acfe87344</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1_I</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab1aa0dd145c62493fdfae5844a1697dc</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_IS_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a51cfda18dccbb54e485f1b0667867806</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_COMMA_IF_NOT_0_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aefc0157046b73d351ce5fa655a7fdb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_COMMA_IF_NOT_0_0</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aab3ad6ca645319f8de7a2954ef372aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_COMMA_IF_NOT_0</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a59eb224ecd6e3a9907010605d6030eda</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_IS_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a235fd9a5684cb6715a56609fa2e07ce3</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_IS_0</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a7cf352ccfd4d19bc0996ff49fb1f809a</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_ID</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a5ed3aee59b502c2e42f89b7f8bf8a254</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_VARIADIC_SIZE</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a458768711a0d8befcb0370070f5b34c8</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE0</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a1d861f29885dd59da71f92f6c6a7400b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a6a245f31f1c0faa20753cba985aa42f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE2</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ac5b5446ba7f4001db39a31ad8173999b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE3</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae0fe0541106ea5aa1f3ea548faf8ef05</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE4</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab9d6b7f8680646293fc75114487496c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE5</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af372dd6664a81c8592298569353bf3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE6</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a03bba02965fb2d5dc883aa3f614bb9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE7</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae15524b182c27f6059fcc788b9a181cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE8</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a15858e59defea0a7cb0feb5fe5a19af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE9</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ad46d84af9986dfadb853bdaf231e2805</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE10</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a6ffd40130790f7226a56896dba75797b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE11</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>abc45dc48405e31dccee6f745de612c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE12</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a8418570f58644b00976d9031ccf69cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE13</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae8cfd8f1b1c8d2c096a0cd34e4e3fbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE14</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a85d4fe369e4281fd27b9d3d64621f2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE15</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab57aee01f74c1b299083df1a96b9c31d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE16</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a923b424a587d9de826627bb7e584f707</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE17</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a3cf005c47a8c985fddcf4f5e1d960454</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE18</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ad97c44a21782a2437524e5d3983dd968</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE19</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a7d3144cad4d4e044b453d12d2f781582</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE20</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ac6f20bc165538d72296d2dc5d7e58309</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE21</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a849f16a4b30ecbecc692c1fd2afed1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE22</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a77342d0212e91912f1e6e61c4164cc72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE23</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a1af3193281dcd74a39a30784e64241d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE24</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a0ef32d82ec49cbd58b1d2543cf41ee91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE25</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a3f5df7d88fa5bb2340590c6a6c0df5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE26</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ac5036c57867ebbdbd7c60e424c7d0b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE27</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab95221280fb62da7c2604b09670e8f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE28</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab4f158d252d2b22ea0ddcb6517ea7d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE29</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>afe47e349eae2ae4ef5fd2d4e448775b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE30</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a3d3d3cf14072d2849c299edd9686df06</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE31</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a84d83306b44b2bf085f414be12af6c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_MAKE_TUPLE32</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a7a2ce34d7c19f5ac254989da3331246c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_CAT</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a15609b0b572d3b2de382f1849e8569db</anchor>
      <arglist>(A,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_CAT2</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a2edec360184615ae061e661539164510</anchor>
      <arglist>(A,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_CAT3</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ab149e117d4dd71dd41b4d1364038bde9</anchor>
      <arglist>(A,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_CONSUME</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ada43e02086eb0ee89d221fe266bd9314</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_SEQ_HEAD_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a52a13367386f6381a8ce56ef2f290fce</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_SEQ_HEAD_0</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a933fef086fdc1ab572acc157f57561cb</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_HEAD_0</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a56d77a23d83772f6c5345de687ae74b0</anchor>
      <arglist>(arg,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TAIL_0</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a87a62267a63884580068481c7c856112</anchor>
      <arglist>(arg,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_HEAD_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae28196310fbcba2ed015d942cba030bb</anchor>
      <arglist>(arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TAIL_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ac1aa24df6ed64a226c6500957871b34c</anchor>
      <arglist>(arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_STRINGIZE</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af26b575c2f8fa4c5219a815c2292293c</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_REMOVE_PAREN1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ad3cde619d20b403b6a13e9dbde48f36a</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_REMOVE_PAREN2</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a3887c47c459dec02a324e5ca9faed4c9</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP__VEG_IMPL_PP_REMOVE_PAREN1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a59fd38f1596ffb36c616571bb93c2c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_REMOVE_PAREN11</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a7145676514e441417af57ee21cc931b4</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_REMOVE_PAREN21</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a41ebf9482cd204bb2a57a5eb151117fd</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP__VEG_IMPL_PP_REMOVE_PAREN11</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a9ca66a56be6fb69b093728e533b3d0ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_MAKE_TUPLE</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a127f0307adda0d8001d0f929b6dc613b</anchor>
      <arglist>(N)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a1e58308efee1676e726331035e33bbd1</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_2</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a48d874d30592e60c5f3bb4ed65b94b34</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_3</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a7fcc23ef98693708e3c8f26dd66941ce</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_4</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ad47c8c8ae8debf94597da504b8647306</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_5</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ad7ea09a3096524060d79a52ecb4fa26c</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_6</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a077bb59cd6a335f43794baa9339c21a5</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_7</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a3624db810834395933b92989e02de873</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_8</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a5f6cc3299fbae1b4a015c92779c1e5fb</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_9</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a28f1708812c6640bad67d7dbb1b15a3e</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_10</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a47ffd3c7e59b3e18d3ac793db5bf7bbe</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_11</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a1ceb15d8b3dfbf43c9f2ec6ec96ba271</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_12</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aa0998eefe8f5c0800547487f2d840d94</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_13</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aabf8e758faf09d00a009b2e82dc3f675</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_14</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a5561185c900d02a8e3383a8fb0b607f5</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_15</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4fffd5ee9d7152617ec9bafa74d72a04</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_16</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4619cb59e36b16ae9e93aa9d4aa534f7</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_17</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af69badc78e9dba35a1a6d0023eb897da</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_18</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aa8a7403f24738c5babbffe0f65255dfc</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_19</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a0e0f17fa05f524d0054e7c05fdc86af7</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_20</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a273c451e1e2dc03a6dbb2b21a295b25f</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_21</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4d40cb743e43486d71f5dcff98b5f1ac</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_22</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a0854816224764b338c8435bf38e2655a</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_23</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a51e7885967ae50d35da155189fb34d4b</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_24</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a23a86f0cc18190ff53fbec498d64300e</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_25</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a952c6a0d55cd15d86502e91369e959d6</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_26</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a153474588a131388d07c8c154de2b390</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_27</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a7ba5ed44ece185bfce38f781e9657c77</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_28</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4e9b11fd3cd7e302917849844f208f0e</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_29</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a11f9d4d64f0128f5fa3d8eb8a82f05a5</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_30</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ac0f34fd2e5c62892133c5a56083c0ede</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_31</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4ced3d47271a3d80048b76bff05843db</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_32</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a3521a0f16faaf04bf2af8c8c193d3a75</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aa1cc00c9150ddfeefcaf468ce712c6d0</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_2</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>abe4b6fed4d411de399e73e4bdf57df22</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_3</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a00ef90cbd98660f9fae588030aa9334b</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_4</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a6a9d656bc1db325b414df12e67bbb052</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_5</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>afaaf344311162beb6d63b29eb1d60c97</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_6</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af6c7818c41c82a6850cc0c8173205d6d</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_7</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ac838e10c3e7a398b175f300626351bdf</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_8</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a1d286a9ceab23b25bc6172ad8588d6d5</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_9</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af6c0ca06cd143b3b7515c2a211d02ec6</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_10</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a76350bdb85477e52f910efa4b71ad95f</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_11</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae66090c0ff1456e77a7215cf44ddddfe</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_12</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a9b1193944fc0e64e0a3c4adb03f66694</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_13</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a93e0bb85388fedd5481b5bfce64339fa</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_14</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a98bd3a2fee329659d3a14d20b9c32022</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_15</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a4a89b577d02575e802723fab56a12d85</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_16</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af09d0d3575e8e8fcfb9de8df573ff9a4</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_17</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae2e7830e0076e88a4b5e909395ff3ab7</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_18</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a0f89752e7edeb04121fe385bb1c0a725</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_19</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a33972ac18ddb179e5be405351d0821f1</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_20</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ad301ba66a0b05bd89a7ebc89b530611e</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_21</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a5075d7437ec23828bf65d04e29b810ce</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_22</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a311cf98b75a77516c9acb4919a07c751</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_23</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae128e81b92f40e0af134f9936f1fdcd5</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_24</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aaef17156d03c3958f416fcd2cc4cc170</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_25</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a7f45d6a389d7738577572a8d1b611d2d</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_26</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a9b4ba65cc55618fdf66c9817c096e7ef</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_27</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a069467c35dece8269c18ab37147eb6aa</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_28</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a6a69722bfd69e7a56de6267b3fbd63d8</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_29</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aa83631a0e532e52f9789791681952f9c</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_30</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af52bdfefb5f1037fda994e0a137f1b61</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_31</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ada5daa01722e033e64a0284777384c19</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TUPLE_FOR_EACH_I_32</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a81e514ab3257ef8ecbf2031c27b28dce</anchor>
      <arglist>(Macro, Start, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TRANSFORM_HELPER</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a1fbb2950e27324479bc64d9b7c11b3e1</anchor>
      <arglist>(I, Macro_Data, Elem)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TRANSFORM_0</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>acc81b69324452ed852a703fbf375b4be</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_PP_TRANSFORM_1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a81c5476067dd0f9eeaa83a65214b8071</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_TUPLE_FOR_EACH_I</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a692e4f76a4d201cf2a66861d42a836dd</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_TUPLE_FOR_EACH</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a18eb6670d67d3cc9acf66ae78378152d</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_TUPLE_TRANSFORM_I</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>af3678ba1fbfd98157f20b627c76bb176</anchor>
      <arglist>(Macro, Data, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_TUPLE_SIZE</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ad48f7ecd8a9303bcd8b2adaf1ac5ed05</anchor>
      <arglist>(Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_SEQ_HEAD</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a784c49382e49f5a3838f554ef800885a</anchor>
      <arglist>(Seq)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_SEQ_TAIL</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a913892ee51f09600d09b2722275eeb07</anchor>
      <arglist>(Seq)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_HEAD</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a8637a2e0e77da7056acd64120a305248</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_TAIL</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ae39f00104bbb09440e4d25b9a5df9ecf</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_STRINGIZE</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a056ee5f19f733fdc7484fa85e1f63488</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_CAT</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>afb4dad67bc533ef6eb0b3c06214b1a52</anchor>
      <arglist>(A,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_CAT2</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a524241f169cb7395aaa2c0a0e3d616e3</anchor>
      <arglist>(A,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_CAT3</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a8081de8dcd2f141f80bc0996b144a08c</anchor>
      <arglist>(A,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_REMOVE_PAREN</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>aa5a5044036e4077839b120e5d78b8267</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_REMOVE_PAREN1</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>a6ffe02ae659dfba53aa9a66513bf6f0c</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_PP_UNWRAP</name>
      <anchorfile>preprocessor_8hpp.html</anchorfile>
      <anchor>ac7aa9e29bcef0328c16d736b15c003e3</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>prologue.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>prologue_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>VEG_PROLOGUE</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a1c2d45403a015b323ddbab1bb78b11e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_ALWAYS_NOEXCEPT</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a9b90f5fcbe5d8ae4b8d67226975574ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NOEXCEPT</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a5407ecebadca4469e63ed1c1d2b75cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NOEXCEPT_IF</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>ae19da3faa20183171e21b9ec0817608c</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_IS_NOEXCEPT</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a80928f93d0e43e3053fb76d4e83fcf03</anchor>
      <arglist>(Expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NOEXCEPT_LIKE</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>adfaa74a73003b76cffed1dfba086b0cf</anchor>
      <arglist>(Expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_BUILTIN_OR_0</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>ae7f031831020d353c5689395f570d64c</anchor>
      <arglist>(True, False)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_BUILTIN_OR_1</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a8d5ce6434e707704b3032176c85c27f7</anchor>
      <arglist>(True, False)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_BUILTIN_OR</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a50e4dd422e6cb7cec350d28f493825db</anchor>
      <arglist>(Builtin, True, False)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_TRAIT</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a8d2f1ad710d8c8e4e92340ebef661008</anchor>
      <arglist>(Tpl, Trait, Std_Trait,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>acb987918e8704d5e4f5307c12ff894c4</anchor>
      <arglist>(Tpl, Trait,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_EXPLICIT_COPY</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a42f0f2e3982f19b6461b72d0bc91b165</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NO_COPY</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a5b50a0e55ae751a24d86599ea4b2092e</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CPP14</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a65d1d28ffb643f854cf8670b858123e8</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CPP17</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a8dd0601e573459e4c7f4d9e4e47a737b</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_CPP20</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a0285fdde2565050aba2ab27a2dd98c3f</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_BUILTIN</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a5be0c27c703d51325453897953e19d67</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_NODISCARD</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a394bcdf9398b81df45aafd64fbff7dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_INTERNAL_ASSERT_PRECONDITION</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a09f99603e25e5b554869009d05b05f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_INTERNAL_ASSERT_PRECONDITIONS</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a9c2b356541e88bb8002fef0f351e6a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_INTERNAL_ASSERT_INVARIANT</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a058e99006578757da934320f3134054a</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_IGNORE_CPP14_EXTENSION_WARNING</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a796e8b6b7c318f5ac5f0ab6aa3946810</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_ABI_VERSION</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a5de6d49a9743ce4ac537981ecca8af64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DOC</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>af1f66484ec7683d95abdda4a2604c1c0</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DOC_LOCATION</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a55d7dd1214b7b6bb25970d14cff4ecc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DOC_FN</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>aeeb8aec97675fcb2f5dbcc75ce8eb492</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DOC_CTOR</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>a1bf4b191052bc38a23cda3aca5311204</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DOC_CLASS</name>
      <anchorfile>prologue_8hpp.html</anchorfile>
      <anchor>ac307b189da0e0f87bff13d4d5d1ba6b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>std.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>std_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_HAS_INCLUDE</name>
      <anchorfile>std_8hpp.html</anchorfile>
      <anchor>a7cb746919bc2e6e189cd97ac3b2774ba</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>terminate.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>terminate_8hpp.html</filename>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
  </compound>
  <compound kind="file">
    <name>typedefs.hpp</name>
    <path>include/proxsuite/linalg/veg/internal/</path>
    <filename>typedefs_8hpp.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned char &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned short &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned int &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned long &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned long long &gt;</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_meta</namespace>
  </compound>
  <compound kind="file">
    <name>address.hpp</name>
    <path>include/proxsuite/linalg/veg/memory/</path>
    <filename>address_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="std_8hpp" name="std.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/std.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::member_addr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::adl_addr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::builtin_addr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::has_member_addr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::has_adl_addr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::addr_impl</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::addressof</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_mem</namespace>
    <namespace>proxsuite::linalg::veg::mem</namespace>
    <namespace>proxsuite::linalg::veg::mem::nb</namespace>
  </compound>
  <compound kind="file">
    <name>dynamic_stack.hpp</name>
    <path>include/proxsuite/linalg/veg/memory/</path>
    <filename>dynamic__stack_8hpp.html</filename>
    <includes id="fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/fwd.hpp</includes>
    <includes id="assert_8hpp" name="assert.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/util/assert.hpp</includes>
    <includes id="collection__algo_8hpp" name="collection_algo.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/collection_algo.hpp</includes>
    <includes id="memory_2alloc_8hpp" name="alloc.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/alloc.hpp</includes>
    <includes id="placement_8hpp" name="placement.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/placement.hpp</includes>
    <includes id="slice_8hpp" name="slice.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/slice.hpp</includes>
    <includes id="constructible_8hpp" name="constructible.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/constructible.hpp</includes>
    <includes id="address_8hpp" name="address.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/address.hpp</includes>
    <includes id="narrow_8hpp" name="narrow.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/narrow.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::dynstack::StackReq</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::DynStackArrayDtor</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::DynStackArrayDtor&lt; T, false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::default_init_fn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::zero_init_fn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::no_init_fn</class>
    <class kind="struct">proxsuite::linalg::veg::dynstack::DynStackMut</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::cleanup</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::DynAllocBase</class>
    <class kind="struct">proxsuite::linalg::veg::dynstack::DynStackAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::dynstack::DynStackArray</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_dynstack</namespace>
    <namespace>proxsuite::linalg::veg::dynstack</namespace>
  </compound>
  <compound kind="file">
    <name>placement.hpp</name>
    <path>include/proxsuite/linalg/veg/memory/</path>
    <filename>placement_8hpp.html</filename>
    <includes id="constructible_8hpp" name="constructible.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/constructible.hpp</includes>
    <includes id="std_8hpp" name="std.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/std.hpp</includes>
    <includes id="invocable_8hpp" name="invocable.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/invocable.hpp</includes>
    <includes id="address_8hpp" name="address.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/address.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::launder</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::construct_at</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::construct_with</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::destroy_at</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::align_next</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::align_prev</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::bit_cast</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::mem</namespace>
    <namespace>proxsuite::linalg::veg::mem::nb</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_BITCAST</name>
      <anchorfile>placement_8hpp.html</anchorfile>
      <anchor>af8277e0090552bb9e308f3953c29f72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_BITCAST_CONSTEXPR</name>
      <anchorfile>placement_8hpp.html</anchorfile>
      <anchor>a0ace5e5d3288fc1bd429be7829350fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_LAUNDER</name>
      <anchorfile>placement_8hpp.html</anchorfile>
      <anchor>a6ec909799fa53182ead7168ed595474a</anchor>
      <arglist>(p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stack_alloc.hpp</name>
    <path>include/proxsuite/linalg/veg/memory/</path>
    <filename>stack__alloc_8hpp.html</filename>
    <includes id="slice_8hpp" name="slice.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/slice.hpp</includes>
    <includes id="type__traits_2alloc_8hpp" name="alloc.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/alloc.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::BumpAllocLayout</class>
    <class kind="struct">proxsuite::linalg::veg::mem::BumpAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::StackAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::MonotonicAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; BumpAlloc&lt; MaxAlign &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; StackAlloc&lt; MaxAlign &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; MonotonicAlloc&lt; MaxAlign &gt; &gt;</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_mem</namespace>
    <namespace>proxsuite::linalg::veg::mem</namespace>
  </compound>
  <compound kind="file">
    <name>ref.hpp</name>
    <path>include/proxsuite/linalg/veg/</path>
    <filename>ref_8hpp.html</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/tags.hpp</includes>
    <includes id="constructible_8hpp" name="constructible.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/constructible.hpp</includes>
    <includes id="address_8hpp" name="address.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/address.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::cmp::ref::RefBase</class>
    <class kind="struct">proxsuite::linalg::veg::cmp::mut::RefMutBase</class>
    <class kind="struct">proxsuite::linalg::veg::Ref</class>
    <class kind="struct">proxsuite::linalg::veg::nb::ref</class>
    <class kind="struct">proxsuite::linalg::veg::RefMut</class>
    <class kind="struct">proxsuite::linalg::veg::nb::deref</class>
    <class kind="struct">proxsuite::linalg::veg::nb::deref_mut</class>
    <class kind="struct">proxsuite::linalg::veg::nb::mut</class>
    <class kind="struct">proxsuite::linalg::veg::nb::clone</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::cmp</namespace>
    <namespace>proxsuite::linalg::veg::cmp::ref</namespace>
    <namespace>proxsuite::linalg::veg::cmp::mut</namespace>
    <namespace>proxsuite::linalg::veg::nb</namespace>
  </compound>
  <compound kind="file">
    <name>slice.hpp</name>
    <path>include/proxsuite/linalg/veg/</path>
    <filename>slice_8hpp.html</filename>
    <includes id="assert_8hpp" name="assert.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/util/assert.hpp</includes>
    <includes id="get_8hpp" name="get.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/util/get.hpp</includes>
    <includes id="narrow_8hpp" name="narrow.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/narrow.hpp</includes>
    <includes id="tuple_8hpp" name="tuple.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/tuple.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::_detail::_slice::adl::AdlBase</class>
    <class kind="struct">proxsuite::linalg::veg::Slice</class>
    <class kind="struct">proxsuite::linalg::veg::SliceMut</class>
    <class kind="struct">proxsuite::linalg::veg::array::Array</class>
    <class kind="struct">proxsuite::linalg::veg::nb::init_list</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; Slice&lt; T &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::Array</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_slice</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_slice::adl</namespace>
    <namespace>proxsuite::linalg::veg::array</namespace>
    <namespace>proxsuite::linalg::veg::nb</namespace>
  </compound>
  <compound kind="file">
    <name>tuple.hpp</name>
    <path>include/proxsuite/linalg/veg/</path>
    <filename>tuple_8hpp.html</filename>
    <includes id="assignable_8hpp" name="assignable.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/assignable.hpp</includes>
    <includes id="internal_2dbg_8hpp" name="dbg.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/dbg.hpp</includes>
    <includes id="invocable_8hpp" name="invocable.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/invocable.hpp</includes>
    <includes id="get_8hpp" name="get.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/util/get.hpp</includes>
    <includes id="fix__index_8hpp" name="fix_index.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/fix_index.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::tuplify</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::IndexedTuple</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::TupleLeafImpl&lt; T, true &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::TupleLeafImpl&lt; T, false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::TupleLeaf</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::unpack</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::for_each_i</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::for_each</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::map_i</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::map</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::meta_::NonTupleBaseInfoImpl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::meta_::TupleBaseInfoImpl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::meta_::is_tuple_helper</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::meta_::IndexedToTuple&lt; tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::Tuple</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::with</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::zip</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::cat</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::deref_assign</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; tuple::Tuple&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; tuple::Tuple&lt; Ts... &gt; &gt;</class>
    <class kind="struct">std::tuple_size&lt; proxsuite::linalg::veg::Tuple&lt; Ts... &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; I, proxsuite::linalg::veg::Tuple&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::Tuple</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::tuple</namespace>
    <namespace>proxsuite::linalg::veg::tuple::nb</namespace>
    <namespace>proxsuite::linalg::veg::tags</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::meta_</namespace>
    <namespace>proxsuite::linalg::veg::tuple::meta</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
    <namespace>proxsuite::linalg::veg::concepts::tuple</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_tuple</namespace>
    <namespace>proxsuite::linalg::veg::cpo</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_BIND</name>
      <anchorfile>tuple_8hpp.html</anchorfile>
      <anchor>a6756786eab5d5c969d103292c4caa9e5</anchor>
      <arglist>(I, Tuple, Identifier)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_BIND_ID_SEQ</name>
      <anchorfile>tuple_8hpp.html</anchorfile>
      <anchor>a7b0c1ec1201805ad11b085bd5ef23731</anchor>
      <arglist>(CV_Auto, Identifiers, Tuple, Tuple_Size, TupleId)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_BIND</name>
      <anchorfile>tuple_8hpp.html</anchorfile>
      <anchor>a7087922aad0809e30b958092cda2a5cc</anchor>
      <arglist>(CV_Auto, Identifiers, Tuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_LEAF</name>
      <anchorfile>tuple_8hpp.html</anchorfile>
      <anchor>affd9077524082354b836eef201fffe5c</anchor>
      <arglist>(Tuple, I,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_LEAF_MUT</name>
      <anchorfile>tuple_8hpp.html</anchorfile>
      <anchor>acaa5d901fdee45b0c27afff2c86da0ae</anchor>
      <arglist>(Tuple, I,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_LEAF_ONCE</name>
      <anchorfile>tuple_8hpp.html</anchorfile>
      <anchor>ac4953b4d8f6360575e497cf182ba52e4</anchor>
      <arglist>(Tuple, I,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>alloc.hpp</name>
    <path>include/proxsuite/linalg/veg/memory/</path>
    <filename>memory_2alloc_8hpp.html</filename>
    <includes id="fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/fwd.hpp</includes>
    <includes id="ref_8hpp" name="ref.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/ref.hpp</includes>
    <includes id="constructible_8hpp" name="constructible.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/constructible.hpp</includes>
    <includes id="assignable_8hpp" name="assignable.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/assignable.hpp</includes>
    <includes id="typedefs_8hpp" name="typedefs.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/typedefs.hpp</includes>
    <includes id="macros_8hpp" name="macros.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/macros.hpp</includes>
    <includes id="placement_8hpp" name="placement.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/placement.hpp</includes>
    <includes id="type__traits_2alloc_8hpp" name="alloc.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/alloc.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::alignment::detail::min_size</class>
    <class kind="struct">proxsuite::linalg::veg::alignment::detail::offset_value</class>
    <class kind="struct">proxsuite::linalg::veg::alignment::detail::alignment_of</class>
    <class kind="struct">proxsuite::linalg::veg::mem::CopyAvailableFor</class>
    <class kind="struct">proxsuite::linalg::veg::mem::DtorAvailableFor</class>
    <class kind="struct">proxsuite::linalg::veg::mem::SystemAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; SystemAlloc &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::mem::DefaultCloner</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Cloner&lt; DefaultCloner &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::ManagedAlloc</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::alignment</namespace>
    <namespace>proxsuite::linalg::veg::alignment::detail</namespace>
    <namespace>proxsuite::linalg::veg::mem</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_mem</namespace>
  </compound>
  <compound kind="file">
    <name>alloc.hpp</name>
    <path>include/proxsuite/linalg/veg/type_traits/</path>
    <filename>type__traits_2alloc_8hpp.html</filename>
    <includes id="has__asan_8hpp" name="has_asan.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/has_asan.hpp</includes>
    <includes id="ref_8hpp" name="ref.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/ref.hpp</includes>
    <includes id="constructible_8hpp" name="constructible.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/constructible.hpp</includes>
    <includes id="assignable_8hpp" name="assignable.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/assignable.hpp</includes>
    <includes id="typedefs_8hpp" name="typedefs.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/typedefs.hpp</includes>
    <includes id="macros_8hpp" name="macros.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/macros.hpp</includes>
    <includes id="placement_8hpp" name="placement.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/placement.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Cloner</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::DeferUnreachable</class>
    <class kind="struct">proxsuite::linalg::veg::mem::AllocBlock</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Layout</class>
    <class kind="struct">proxsuite::linalg::veg::mem::RelocFn</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::mem</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_mem</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
    <namespace>proxsuite::linalg::veg::concepts::alloc</namespace>
  </compound>
  <compound kind="file">
    <name>assignable.hpp</name>
    <path>include/proxsuite/linalg/veg/type_traits/</path>
    <filename>assignable_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>constructible.hpp</name>
    <path>include/proxsuite/linalg/veg/type_traits/</path>
    <filename>constructible_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait_impl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_cpo::member_trait_and&lt; Trait, SimpleITuple&lt; _meta::integer_sequence&lt; usize, Is... &gt;, Ts Bases::*... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait_impl&lt; true, Trait, T &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_relocatable</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::DefaultFn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::MoveFn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::CopyFn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::WithArg</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
    <namespace>proxsuite::linalg::veg::cpo</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_cpo</namespace>
  </compound>
  <compound kind="file">
    <name>core.hpp</name>
    <path>include/proxsuite/linalg/dense/</path>
    <filename>dense_2core_8hpp.html</filename>
    <includes id="util_2dbg_8hpp" name="dbg.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/util/dbg.hpp</includes>
    <includes id="assert_8hpp" name="assert.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/util/assert.hpp</includes>
    <includes id="dynamic__stack_8hpp" name="dynamic_stack.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/dynamic_stack.hpp</includes>
    <class kind="struct">proxsuite::linalg::dense::_detail::_simd::Pack&lt; T, 1 &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::_simd::NativePackInfo</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::NoCopy</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::nb::max2</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::nb::min2</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::ElemAddrImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::ElemAddrImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RowColAccessImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RowColAccessImpl&lt; false &gt;</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::dense</namespace>
    <namespace>proxsuite::linalg::dense::_detail</namespace>
    <namespace>proxsuite::linalg::dense::_detail::_simd</namespace>
    <namespace>proxsuite::linalg::dense::_detail::nb</namespace>
    <namespace>proxsuite::linalg::dense::util</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_ID</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>a12dbf5c568c007210c7dfeb05d73567e</anchor>
      <arglist>(id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__LDLT_TEMP_VEC_IMPL</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>a39688f370dc65e94eff9bb4eae71b3f1</anchor>
      <arglist>(Type, Name, Rows, Stack, Make)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__LDLT_TEMP_MAT_IMPL</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>abce6356d8aeaaed1375c923b1bb5a05e</anchor>
      <arglist>(Type, Name, Rows, Cols, Stack, Make)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_TEMP_VEC</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>a5aa13f0d48fde8c77d23c33e2dcb524b</anchor>
      <arglist>(Type, Name, Rows, Stack)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_TEMP_VEC_UNINIT</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>a83925de94efaab2ebc348d6ff1357cf1</anchor>
      <arglist>(Type, Name, Rows, Stack)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_TEMP_MAT</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>abbf940cf509804d2f66f86479a7d8799</anchor>
      <arglist>(Type, Name, Rows, Cols, Stack)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_TEMP_MAT_UNINIT</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>a62cef0d6225488e68317d6e8ae7038b6</anchor>
      <arglist>(Type, Name, Rows, Cols, Stack)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DENSE_LDLT_FP_PRAGMA</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>a0d26ee7ddf5c812816787602d44778bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_FN_IMPL3</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>a1a570e4adbfc51941c5d09741dbe66b7</anchor>
      <arglist>(Fn, Prefix, Suffix)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_ARITHMETIC_IMPL</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>accbd649d02f39f37b62a02dd1fc6f246</anchor>
      <arglist>(Prefix, Suffix)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_LOAD_STORE</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>a7910fdc91997d1f5f37dc2c3b01f1700</anchor>
      <arglist>(Prefix, Suffix)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAZY_PRODUCT</name>
      <anchorfile>dense_2core_8hpp.html</anchorfile>
      <anchor>a343cb6a82136d73ddd53c069c13a1099</anchor>
      <arglist>(a, b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core.hpp</name>
    <path>include/proxsuite/linalg/sparse/</path>
    <filename>sparse_2core_8hpp.html</filename>
    <includes id="slice_8hpp" name="slice.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/slice.hpp</includes>
    <includes id="dynamic__stack_8hpp" name="dynamic_stack.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/dynamic_stack.hpp</includes>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::wrapping_plus</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::checked_non_negative_plus</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::wrapping_inc</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::wrapping_dec</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::sign_extend</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::zero_extend</class>
    <class kind="struct">proxsuite::linalg::sparse::DenseVecRef</class>
    <class kind="struct">proxsuite::linalg::sparse::DenseVecMut</class>
    <class kind="struct">proxsuite::linalg::sparse::VecRef</class>
    <class kind="struct">proxsuite::linalg::sparse::_detail::SymbolicMatRefInterface</class>
    <class kind="struct">proxsuite::linalg::sparse::_detail::SymbolicMatMutInterface</class>
    <class kind="struct">proxsuite::linalg::sparse::SymbolicMatRef</class>
    <class kind="struct">proxsuite::linalg::sparse::SymbolicMatMut</class>
    <class kind="struct">proxsuite::linalg::sparse::MatRef</class>
    <class kind="struct">proxsuite::linalg::sparse::MatMut</class>
    <class kind="struct">proxsuite::linalg::sparse::DynStackMut</class>
    <class kind="struct">proxsuite::linalg::sparse::Slice</class>
    <class kind="struct">proxsuite::linalg::sparse::SliceMut</class>
    <class kind="struct">proxsuite::linalg::sparse::Ref</class>
    <class kind="struct">proxsuite::linalg::sparse::RefMut</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::sparse</namespace>
    <namespace>proxsuite::linalg::sparse::tags</namespace>
    <namespace>proxsuite::linalg::sparse::concepts</namespace>
    <namespace>proxsuite::linalg::sparse::_detail</namespace>
    <namespace>proxsuite::linalg::sparse::util</namespace>
    <namespace>proxsuite::linalg::sparse::util::nb</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SPARSE_LDLT_CONCEPT</name>
      <anchorfile>sparse_2core_8hpp.html</anchorfile>
      <anchor>af9f8ef0d39f66dc906cb6e431b9b82e6</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPARSE_LDLT_CHECK_CONCEPT</name>
      <anchorfile>sparse_2core_8hpp.html</anchorfile>
      <anchor>aa1fd471f366e2e5ff799f154ae59eea8</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core.hpp</name>
    <path>include/proxsuite/linalg/veg/type_traits/</path>
    <filename>veg_2type__traits_2core_8hpp.html</filename>
    <includes id="typedefs_8hpp" name="typedefs.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/typedefs.hpp</includes>
    <includes id="integer__seq_8hpp" name="integer_seq.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/integer_seq.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::meta::nb::is_consteval</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::conditional_&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::conditional_&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::none</class>
    <class kind="struct">proxsuite::linalg::veg::meta::meta_apply</class>
    <class kind="struct">proxsuite::linalg::veg::meta::apply_wrapper</class>
    <class kind="struct">proxsuite::linalg::veg::meta::type_identity</class>
    <class kind="struct">proxsuite::linalg::veg::meta::disjunction&lt;&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::conjunction&lt;&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::disjunction&lt; First, Preds... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::conjunction&lt; First, Preds... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::decay_helper</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::decay_helper&lt; Ret(Args...)&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::decay_helper&lt; T[N]&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detector</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detector&lt; meta::void_t&lt; Ftor&lt; Args... &gt; &gt;, Ftor, Args... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::detector</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_pointer</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_pointer&lt; T * &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::baseof_wrapper</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_lvalue_reference</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_lvalue_reference&lt; T &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_rvalue_reference</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_rvalue_reference&lt; T &amp;&amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_const</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_const&lt; T const &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_complete</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_complete&lt; T, bool_constant&lt; sizeof(T)==sizeof(T)&gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::concepts::conjunction</class>
    <class kind="struct">proxsuite::linalg::veg::concepts::disjunction</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::meta</namespace>
    <namespace>proxsuite::linalg::veg::meta::nb</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_meta</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VEG_HAS_CONSTEVAL</name>
      <anchorfile>veg_2type__traits_2core_8hpp.html</anchorfile>
      <anchor>ac9e7fd1fba2e85142f619f5445149979</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>invocable.hpp</name>
    <path>include/proxsuite/linalg/veg/type_traits/</path>
    <filename>invocable_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="constructible_8hpp" name="constructible.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/constructible.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_meta</namespace>
    <namespace>proxsuite::linalg::veg::meta</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>primitives.hpp</name>
    <path>include/proxsuite/linalg/veg/type_traits/</path>
    <filename>primitives_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
    <namespace>proxsuite::linalg::veg::concepts::aux</namespace>
  </compound>
  <compound kind="file">
    <name>tags.hpp</name>
    <path>include/proxsuite/linalg/veg/type_traits/</path>
    <filename>tags_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::tags::InPlace</class>
    <class kind="struct">proxsuite::linalg::veg::tags::InPlace&lt; void &gt;</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::tags</namespace>
  </compound>
  <compound kind="file">
    <name>assert.hpp</name>
    <path>include/proxsuite/linalg/veg/util/</path>
    <filename>assert_8hpp.html</filename>
    <includes id="assert__impl_8hpp" name="assert_impl.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/assert_impl.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEBUG_ASSERT</name>
      <anchorfile>assert_8hpp.html</anchorfile>
      <anchor>af5774eeef032f628575c1aa7f6f52e7c</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEBUG_EXPECT</name>
      <anchorfile>assert_8hpp.html</anchorfile>
      <anchor>a51c27e53e48187973be0d9804f2522a4</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEBUG_ASSERT_ELSE</name>
      <anchorfile>assert_8hpp.html</anchorfile>
      <anchor>afdb71c8e415de8dadef08c0bcaed3712</anchor>
      <arglist>(Message,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEBUG_EXPECT_ELSE</name>
      <anchorfile>assert_8hpp.html</anchorfile>
      <anchor>a80bb1b1247e583da1a2f8a380d83b6b0</anchor>
      <arglist>(Message,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEBUG_ASSERT_ALL_OF</name>
      <anchorfile>assert_8hpp.html</anchorfile>
      <anchor>a80101a403f8b6663774ae85aaa2a84e0</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEBUG_EXPECT_ALL_OF</name>
      <anchorfile>assert_8hpp.html</anchorfile>
      <anchor>a1d4a4d268b38298764baa363182f0af9</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEBUG_ASSERT_ALL_OF_ELSE</name>
      <anchorfile>assert_8hpp.html</anchorfile>
      <anchor>af28b9b2e23a51b2099c80f9837e3f523</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_DEBUG_EXPECT_ALL_OF_ELSE</name>
      <anchorfile>assert_8hpp.html</anchorfile>
      <anchor>a45bd252a02f8b1989769a72962150918</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defer.hpp</name>
    <path>include/proxsuite/linalg/veg/util/</path>
    <filename>defer_8hpp.html</filename>
    <includes id="constructible_8hpp" name="constructible.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/constructible.hpp</includes>
    <includes id="invocable_8hpp" name="invocable.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/invocable.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::Defer</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
  </compound>
  <compound kind="file">
    <name>dynstack_alloc.hpp</name>
    <path>include/proxsuite/linalg/veg/util/</path>
    <filename>dynstack__alloc_8hpp.html</filename>
    <includes id="vec_8hpp" name="vec.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <includes id="dynamic__stack_8hpp" name="dynamic_stack.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/dynamic_stack.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_IMPL_MAKE_STACK</name>
      <anchorfile>dynstack__alloc_8hpp.html</anchorfile>
      <anchor>ac7a0200271bc8ae58c13f9f67ca27ded</anchor>
      <arglist>(vec, stack,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEG_MAKE_STACK</name>
      <anchorfile>dynstack__alloc_8hpp.html</anchorfile>
      <anchor>ab8f428b6826143700ffeafc6c29ffb99</anchor>
      <arglist>(stack,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>get.hpp</name>
    <path>include/proxsuite/linalg/veg/util/</path>
    <filename>get_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::meta::is_bounded_array</class>
    <class kind="struct">proxsuite::linalg::veg::meta::is_bounded_array&lt; T[N]&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::array_extent</class>
    <class kind="struct">proxsuite::linalg::veg::meta::array_extent&lt; T[N]&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::array_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::member_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::adl_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::none_found</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::has_array_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::has_member_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::has_adl_get</class>
    <class kind="struct">proxsuite::linalg::veg::nb::get</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::meta</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_meta</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
    <namespace>proxsuite::linalg::veg::concepts::aux</namespace>
    <namespace>proxsuite::linalg::veg::nb</namespace>
  </compound>
  <compound kind="file">
    <name>index.hpp</name>
    <path>include/proxsuite/linalg/veg/util/</path>
    <filename>index_8hpp.html</filename>
    <includes id="dyn__index_8hpp" name="dyn_index.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/dyn_index.hpp</includes>
  </compound>
  <compound kind="file">
    <name>unreachable.hpp</name>
    <path>include/proxsuite/linalg/veg/util/</path>
    <filename>unreachable_8hpp.html</filename>
    <includes id="macros_8hpp" name="macros.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/macros.hpp</includes>
    <includes id="terminate_8hpp" name="terminate.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/terminate.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::meta::nb::unreachable</class>
    <class kind="struct">proxsuite::linalg::veg::meta::nb::unreachable_if</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::meta</namespace>
    <namespace>proxsuite::linalg::veg::meta::nb</namespace>
  </compound>
  <compound kind="file">
    <name>vec.hpp</name>
    <path>include/proxsuite/linalg/veg/</path>
    <filename>vec_8hpp.html</filename>
    <includes id="delete__special__members_8hpp" name="delete_special_members.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/delete_special_members.hpp</includes>
    <includes id="memory_2alloc_8hpp" name="alloc.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/memory/alloc.hpp</includes>
    <includes id="collection__algo_8hpp" name="collection_algo.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/collection_algo.hpp</includes>
    <includes id="narrow_8hpp" name="narrow.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/narrow.hpp</includes>
    <includes id="slice_8hpp" name="slice.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/slice.hpp</includes>
    <includes id="unreachable_8hpp" name="unreachable.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/util/unreachable.hpp</includes>
    <includes id="prologue_8hpp" name="prologue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/prologue.hpp</includes>
    <includes id="epilogue_8hpp" name="epilogue.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/internal/epilogue.hpp</includes>
    <class kind="struct">proxsuite::linalg::veg::_detail::_vector::adl::AdlBase</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::relocate_pointer_trivial</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::relocate_pointer</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::relocate_pointer&lt; T, false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::collections::relocate_pointer</class>
    <class kind="struct">proxsuite::linalg::veg::vector::RawVector</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneFn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::AllocCleanup</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneFromImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneFromImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_vector::RawVectorMoveRaii</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_vector::VecAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::VecImpl</class>
    <class kind="struct">proxsuite::linalg::veg::Vec</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; Vec&lt; T, A &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; Vec&lt; T, A &gt; &gt;</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_vector</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_vector::adl</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_collections</namespace>
    <namespace>proxsuite::linalg::veg::collections</namespace>
    <namespace>proxsuite::linalg::veg::vector</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__VEG_ASAN_ANNOTATE</name>
      <anchorfile>vec_8hpp.html</anchorfile>
      <anchor>a9cc1486e36f2f14e5bcbe1042b68eeb6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>backward_data.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>backward__data_8hpp.html</filename>
    <includes id="optional_8hpp" name="optional.hpp" local="no" import="no" module="no" objc="no">proxsuite/helpers/optional.hpp</includes>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="proxqp_2dense_2fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/fwd.hpp</includes>
    <class kind="struct">proxsuite::proxqp::dense::BackwardData</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROXSUITE_CHECK_SIZE</name>
      <anchorfile>backward__data_8hpp.html</anchorfile>
      <anchor>ade4af3bcfd90cd0f894b7e2f274cf7b3</anchor>
      <arglist>(size, expected_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compute_ECJ.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>compute__ECJ_8hpp.html</filename>
    <includes id="proxqp_2dense_2wrapper_8hpp" name="wrapper.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/wrapper.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
  </compound>
  <compound kind="file">
    <name>dense.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>dense_8hpp.html</filename>
    <includes id="proxqp_2dense_2wrapper_8hpp" name="wrapper.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/wrapper.hpp</includes>
  </compound>
  <compound kind="file">
    <name>linesearch.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>linesearch_8hpp.html</filename>
    <includes id="dense_2views_8hpp" name="views.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="proxqp_2dense_2model_8hpp" name="model.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/model.hpp</includes>
    <includes id="proxqp_2results_8hpp" name="results.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/results.hpp</includes>
    <includes id="proxqp_2dense_2workspace_8hpp" name="workspace.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/workspace.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <class kind="struct">proxsuite::proxqp::dense::linesearch::PrimalDualDerivativeResult</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
    <namespace>proxsuite::proxqp::dense::linesearch</namespace>
  </compound>
  <compound kind="file">
    <name>omp.hpp</name>
    <path>include/proxsuite/proxqp/parallel/</path>
    <filename>omp_8hpp.html</filename>
    <namespace>proxsuite</namespace>
  </compound>
  <compound kind="file">
    <name>qp_solve.hpp</name>
    <path>include/proxsuite/proxqp/parallel/</path>
    <filename>qp__solve_8hpp.html</filename>
    <includes id="compute__ECJ_8hpp" name="compute_ECJ.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/compute_ECJ.hpp</includes>
    <includes id="proxqp_2sparse_2wrapper_8hpp" name="wrapper.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/wrapper.hpp</includes>
    <includes id="omp_8hpp" name="omp.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/parallel/omp.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
  </compound>
  <compound kind="file">
    <name>results.hpp</name>
    <path>include/proxsuite/proxqp/</path>
    <filename>proxqp_2results_8hpp.html</filename>
    <includes id="optional_8hpp" name="optional.hpp" local="no" import="no" module="no" objc="no">proxsuite/helpers/optional.hpp</includes>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="vec_8hpp" name="vec.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <includes id="status_8hpp" name="status.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/status.hpp</includes>
    <includes id="proxqp_2sparse_2fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/fwd.hpp</includes>
    <class kind="struct">proxsuite::proxqp::Info</class>
    <class kind="struct">proxsuite::proxqp::Results</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
  </compound>
  <compound kind="file">
    <name>results.hpp</name>
    <path>include/proxsuite/serialization/</path>
    <filename>serialization_2results_8hpp.html</filename>
    <includes id="proxqp_2results_8hpp" name="results.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/results.hpp</includes>
    <namespace>cereal</namespace>
  </compound>
  <compound kind="file">
    <name>settings.hpp</name>
    <path>include/proxsuite/proxqp/</path>
    <filename>proxqp_2settings_8hpp.html</filename>
    <includes id="status_8hpp" name="status.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/status.hpp</includes>
    <includes id="dense_2views_8hpp" name="views.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="proxqp_2sparse_2fwd_8hpp" name="fwd.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/sparse/fwd.hpp</includes>
    <class kind="struct">proxsuite::proxqp::Settings</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
  </compound>
  <compound kind="file">
    <name>settings.hpp</name>
    <path>include/proxsuite/serialization/</path>
    <filename>serialization_2settings_8hpp.html</filename>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <namespace>cereal</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.hpp</name>
    <path>include/proxsuite/</path>
    <filename>fwd_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PROXSUITE_MAYBE_UNUSED</name>
      <anchorfile>fwd_8hpp.html</anchorfile>
      <anchor>ad3a35cc8e3f08a0b6c0b3b3ce77c9884</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROXSUITE_EIGEN_MALLOC</name>
      <anchorfile>fwd_8hpp.html</anchorfile>
      <anchor>ae6cd878bcc51cf2a6fe70d8160f0d4e6</anchor>
      <arglist>(allowed)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROXSUITE_EIGEN_MALLOC_ALLOWED</name>
      <anchorfile>fwd_8hpp.html</anchorfile>
      <anchor>a70c7efc0355797a8d37bb28636a64e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROXSUITE_EIGEN_MALLOC_NOT_ALLOWED</name>
      <anchorfile>fwd_8hpp.html</anchorfile>
      <anchor>ac0ede9886fc8bba8406c240cb6731c20</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fwd.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>proxqp_2dense_2fwd_8hpp.html</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">proxsuite/helpers/common.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.hpp</name>
    <path>include/proxsuite/proxqp/sparse/</path>
    <filename>proxqp_2sparse_2fwd_8hpp.html</filename>
    <includes id="vec_8hpp" name="vec.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <includes id="dense_2views_8hpp" name="views.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">proxsuite/helpers/common.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
  </compound>
  <compound kind="file">
    <name>helpers.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>dense_2helpers_8hpp.html</filename>
    <includes id="proxqp_2results_8hpp" name="results.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/results.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <includes id="status_8hpp" name="status.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/status.hpp</includes>
    <includes id="proxqp_2dense_2fwd_8hpp" name="fwd.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/fwd.hpp</includes>
    <includes id="proxqp_2dense_2preconditioner_2ruiz_8hpp" name="ruiz.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/preconditioner/ruiz.hpp</includes>
    <includes id="optional_8hpp" name="optional.hpp" local="no" import="no" module="no" objc="no">proxsuite/helpers/optional.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
  </compound>
  <compound kind="file">
    <name>helpers.hpp</name>
    <path>include/proxsuite/proxqp/sparse/</path>
    <filename>sparse_2helpers_8hpp.html</filename>
    <includes id="optional_8hpp" name="optional.hpp" local="no" import="no" module="no" objc="no">proxsuite/helpers/optional.hpp</includes>
    <includes id="vec_8hpp" name="vec.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <includes id="proxqp_2sparse_2fwd_8hpp" name="fwd.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/sparse/fwd.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
  </compound>
  <compound kind="file">
    <name>model.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>proxqp_2dense_2model_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="proxqp_2dense_2fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/fwd.hpp</includes>
    <includes id="proxqp_2sparse_2model_8hpp" name="model.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/model.hpp</includes>
    <includes id="backward__data_8hpp" name="backward_data.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/backward_data.hpp</includes>
    <class kind="struct">proxsuite::proxqp::dense::Model</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
  </compound>
  <compound kind="file">
    <name>model.hpp</name>
    <path>include/proxsuite/proxqp/sparse/</path>
    <filename>proxqp_2sparse_2model_8hpp.html</filename>
    <includes id="sparse_2core_8hpp" name="core.hpp" local="yes" import="no" module="no" objc="no">proxsuite/linalg/sparse/core.hpp</includes>
    <includes id="proxqp_2sparse_2fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/fwd.hpp</includes>
    <class kind="struct">proxsuite::proxqp::sparse::Model</class>
    <class kind="struct">proxsuite::proxqp::sparse::SparseModel</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
  </compound>
  <compound kind="file">
    <name>model.hpp</name>
    <path>include/proxsuite/serialization/</path>
    <filename>serialization_2model_8hpp.html</filename>
    <includes id="proxqp_2dense_2model_8hpp" name="model.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/model.hpp</includes>
    <namespace>cereal</namespace>
  </compound>
  <compound kind="file">
    <name>identity.hpp</name>
    <path>include/proxsuite/proxqp/dense/preconditioner/</path>
    <filename>dense_2preconditioner_2identity_8hpp.html</filename>
    <includes id="dense_2views_8hpp" name="views.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <class kind="struct">proxsuite::proxqp::dense::preconditioner::IdentityPrecond</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
    <namespace>proxsuite::proxqp::dense::preconditioner</namespace>
  </compound>
  <compound kind="file">
    <name>identity.hpp</name>
    <path>include/proxsuite/proxqp/sparse/preconditioner/</path>
    <filename>sparse_2preconditioner_2identity_8hpp.html</filename>
    <class kind="struct">proxsuite::proxqp::sparse::preconditioner::Identity</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
    <namespace>proxsuite::proxqp::sparse::preconditioner</namespace>
  </compound>
  <compound kind="file">
    <name>ruiz.hpp</name>
    <path>include/proxsuite/proxqp/dense/preconditioner/</path>
    <filename>proxqp_2dense_2preconditioner_2ruiz_8hpp.html</filename>
    <includes id="dense_2views_8hpp" name="views.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="proxqp_2dense_2fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/fwd.hpp</includes>
    <includes id="dense_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/dense/core.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <class kind="struct">proxsuite::proxqp::dense::preconditioner::RuizEquilibration</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
    <namespace>proxsuite::proxqp::dense::detail</namespace>
    <namespace>proxsuite::proxqp::dense::preconditioner</namespace>
  </compound>
  <compound kind="file">
    <name>ruiz.hpp</name>
    <path>include/proxsuite/proxqp/sparse/preconditioner/</path>
    <filename>proxqp_2sparse_2preconditioner_2ruiz_8hpp.html</filename>
    <includes id="proxqp_2sparse_2fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/fwd.hpp</includes>
    <class kind="struct">proxsuite::proxqp::sparse::preconditioner::RuizEquilibration</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
    <namespace>proxsuite::proxqp::sparse::preconditioner</namespace>
    <namespace>proxsuite::proxqp::sparse::preconditioner::detail</namespace>
  </compound>
  <compound kind="file">
    <name>ruiz.hpp</name>
    <path>include/proxsuite/serialization/</path>
    <filename>serialization_2ruiz_8hpp.html</filename>
    <includes id="proxqp_2dense_2preconditioner_2ruiz_8hpp" name="ruiz.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/preconditioner/ruiz.hpp</includes>
    <namespace>cereal</namespace>
  </compound>
  <compound kind="file">
    <name>solver.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>dense_2solver_8hpp.html</filename>
    <includes id="fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/fwd.hpp</includes>
    <includes id="dense_2views_8hpp" name="views.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="linesearch_8hpp" name="linesearch.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/linesearch.hpp</includes>
    <includes id="dense_2helpers_8hpp" name="helpers.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/helpers.hpp</includes>
    <includes id="dense_2utils_8hpp" name="utils.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/utils.hpp</includes>
    <includes id="dynstack__alloc_8hpp" name="dynstack_alloc.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/util/dynstack_alloc.hpp</includes>
    <includes id="ldlt_8hpp" name="ldlt.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/dense/ldlt.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
  </compound>
  <compound kind="file">
    <name>solver.hpp</name>
    <path>include/proxsuite/proxqp/sparse/</path>
    <filename>sparse_2solver_8hpp.html</filename>
    <includes id="dense_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/dense/core.hpp</includes>
    <includes id="sparse_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/core.hpp</includes>
    <includes id="sparse_2factorize_8hpp" name="factorize.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/factorize.hpp</includes>
    <includes id="sparse_2update_8hpp" name="update.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/update.hpp</includes>
    <includes id="rowmod_8hpp" name="rowmod.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/rowmod.hpp</includes>
    <includes id="dense_2views_8hpp" name="views.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <includes id="vec_8hpp" name="vec.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <includes id="proxqp_2results_8hpp" name="results.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/results.hpp</includes>
    <includes id="proxqp_2sparse_2fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/fwd.hpp</includes>
    <includes id="sparse_2views_8hpp" name="views.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/views.hpp</includes>
    <includes id="proxqp_2sparse_2model_8hpp" name="model.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/model.hpp</includes>
    <includes id="proxqp_2sparse_2workspace_8hpp" name="workspace.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/workspace.hpp</includes>
    <includes id="sparse_2utils_8hpp" name="utils.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/utils.hpp</includes>
    <includes id="proxqp_2sparse_2preconditioner_2ruiz_8hpp" name="ruiz.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/preconditioner/ruiz.hpp</includes>
    <includes id="sparse_2preconditioner_2identity_8hpp" name="identity.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/preconditioner/identity.hpp</includes>
    <class kind="struct">proxsuite::proxqp::sparse::PrimalDualGradResult</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
  </compound>
  <compound kind="file">
    <name>sparse.hpp</name>
    <path>include/proxsuite/proxqp/sparse/</path>
    <filename>sparse_8hpp.html</filename>
    <includes id="proxqp_2sparse_2wrapper_8hpp" name="wrapper.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/wrapper.hpp</includes>
  </compound>
  <compound kind="file">
    <name>utils.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>dense_2utils_8hpp.html</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">proxsuite/helpers/common.hpp</includes>
    <includes id="dense_2views_8hpp" name="views.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="proxqp_2dense_2workspace_8hpp" name="workspace.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/dense/workspace.hpp</includes>
    <includes id="proxqp_2dense_2model_8hpp" name="model.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/model.hpp</includes>
    <includes id="proxqp_2results_8hpp" name="results.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/results.hpp</includes>
    <includes id="prints_8hpp" name="prints.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/utils/prints.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <includes id="proxqp_2dense_2preconditioner_2ruiz_8hpp" name="ruiz.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/preconditioner/ruiz.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
  </compound>
  <compound kind="file">
    <name>utils.hpp</name>
    <path>include/proxsuite/proxqp/sparse/</path>
    <filename>sparse_2utils_8hpp.html</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">proxsuite/helpers/common.hpp</includes>
    <includes id="dense_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/dense/core.hpp</includes>
    <includes id="sparse_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/core.hpp</includes>
    <includes id="proxqp_2sparse_2workspace_8hpp" name="workspace.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/workspace.hpp</includes>
    <includes id="sparse_2factorize_8hpp" name="factorize.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/factorize.hpp</includes>
    <includes id="sparse_2update_8hpp" name="update.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/update.hpp</includes>
    <includes id="rowmod_8hpp" name="rowmod.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/rowmod.hpp</includes>
    <includes id="dense_2views_8hpp" name="views.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <includes id="vec_8hpp" name="vec.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <includes id="proxqp_2results_8hpp" name="results.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/results.hpp</includes>
    <includes id="prints_8hpp" name="prints.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/utils/prints.hpp</includes>
    <includes id="sparse_2views_8hpp" name="views.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/views.hpp</includes>
    <includes id="proxqp_2sparse_2model_8hpp" name="model.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/model.hpp</includes>
    <includes id="proxqp_2sparse_2preconditioner_2ruiz_8hpp" name="ruiz.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/preconditioner/ruiz.hpp</includes>
    <includes id="sparse_2preconditioner_2identity_8hpp" name="identity.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/preconditioner/identity.hpp</includes>
    <class kind="struct">proxsuite::proxqp::sparse::detail::AugmentedKkt</class>
    <class kind="struct">proxsuite::proxqp::sparse::detail::AugmentedKkt::Raw</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
    <namespace>proxsuite::proxqp::sparse::detail</namespace>
    <namespace>Eigen</namespace>
  </compound>
  <compound kind="file">
    <name>views.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>dense_2views_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="util_2dbg_8hpp" name="dbg.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/util/dbg.hpp</includes>
    <class kind="struct">proxsuite::proxqp::detail::Ret_</class>
    <class kind="struct">proxsuite::proxqp::detail::NoCopy</class>
    <class kind="struct">proxsuite::proxqp::detail::Defer</class>
    <class kind="struct">proxsuite::proxqp::detail::nb::defer</class>
    <class kind="struct">proxsuite::proxqp::detail::nb::max2</class>
    <class kind="struct">proxsuite::proxqp::detail::nb::min2</class>
    <class kind="struct">proxsuite::proxqp::detail::nb::max_list</class>
    <class kind="struct">proxsuite::proxqp::detail::SetZeroImpl</class>
    <class kind="struct">proxsuite::proxqp::detail::SetZeroImpl&lt; T, true &gt;</class>
    <class kind="struct">proxsuite::proxqp::detail::ElementAccess&lt; Layout::colmajor &gt;</class>
    <class kind="struct">proxsuite::proxqp::detail::ElementAccess&lt; Layout::rowmajor &gt;</class>
    <class kind="struct">proxsuite::proxqp::detail::unlref</class>
    <class kind="struct">proxsuite::proxqp::detail::unlref&lt; T &amp; &gt;</class>
    <class kind="struct">proxsuite::proxqp::detail::DetectedImpl</class>
    <class kind="struct">proxsuite::proxqp::detail::DetectedImpl&lt; Void&lt; F&lt; Ts... &gt; &gt;, Fallback, F, Ts... &gt;</class>
    <class kind="struct">proxsuite::proxqp::VectorView</class>
    <class kind="struct">proxsuite::proxqp::VectorViewMut</class>
    <class kind="struct">proxsuite::proxqp::StridedVectorView</class>
    <class kind="struct">proxsuite::proxqp::StridedVectorViewMut</class>
    <class kind="struct">proxsuite::proxqp::MatrixView</class>
    <class kind="struct">proxsuite::proxqp::MatrixViewMut</class>
    <class kind="struct">proxsuite::proxqp::LdltView</class>
    <class kind="struct">proxsuite::proxqp::LdltViewMut</class>
    <class kind="struct">proxsuite::proxqp::dense::EigenAllowAlloc</class>
    <class kind="struct">proxsuite::proxqp::dense::QpView</class>
    <class kind="struct">proxsuite::proxqp::dense::QpViewBox</class>
    <class kind="struct">proxsuite::proxqp::dense::QpViewMut</class>
    <class kind="struct">proxsuite::proxqp::dense::QpViewBoxMut</class>
    <class kind="struct">proxsuite::proxqp::dense::nb::pow</class>
    <class kind="struct">proxsuite::proxqp::dense::nb::infty_norm</class>
    <class kind="struct">proxsuite::proxqp::dense::nb::sqrt</class>
    <class kind="struct">proxsuite::proxqp::dense::nb::fabs</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::detail</namespace>
    <namespace>proxsuite::proxqp::detail::nb</namespace>
    <namespace>proxsuite::proxqp::eigen</namespace>
    <namespace>proxsuite::proxqp::concepts</namespace>
    <namespace>proxsuite::proxqp::concepts::aux</namespace>
    <namespace>proxsuite::proxqp::tags</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
    <namespace>proxsuite::proxqp::dense::nb</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_CONCEPT</name>
      <anchorfile>dense_2views_8hpp.html</anchorfile>
      <anchor>ad6e361144fbd0a35c22b45c24b963b30</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_CHECK_CONCEPT</name>
      <anchorfile>dense_2views_8hpp.html</anchorfile>
      <anchor>a7949af506ade02a9c5000faa2c1c369e</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_IMPL_GET_PARAM</name>
      <anchorfile>dense_2views_8hpp.html</anchorfile>
      <anchor>a3046659783ff9cd82b22d0e7bfba4412</anchor>
      <arglist>(Fn, Idx)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_IMPL_GET_PARAMS_0</name>
      <anchorfile>dense_2views_8hpp.html</anchorfile>
      <anchor>a6e5baed5b95d7634a4f28bf9f2033f47</anchor>
      <arglist>(NParams,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_IMPL_GET_PARAMS_1</name>
      <anchorfile>dense_2views_8hpp.html</anchorfile>
      <anchor>a886acb5e972a790c1c01b146073309c0</anchor>
      <arglist>(NParams,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_IMPL_GET_PARAMS</name>
      <anchorfile>dense_2views_8hpp.html</anchorfile>
      <anchor>a7cb84f2362d46ad2783a9aeb1267d085</anchor>
      <arglist>(NParams,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_EXPLICIT_TPL_DEF</name>
      <anchorfile>dense_2views_8hpp.html</anchorfile>
      <anchor>a198560fc2b35c1b275fec513c3b59439</anchor>
      <arglist>(NParams,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>dense_2views_8hpp.html</anchorfile>
      <anchor>aac37a41fce97141861a810f44b4fd04f</anchor>
      <arglist>(NParams,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAZY_PRODUCT</name>
      <anchorfile>dense_2views_8hpp.html</anchorfile>
      <anchor>a343cb6a82136d73ddd53c069c13a1099</anchor>
      <arglist>(a, b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>views.hpp</name>
    <path>include/proxsuite/proxqp/sparse/</path>
    <filename>sparse_2views_8hpp.html</filename>
    <includes id="dense_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/dense/core.hpp</includes>
    <includes id="sparse_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/core.hpp</includes>
    <includes id="sparse_2factorize_8hpp" name="factorize.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/factorize.hpp</includes>
    <includes id="sparse_2update_8hpp" name="update.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/update.hpp</includes>
    <includes id="rowmod_8hpp" name="rowmod.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/rowmod.hpp</includes>
    <includes id="dense_2views_8hpp" name="views.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <includes id="vec_8hpp" name="vec.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <includes id="proxqp_2sparse_2model_8hpp" name="model.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/model.hpp</includes>
    <includes id="proxqp_2results_8hpp" name="results.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/results.hpp</includes>
    <class kind="struct">proxsuite::proxqp::sparse::QpView</class>
    <class kind="struct">proxsuite::proxqp::sparse::QpViewMut</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
  </compound>
  <compound kind="file">
    <name>workspace.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>proxqp_2dense_2workspace_8hpp.html</filename>
    <includes id="ldlt_8hpp" name="ldlt.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/dense/ldlt.hpp</includes>
    <includes id="timings_8hpp" name="timings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/timings.hpp</includes>
    <includes id="vec_8hpp" name="vec.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <class kind="struct">proxsuite::proxqp::dense::Workspace</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
  </compound>
  <compound kind="file">
    <name>workspace.hpp</name>
    <path>include/proxsuite/proxqp/sparse/</path>
    <filename>proxqp_2sparse_2workspace_8hpp.html</filename>
    <includes id="dense_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/dense/core.hpp</includes>
    <includes id="sparse_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/core.hpp</includes>
    <includes id="sparse_2factorize_8hpp" name="factorize.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/factorize.hpp</includes>
    <includes id="sparse_2update_8hpp" name="update.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/update.hpp</includes>
    <includes id="rowmod_8hpp" name="rowmod.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/sparse/rowmod.hpp</includes>
    <includes id="timings_8hpp" name="timings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/timings.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <includes id="dense_2views_8hpp" name="views.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="vec_8hpp" name="vec.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/vec.hpp</includes>
    <includes id="sparse_2views_8hpp" name="views.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/views.hpp</includes>
    <includes id="proxqp_2sparse_2model_8hpp" name="model.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/model.hpp</includes>
    <includes id="proxqp_2results_8hpp" name="results.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/results.hpp</includes>
    <includes id="sparse_2utils_8hpp" name="utils.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/utils.hpp</includes>
    <class kind="struct">proxsuite::proxqp::sparse::Ldlt</class>
    <class kind="struct">proxsuite::proxqp::sparse::Workspace</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROX_QP_ALL_OF</name>
      <anchorfile>proxqp_2sparse_2workspace_8hpp.html</anchorfile>
      <anchor>a00b76e5ca0b44d3d0c28b2f5c95aded5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROX_QP_ANY_OF</name>
      <anchorfile>proxqp_2sparse_2workspace_8hpp.html</anchorfile>
      <anchor>a4e4f1f1afc648ba13ddbb7d1bdbeb8e0</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>workspace.hpp</name>
    <path>include/proxsuite/serialization/</path>
    <filename>serialization_2workspace_8hpp.html</filename>
    <includes id="proxqp_2dense_2workspace_8hpp" name="workspace.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/workspace.hpp</includes>
    <namespace>cereal</namespace>
  </compound>
  <compound kind="file">
    <name>wrapper.hpp</name>
    <path>include/proxsuite/proxqp/dense/</path>
    <filename>proxqp_2dense_2wrapper_8hpp.html</filename>
    <includes id="proxqp_2sparse_2wrapper_8hpp" name="wrapper.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/sparse/wrapper.hpp</includes>
    <includes id="dense_2solver_8hpp" name="solver.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/solver.hpp</includes>
    <includes id="dense_2helpers_8hpp" name="helpers.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/helpers.hpp</includes>
    <includes id="proxqp_2dense_2preconditioner_2ruiz_8hpp" name="ruiz.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/preconditioner/ruiz.hpp</includes>
    <class kind="struct">proxsuite::proxqp::dense::QP</class>
    <class kind="struct">proxsuite::proxqp::dense::BatchQP</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
  </compound>
  <compound kind="file">
    <name>wrapper.hpp</name>
    <path>include/proxsuite/proxqp/sparse/</path>
    <filename>proxqp_2sparse_2wrapper_8hpp.html</filename>
    <includes id="proxqp_2results_8hpp" name="results.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/results.hpp</includes>
    <includes id="proxqp_2settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/settings.hpp</includes>
    <includes id="sparse_2solver_8hpp" name="solver.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/sparse/solver.hpp</includes>
    <includes id="sparse_2helpers_8hpp" name="helpers.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/sparse/helpers.hpp</includes>
    <class kind="struct">proxsuite::proxqp::sparse::QP</class>
    <class kind="struct">proxsuite::proxqp::sparse::BatchQP</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
  </compound>
  <compound kind="file">
    <name>wrapper.hpp</name>
    <path>include/proxsuite/serialization/</path>
    <filename>serialization_2wrapper_8hpp.html</filename>
    <includes id="proxqp_2dense_2wrapper_8hpp" name="wrapper.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/wrapper.hpp</includes>
    <namespace>cereal</namespace>
  </compound>
  <compound kind="file">
    <name>status.hpp</name>
    <path>include/proxsuite/proxqp/</path>
    <filename>status_8hpp.html</filename>
    <includes id="veg_2type__traits_2core_8hpp" name="core.hpp" local="no" import="no" module="no" objc="no">proxsuite/linalg/veg/type_traits/core.hpp</includes>
    <includes id="proxqp_2sparse_2fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">proxsuite/proxqp/sparse/fwd.hpp</includes>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
  </compound>
  <compound kind="file">
    <name>timings.hpp</name>
    <path>include/proxsuite/proxqp/</path>
    <filename>timings_8hpp.html</filename>
    <class kind="struct">proxsuite::proxqp::CPUTimes</class>
    <class kind="struct">proxsuite::proxqp::Timer</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
  </compound>
  <compound kind="file">
    <name>prints.hpp</name>
    <path>include/proxsuite/proxqp/utils/</path>
    <filename>prints_8hpp.html</filename>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
  </compound>
  <compound kind="file">
    <name>random_qp_problems.hpp</name>
    <path>include/proxsuite/proxqp/utils/</path>
    <filename>random__qp__problems_8hpp.html</filename>
    <includes id="dense_2views_8hpp" name="views.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/views.hpp</includes>
    <includes id="proxqp_2dense_2model_8hpp" name="model.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/dense/model.hpp</includes>
    <includes id="proxqp_2sparse_2model_8hpp" name="model.hpp" local="no" import="no" module="no" objc="no">proxsuite/proxqp/sparse/model.hpp</includes>
    <class kind="struct">proxsuite::proxqp::utils::EigenNoAlloc</class>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::proxqp::utils</namespace>
    <namespace>proxsuite::proxqp::utils::eigen</namespace>
    <namespace>proxsuite::proxqp::utils::rand</namespace>
    <namespace>proxsuite::proxqp::utils::rand::detail</namespace>
    <namespace>proxsuite::proxqp::utils::osqp</namespace>
  </compound>
  <compound kind="file">
    <name>archive.hpp</name>
    <path>include/proxsuite/serialization/</path>
    <filename>archive_8hpp.html</filename>
    <namespace>proxsuite</namespace>
    <namespace>proxsuite::serialization</namespace>
  </compound>
  <compound kind="file">
    <name>eigen.hpp</name>
    <path>include/proxsuite/serialization/</path>
    <filename>eigen_8hpp.html</filename>
    <namespace>cereal</namespace>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detector</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detector.html</filename>
    <templarg>typename Enable</templarg>
    <templarg>template&lt; typename... &gt; class Ftor</templarg>
    <templarg>typename... Args</templarg>
    <member kind="typedef">
      <type>false_type</type>
      <name>value_type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detector.html</anchorfile>
      <anchor>ace630ee40f46c2d75c8fc8ea34c54b1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detector&lt; meta::void_t&lt; Ftor&lt; Args... &gt; &gt;, Ftor, Args... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detector_3_01meta_1_1void__t_3_01Fto519120253f3aa2bf27c8f8065c4dbb68.html</filename>
    <templarg>template&lt; typename... &gt; class Ftor</templarg>
    <templarg>typename... Args</templarg>
    <member kind="typedef">
      <type>true_type</type>
      <name>value_type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detector_3_01meta_1_1void__t_3_01Fto519120253f3aa2bf27c8f8065c4dbb68.html</anchorfile>
      <anchor>a78f771cae9f7988b34939602c70236a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>false_type</type>
      <name>value_type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detector.html</anchorfile>
      <anchor>ace630ee40f46c2d75c8fc8ea34c54b1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
    <templarg>bool Even</templarg>
    <member kind="typedef">
      <type>typename _merge&lt; typename _make_integer_sequence&lt; T, N/2 &gt;::type, typename _make_integer_sequence&lt; T, N/2 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence.html</anchorfile>
      <anchor>a6188559b834d74726311c6f3dd432e96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence&lt; T, 0 &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence_3_01T_00_010_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>integer_sequence&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence_3_01T_00_010_01_4.html</anchorfile>
      <anchor>a391b7f39123f9abf9a45c9b4281475a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _merge&lt; typename _make_integer_sequence&lt; T, N/2 &gt;::type, typename _make_integer_sequence&lt; T, N/2 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence.html</anchorfile>
      <anchor>a6188559b834d74726311c6f3dd432e96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence&lt; T, 1 &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence_3_01T_00_011_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>integer_sequence&lt; T, 0 &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence_3_01T_00_011_01_4.html</anchorfile>
      <anchor>a8bf594d52540425ca85a5469037e739b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _merge&lt; typename _make_integer_sequence&lt; T, N/2 &gt;::type, typename _make_integer_sequence&lt; T, N/2 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence.html</anchorfile>
      <anchor>a6188559b834d74726311c6f3dd432e96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence&lt; T, N, false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence_3_01T_00_01N_00_01false_01_4.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
    <member kind="typedef">
      <type>typename _merge_p1&lt; typename _make_integer_sequence&lt; T, N/2 &gt;::type, typename _make_integer_sequence&lt; T, N/2 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence_3_01T_00_01N_00_01false_01_4.html</anchorfile>
      <anchor>a07beff5652b1301c6852c56444fd36af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _merge&lt; typename _make_integer_sequence&lt; T, N/2 &gt;::type, typename _make_integer_sequence&lt; T, N/2 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__make__integer__sequence.html</anchorfile>
      <anchor>a6188559b834d74726311c6f3dd432e96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detail::_merge</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__merge.html</filename>
    <templarg>typename Seq1</templarg>
    <templarg>typename Seq2</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detail::_merge&lt; integer_sequence&lt; T, Nums1... &gt;, integer_sequence&lt; T, Nums2... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__merge_3_01integer__sequef7a7e5e68d4293ba136a6226827deb1e.html</filename>
    <templarg>typename T</templarg>
    <templarg>T... Nums1</templarg>
    <templarg>T... Nums2</templarg>
    <member kind="typedef">
      <type>integer_sequence&lt; T, Nums1...,(sizeof...(Nums1)+Nums2)... &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__merge_3_01integer__sequef7a7e5e68d4293ba136a6226827deb1e.html</anchorfile>
      <anchor>afc45d21ba9f8b2c2abcc4b9827d5c4f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detail::_merge_p1</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__merge__p1.html</filename>
    <templarg>typename Seq1</templarg>
    <templarg>typename Seq2</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::_detail::_merge_p1&lt; integer_sequence&lt; T, Nums1... &gt;, integer_sequence&lt; T, Nums2... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__merge__p1_3_01integer__s584bd78d48833fea0c25eb32e33f0ca1.html</filename>
    <templarg>typename T</templarg>
    <templarg>T... Nums1</templarg>
    <templarg>T... Nums2</templarg>
    <member kind="typedef">
      <type>integer_sequence&lt; T, Nums1...,(sizeof...(Nums1)+Nums2)..., sizeof...(Nums1)+sizeof...(Nums2)&gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail_1_1__merge__p1_3_01integer__s584bd78d48833fea0c25eb32e33f0ca1.html</anchorfile>
      <anchor>a8d4038fe9a927fa9d170c6dd35ed06cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_mem::addr_impl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1addr__impl.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::disjunction&lt; has_member_addr&lt; T &gt;, has_adl_addr&lt; T &gt;, builtin_addr &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::nb::addressof</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1addressof.html</filename>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1addressof.html</anchorfile>
      <anchor>ab272b09ca3846498722d12596f0b3cf6</anchor>
      <arglist>(T &amp;&amp;var) const VEG_NOEXCEPT -&gt; meta::unref_t&lt; T &gt; *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_mem::adl_addr</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1adl__addr.html</filename>
    <base>proxsuite::linalg::veg::_detail::_mem::member_addr</base>
    <member kind="typedef">
      <type>decltype(void(operator&amp;(VEG_DECLVAL(T &amp;))))</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1adl__addr.html</anchorfile>
      <anchor>ae86f88a63cec96e88f9b091f177e7558</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::adl_get</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1adl__get.html</filename>
    <member kind="typedef">
      <type>decltype(get&lt; I::value &gt;(VEG_DECLVAL(T &amp;&amp;)))</type>
      <name>result_type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1adl__get.html</anchorfile>
      <anchor>aa090c830426c94e545ddff8c27d4e9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE constexpr auto</type>
      <name>apply</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1adl__get.html</anchorfile>
      <anchor>a18aba64116cf356640046ae6d56655f1</anchor>
      <arglist>(T &amp;&amp;arg) VEG_DEDUCE_RET(get&lt; I &gt;(VEG_FWD(arg)))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_slice::adl::AdlBase</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__slice_1_1adl_1_1AdlBase.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_vector::adl::AdlBase</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1adl_1_1AdlBase.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::nb::align_next</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1align__next.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1align__next.html</anchorfile>
      <anchor>a00f0e23de5164264df283f98ec365a85</anchor>
      <arglist>(usize alignment, void *ptr) const VEG_NOEXCEPT -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1align__next.html</anchorfile>
      <anchor>a69802787b103a47991330b49ad4c7ae9</anchor>
      <arglist>(usize alignment, void const *ptr) const VEG_NOEXCEPT -&gt; void const *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::nb::align_prev</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1align__prev.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1align__prev.html</anchorfile>
      <anchor>a1060d75e5a6272e63f9c2f76914866d3</anchor>
      <arglist>(usize alignment, void *ptr) const VEG_NOEXCEPT -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1align__prev.html</anchorfile>
      <anchor>a8567645a9623e39083800e2e4b36e2c9</anchor>
      <arglist>(usize alignment, void const *ptr) const VEG_NOEXCEPT -&gt; void const *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::alignment::detail::alignment_of</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1alignment_1_1detail_1_1alignment__of.html</filename>
    <templarg>class T</templarg>
    <base>proxsuite::linalg::veg::alignment::detail::min_size&lt; sizeof(T), sizeof(offset_value&lt; T &gt;) - sizeof(T)&gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::all_same_impl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1all__same__impl.html</filename>
    <templarg>typename ISeq</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::all_same_impl&lt; meta::index_sequence&lt; Is... &gt;, discard_1st&lt; decltype(Is), T &gt;... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1all__same__impl_3_01meta_1_1index__seqe8ee372b19444e73cc28a877ceb2ba54.html</filename>
    <templarg>usize... Is</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::all_same_impl&lt; meta::index_sequence&lt;&gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1all__same__impl_3_01meta_1_1index__sequence_3_4_01_4.html</filename>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::Alloc</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::Alloc&lt; BumpAlloc&lt; MaxAlign &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01BumpAlloc_3_01MaxAlign_01_4_01_4.html</filename>
    <templarg>usize MaxAlign</templarg>
    <member kind="typedef">
      <type>_detail::_mem::BumpAllocLayout&lt; MaxAlign &gt; &amp;</type>
      <name>ImplMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01BumpAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>af723cc94367ec22e58eb1d2ca6d481cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::RefMut&lt; BumpAlloc&lt; MaxAlign &gt; &gt;</type>
      <name>RefMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01BumpAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>a7ad01611f6c5a237da0784cc328b958b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01BumpAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>a0b3d717b671a26e214a7e19fa50affcc</anchor>
      <arglist>(RefMut ref, mem::Layout layout) noexcept -&gt; AllocBlock</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>dealloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01BumpAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>afca3b74047bc2ea22934fe8d4adf4c60</anchor>
      <arglist>(RefMut ref, void *ptr, mem::Layout layout) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>grow</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01BumpAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>a1c0b5d6136ee51b733f2099002f592af</anchor>
      <arglist>(RefMut ref, void *ptr, mem::Layout old_layout, usize new_byte_size, RelocFn reloc) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::Alloc&lt; MonotonicAlloc&lt; MaxAlign &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01MonotonicAlloc_3_01MaxAlign_01_4_01_4.html</filename>
    <templarg>usize MaxAlign</templarg>
    <member kind="typedef">
      <type>_detail::_mem::BumpAllocLayout&lt; MaxAlign &gt; &amp;</type>
      <name>ImplMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01MonotonicAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>a36db078f608b73fb5c3043d425d6b9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::RefMut&lt; MonotonicAlloc&lt; MaxAlign &gt; &gt;</type>
      <name>RefMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01MonotonicAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>a96f2ed4c0b292463f97270afdbb169a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01MonotonicAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>a32c6134dd7428792b1bd5f7285a186e0</anchor>
      <arglist>(RefMut ref, mem::Layout layout) noexcept -&gt; AllocBlock</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>dealloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01MonotonicAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>ad97686260b64ff2c83fa80ec662cd0e1</anchor>
      <arglist>(RefMut, void *, mem::Layout) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>grow</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01MonotonicAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>ab5c7099bbf61d21bf4abc5b2a8f790c9</anchor>
      <arglist>(RefMut ref, void *ptr, mem::Layout old_layout, usize new_byte_size, RelocFn reloc) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::Alloc&lt; proxsuite::linalg::dense::_detail::SimdAlignedSystemAlloc &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01proxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc_01_4.html</filename>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::RefMut&lt; proxsuite::linalg::dense::_detail::SimdAlignedSystemAlloc &gt;</type>
      <name>RefMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01proxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc_01_4.html</anchorfile>
      <anchor>ab3565afded75b8e3afa11937d5d8c9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>adjusted_layout</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01proxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc_01_4.html</anchorfile>
      <anchor>af8d0dc167900adddcc507f294b89d955</anchor>
      <arglist>(Layout l) noexcept -&gt; Layout</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>dealloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01proxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc_01_4.html</anchorfile>
      <anchor>a4cefeeed1bcfe69f950601fddda8180e</anchor>
      <arglist>(RefMut, void *ptr, Layout l) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE auto</type>
      <name>alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01proxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc_01_4.html</anchorfile>
      <anchor>a9e9508827c67cb0589879d5c8305bd51</anchor>
      <arglist>(RefMut, Layout l) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE auto</type>
      <name>grow</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01proxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc_01_4.html</anchorfile>
      <anchor>af299f29f6c83688f181e47bf7d432b0c</anchor>
      <arglist>(RefMut, void *ptr, Layout l, usize new_size, RelocFn reloc) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE auto</type>
      <name>shrink</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01proxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc_01_4.html</anchorfile>
      <anchor>af2d8b1c7df8d3ba391d2157bc1641e70</anchor>
      <arglist>(RefMut, void *ptr, Layout l, usize new_size, RelocFn reloc) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr usize</type>
      <name>min_align</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01proxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc_01_4.html</anchorfile>
      <anchor>a3cfb91b01e39f6e8d33b3c343a2009ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::Alloc&lt; StackAlloc&lt; MaxAlign &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01StackAlloc_3_01MaxAlign_01_4_01_4.html</filename>
    <templarg>usize MaxAlign</templarg>
    <member kind="typedef">
      <type>_detail::_mem::BumpAllocLayout&lt; MaxAlign &gt; &amp;</type>
      <name>ImplMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01StackAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>ae328d50a3eae2972363ab46b21addc7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::RefMut&lt; StackAlloc&lt; MaxAlign &gt; &gt;</type>
      <name>RefMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01StackAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>a29c7956fed30be5a0e3eb428a3931b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01StackAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>a472404cef2787d753e1d506972686296</anchor>
      <arglist>(RefMut ref, mem::Layout layout) noexcept -&gt; AllocBlock</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>dealloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01StackAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>af8b12f13f818d1a0e3261cef6f313f67</anchor>
      <arglist>(RefMut ref, void *ptr, mem::Layout layout) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>grow</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01StackAlloc_3_01MaxAlign_01_4_01_4.html</anchorfile>
      <anchor>abb39a77ea5f460b2216213064053ab7f</anchor>
      <arglist>(RefMut ref, void *ptr, mem::Layout old_layout, usize new_byte_size, RelocFn reloc) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::Alloc&lt; SystemAlloc &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01SystemAlloc_01_4.html</filename>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>try_grow_in_place</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01SystemAlloc_01_4.html</anchorfile>
      <anchor>a8341c41e3f8fb65ed974d1192ca4c77e</anchor>
      <arglist>(void *, Layout, usize) const noexcept -&gt; bool</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>dealloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01SystemAlloc_01_4.html</anchorfile>
      <anchor>a62b370152e8ae955b29a7a7294ae7148</anchor>
      <arglist>(RefMut&lt; SystemAlloc &gt;, void *ptr, Layout layout) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE auto</type>
      <name>alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01SystemAlloc_01_4.html</anchorfile>
      <anchor>ab1dbd7f1637f8f0461a44d1eb182e1fc</anchor>
      <arglist>(RefMut&lt; SystemAlloc &gt;, Layout layout) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_NO_INLINE auto</type>
      <name>realloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01SystemAlloc_01_4.html</anchorfile>
      <anchor>a73be018361ebde243d608ccc31b384bf</anchor>
      <arglist>(RefMut&lt; SystemAlloc &gt;, void *ptr, Layout layout, usize new_size, usize copy_size, RelocFn reloc) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE auto</type>
      <name>grow</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01SystemAlloc_01_4.html</anchorfile>
      <anchor>a553c8946f7c6cfb0ed9bfb3238cf1c55</anchor>
      <arglist>(RefMut&lt; SystemAlloc &gt; alloc, void *ptr, Layout layout, usize new_size, RelocFn reloc) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE auto</type>
      <name>shrink</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01SystemAlloc_01_4.html</anchorfile>
      <anchor>a29aa7d06bddfa34089ea23bfda41b46f</anchor>
      <arglist>(RefMut&lt; SystemAlloc &gt; alloc, void *ptr, Layout layout, usize new_size, RelocFn reloc) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr usize</type>
      <name>max_base_align</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Alloc_3_01SystemAlloc_01_4.html</anchorfile>
      <anchor>abff56b883d81fa89e57740da5c56eba7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::AllocBlock</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1AllocBlock.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1AllocBlock.html</anchorfile>
      <anchor>a9df8ae0f86f65b995d572ab0a4ab0b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>usize</type>
      <name>byte_cap</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1AllocBlock.html</anchorfile>
      <anchor>a10e5881cda70e28e650915bb09bc7786</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::AllocCleanup</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1AllocCleanup.html</filename>
    <templarg>typename A</templarg>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1AllocCleanup.html</anchorfile>
      <anchor>ac026d8460a633518b1996d73329df60a</anchor>
      <arglist>(constexpr) void operator()()</arglist>
    </member>
    <member kind="variable">
      <type>RefMut&lt; A &gt;</type>
      <name>alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1AllocCleanup.html</anchorfile>
      <anchor>aaf364e6f5bac67184456cc12637cd0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1AllocCleanup.html</anchorfile>
      <anchor>af408762a467e3095ae1985845862226e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mem::Layout</type>
      <name>layout</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1AllocCleanup.html</anchorfile>
      <anchor>a83c157c73e22aff2139b55afcf6c34b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::and_test</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1and__test.html</filename>
    <templarg>typename Seq</templarg>
    <templarg>typename... Bs</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::and_test&lt; index_sequence&lt; Is... &gt;, indexed&lt; Is, true_type &gt;... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1and__test_3_01index__sequence_3_01Is_8_8_8_01_4_00_05674b4e05c7d2e8e7c1226fd5197b6d2.html</filename>
    <templarg>usize... Is</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::apply_type_seq</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1apply__type__seq.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename Seq</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::apply_type_seq&lt; F, meta::type_sequence&lt; Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1apply__type__seq_3_01F_00_01meta_1_1ty143ee14d89d29cdf00b21687b2e0458b.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <member kind="typedef">
      <type>F&lt; Ts... &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1apply__type__seq_3_01F_00_01meta_1_1ty143ee14d89d29cdf00b21687b2e0458b.html</anchorfile>
      <anchor>a7200b25f93516e1367740f7982cb09df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::apply_wrapper</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1apply__wrapper.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <member kind="typedef">
      <type>F&lt; Ts... &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1apply__wrapper.html</anchorfile>
      <anchor>a2e5c20cac056216f657b79fc61847861</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Array</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Array.html</filename>
    <templarg>typename T</templarg>
    <templarg>isize N</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>as_ref</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Array.html</anchorfile>
      <anchor>ae0ec91959fdecd0028cb360e9676756c</anchor>
      <arglist>() const -&gt; Slice&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Array.html</anchorfile>
      <anchor>acb1ba6859038412c6fb9f688eb015361</anchor>
      <arglist>(constexpr) auto as_mut() -&gt; SliceMut&lt; T &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Array.html</anchorfile>
      <anchor>a16a8d3c717a2b652e5d3af490755db23</anchor>
      <arglist>[static_cast&lt; usize &gt;(N)]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::array::Array</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1array_1_1Array.html</filename>
    <templarg>typename T</templarg>
    <templarg>isize N</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>as_ref</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1array_1_1Array.html</anchorfile>
      <anchor>ae0ec91959fdecd0028cb360e9676756c</anchor>
      <arglist>() const -&gt; Slice&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1array_1_1Array.html</anchorfile>
      <anchor>acb1ba6859038412c6fb9f688eb015361</anchor>
      <arglist>(constexpr) auto as_mut() -&gt; SliceMut&lt; T &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1array_1_1Array.html</anchorfile>
      <anchor>a16a8d3c717a2b652e5d3af490755db23</anchor>
      <arglist>[static_cast&lt; usize &gt;(N)]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::Array_</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1Array__.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
    <member kind="variable">
      <type>T</type>
      <name>_</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1Array__.html</anchorfile>
      <anchor>af2bb1547962f758a656e9ce811401839</anchor>
      <arglist>[N]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::array_extent</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1array__extent.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; usize, 0 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::array_extent&lt; T[N]&gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1array__extent_3_01T_0fN_0e_4.html</filename>
    <templarg>usize N</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; usize, 0 &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; usize, N &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::array_get</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1array__get.html</filename>
    <member kind="typedef">
      <type>decltype(VEG_DECLVAL(T &amp;&amp;)[I::value])</type>
      <name>result_type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1array__get.html</anchorfile>
      <anchor>a56c43e4d2a0a37438b54b98caa739b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE constexpr auto</type>
      <name>apply</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1array__get.html</anchorfile>
      <anchor>a643df6bc332ae30a9d42f0470ba1d2a4</anchor>
      <arglist>(T &amp;&amp;arr) VEG_NOEXCEPT -&gt; decltype(VEG_FWD(arr)[I])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::detail::AugmentedKkt</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <class kind="struct">proxsuite::proxqp::sparse::detail::AugmentedKkt::Raw</class>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a287300af61911258a00cb352c235768ea2af888c52d820046a73c825cadb0da0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a287300af61911258a00cb352c235768eaf2897f423d9c72988432e1ae539256bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a287300af61911258a00cb352c235768ea13f3df995dccaeb7f933bc8d42896933</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Scalar</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a39b8ec5a619f158feffd5d61dc3c59a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>RealScalar</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a4bb4f75f6126412df644a4087f256d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I</type>
      <name>StorageIndex</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a3d2f594d69d0c3d3962c46bf4a1d4793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a287300af61911258a00cb352c235768ea2af888c52d820046a73c825cadb0da0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a287300af61911258a00cb352c235768eaf2897f423d9c72988432e1ae539256bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a287300af61911258a00cb352c235768ea13f3df995dccaeb7f933bc8d42896933</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AugmentedKkt</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a3062f431cc8b47332bd15ff7f8896598</anchor>
      <arglist>(Raw raw) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>rows</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>aca4378e4745e23f540fb1e8bfb47f20f</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>cols</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a12d75ee8ce454bb93fe66bad4e0a10c1</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator*</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>a4a4b09fe2cfe381cc6e85a22e9585070</anchor>
      <arglist>(Eigen::MatrixBase&lt; Rhs &gt; const &amp;x) const -&gt; Eigen::Product&lt; AugmentedKkt, Rhs, Eigen::AliasFreeProduct &gt;</arglist>
    </member>
    <member kind="variable">
      <type>struct proxsuite::proxqp::sparse::detail::AugmentedKkt::Raw</type>
      <name>_</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt.html</anchorfile>
      <anchor>ad0509bd3b85793e83fd632fd33d6eac2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::BackwardData</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>Mat</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>a7ecb006d22f55688c23837e8cf3fff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>a6feb8574da682a6a21408cdef9cc2109</anchor>
      <arglist>(isize dim, isize n_eq, isize n_in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>aec122893ffe2e012220af2bacf3ab174</anchor>
      <arglist>(isize dim, isize n_eq, isize n_in)</arglist>
    </member>
    <member kind="variable">
      <type>Mat</type>
      <name>dL_dH</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>a67fee9986d9314f50d6896e5e8de19d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>dL_dg</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>a314fdb87f98afe24d8ba71672d0e3faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat</type>
      <name>dL_dA</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>ac5bf52a3eed7dbc9e9da3a064289de8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>dL_db</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>a809b264c999b040b8b179299056fef90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat</type>
      <name>dL_dC</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>a59b67e1fd91e974e0db77b891e30c0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>dL_du</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>a77f6645e8aff996b1125eca3a471f4cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>dL_dl</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BackwardData.html</anchorfile>
      <anchor>aa2ae1f2c1e5e7dbd1223e82ec27d3072</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::bad_optional_access</name>
    <filename>classtl_1_1bad__optional__access.html</filename>
    <member kind="function">
      <type></type>
      <name>bad_optional_access</name>
      <anchorfile>classtl_1_1bad__optional__access.html</anchorfile>
      <anchor>ac1501222d7689719dc2fc8d12cbbfeb0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classtl_1_1bad__optional__access.html</anchorfile>
      <anchor>ae4a2d56cf7fdfe7815a68bf37bc01f37</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::baseof_wrapper</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1baseof__wrapper.html</filename>
    <templarg>typename Base</templarg>
    <base>proxsuite::linalg::veg::_detail::_meta::wrapper_base</base>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>test</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1baseof__wrapper.html</anchorfile>
      <anchor>a97a364dffab953b7a58ef9a9d6a480ad</anchor>
      <arglist>(Base const volatile *) -&gt; true_type</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>test</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1baseof__wrapper.html</anchorfile>
      <anchor>ac0208693b63ffcef39b61cb243d5324e</anchor>
      <arglist>(...) -&gt; meta::false_type</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::BatchQP</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>BatchQP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>a6aa3a5b9e3ed81896ba319a745cd10a7</anchor>
      <arglist>(size_t batch_size)</arglist>
    </member>
    <member kind="function">
      <type>QP&lt; T &gt; &amp;</type>
      <name>init_qp_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>a185bb4d9dc5e64290073d01b4cad0869</anchor>
      <arglist>(dense::isize dim, dense::isize n_eq, dense::isize n_in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>a716e5b3f647dcb06613bb09e82d9f3d5</anchor>
      <arglist>(const QP&lt; T &gt; &amp;qp)</arglist>
    </member>
    <member kind="function">
      <type>QP&lt; T &gt; &amp;</type>
      <name>get</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>aaa1c523a63459c49d95f3d4d1bc017ac</anchor>
      <arglist>(isize i)</arglist>
    </member>
    <member kind="function">
      <type>const QP&lt; T &gt; &amp;</type>
      <name>get</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>a9684663508b6f51ac11329ae0ed283ae</anchor>
      <arglist>(isize i) const</arglist>
    </member>
    <member kind="function">
      <type>QP&lt; T &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>a76eeb8270b1e1031fb6535ccd24c6a31</anchor>
      <arglist>(isize i)</arglist>
    </member>
    <member kind="function">
      <type>const QP&lt; T &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>a38c00bfd0df24d64832b8e314f3b7a5d</anchor>
      <arglist>(isize i) const</arglist>
    </member>
    <member kind="function">
      <type>dense::isize</type>
      <name>size</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>a9e979840c599993a8fe716d00a1e2101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; QP&lt; T &gt; &gt;</type>
      <name>qp_vector</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>a2cb832390924aa1c1b2fec64327026fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dense::isize</type>
      <name>m_size</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1BatchQP.html</anchorfile>
      <anchor>a4e2346db4caf30dd27b426295cdcdf23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::BatchQP</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="function">
      <type></type>
      <name>BatchQP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>ae23a7ed1a773ab563817d7f2a587523a</anchor>
      <arglist>(long unsigned int batchSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BatchQP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>afd936a238f1f64827b9fa8b098735fef</anchor>
      <arglist>(const BatchQP &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>BatchQP &amp;</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a594d133c72e296503e595b0bdda05828</anchor>
      <arglist>(const BatchQP &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BatchQP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a47cc81434af030170fed46badc07f34f</anchor>
      <arglist>(BatchQP &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>BatchQP &amp;</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>aab5724e53d062d2cebdda95ae2fc4174</anchor>
      <arglist>(BatchQP &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>QP&lt; T, I &gt; &amp;</type>
      <name>init_qp_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a66cd264b092470540bdf7e7daacf5fa0</anchor>
      <arglist>(sparse::isize dim, sparse::isize n_eq, sparse::isize n_in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a35cf2d05f8f53ea6d89e112f552a8a7f</anchor>
      <arglist>(QP&lt; T, I &gt; &amp;qp)</arglist>
    </member>
    <member kind="function">
      <type>QP&lt; T, I &gt; &amp;</type>
      <name>get</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a6da53907494568a3984777990dde9715</anchor>
      <arglist>(isize i)</arglist>
    </member>
    <member kind="function">
      <type>const QP&lt; T, I &gt; &amp;</type>
      <name>get</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>adb1300538f0468fc3aba23e40cf9c896</anchor>
      <arglist>(isize i) const</arglist>
    </member>
    <member kind="function">
      <type>QP&lt; T, I &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a4962c41742e03113658896969ba2e77d</anchor>
      <arglist>(isize i)</arglist>
    </member>
    <member kind="function">
      <type>const QP&lt; T, I &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a953c707eb47cf21c4323cf50cb81ad8b</anchor>
      <arglist>(isize i) const</arglist>
    </member>
    <member kind="function">
      <type>sparse::isize</type>
      <name>size</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a786865247609bdc187dbd3b4a0dbbe88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; QP&lt; T, I &gt; &gt;</type>
      <name>qp_vector</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a0d6e786d99a62295fe9d80fa1a6572e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::isize</type>
      <name>m_size</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1BatchQP.html</anchorfile>
      <anchor>a3b00dd1094a346239c553d8f608f9348</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::binary_traits</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</filename>
    <templarg>typename L</templarg>
    <templarg>typename R</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>Add</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>aef9d712a577d97e7fd1104b6fd972119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a2ac5a4c15ce30e29d9481b5664320c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a33117c8ad240a683111ca14a1eb2e07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Div</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a9fffe0913ce74e075f4fae4494897fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mod</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7179d5a43524789faae302d1915d6313</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a69bffba6f7d1953babf706eefacf3a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpNEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7e1e22e1e720d5ab4b7a06bb2b0a73f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ab2ecf4bbc33a633f474ed24fdf97d215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a24a19301d2591182950dea900b740bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ac3dd50a8913c3ea0317f841d5dcc3b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a5ccb3a61e73e4c41dafc8b7a488a44fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::binary_traits&lt; Dyn, Dyn &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</filename>
    <member kind="typedef">
      <type>Dyn</type>
      <name>Div</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>a1e9cdb34977cdee1da0e8bd448432042</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dyn</type>
      <name>Mod</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>a25036c48d3e2bf2c8b4dc298279eb11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Add</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>aef9d712a577d97e7fd1104b6fd972119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a2ac5a4c15ce30e29d9481b5664320c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a33117c8ad240a683111ca14a1eb2e07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Div</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a9fffe0913ce74e075f4fae4494897fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mod</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7179d5a43524789faae302d1915d6313</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a69bffba6f7d1953babf706eefacf3a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpNEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7e1e22e1e720d5ab4b7a06bb2b0a73f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ab2ecf4bbc33a633f474ed24fdf97d215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a24a19301d2591182950dea900b740bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ac3dd50a8913c3ea0317f841d5dcc3b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a5ccb3a61e73e4c41dafc8b7a488a44fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>ab86a283e30563be7e5ba4ac27a288728</anchor>
      <arglist>(add, Add,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>ac437567abd35a4f3ac376858a3eb5c58</anchor>
      <arglist>(sub, Sub, -)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>a0301fc342c5912945826dcccb963b22c</anchor>
      <arglist>(mul, Mul, *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>ad049f2bcfc9d884b40bce65bc0b7f99e</anchor>
      <arglist>(cmp_eq, CmpEq,==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>af85c122add292b9fbe6d8012a492df05</anchor>
      <arglist>(cmp_neq, CmpNEq, !=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>a7ca39eba24d118268b5c211cdded3c6a</anchor>
      <arglist>(cmp_lt, CmpLT,&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>a46000865190e289bc132e92ebb2409a8</anchor>
      <arglist>(cmp_le, CmpLE,&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>a5018f5abb7bc0276b80e93db353e2a9a</anchor>
      <arglist>(cmp_gt, CmpGT, &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>ad9edb2ae3c007589caeef8f1d1d3b11a</anchor>
      <arglist>(cmp_ge, CmpGE, &gt;=)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_NODISCARD constexpr auto</type>
      <name>div_fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>a3ba7968ba75783bbb5e994c44bc72b36</anchor>
      <arglist>(Dyn a, Dyn b) VEG_NOEXCEPT -&gt; Div</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_NODISCARD constexpr auto</type>
      <name>mod_fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Dyn_01_4.html</anchorfile>
      <anchor>aae74088ac16aa045fd28f235f9285dd6</anchor>
      <arglist>(Dyn a, Dyn b) VEG_NOEXCEPT -&gt; Mod</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::binary_traits&lt; Dyn, Fix&lt; N &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Fix_3_01N_01_4_01_4.html</filename>
    <templarg>isize N</templarg>
    <base>proxsuite::linalg::veg::_detail::binary_traits&lt; Dyn, Dyn &gt;</base>
    <member kind="typedef">
      <type>typename binary_traits&lt; Fix&lt; N &gt;, Dyn &gt;::Mul</type>
      <name>Mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Fix_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a468fbbc13ed088c02e4bb2f64952025e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::if_t&lt; N==0, void, Dyn &gt;</type>
      <name>Div</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Fix_3_01N_01_4_01_4.html</anchorfile>
      <anchor>ae11d653869452fc148af029b277095cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::if_t&lt; N==0, void, Dyn &gt;</type>
      <name>Mod</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Fix_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a25fb04d46a27f871d3d427aa1ab87d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Add</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>aef9d712a577d97e7fd1104b6fd972119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a2ac5a4c15ce30e29d9481b5664320c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a33117c8ad240a683111ca14a1eb2e07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Div</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a9fffe0913ce74e075f4fae4494897fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mod</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7179d5a43524789faae302d1915d6313</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a69bffba6f7d1953babf706eefacf3a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpNEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7e1e22e1e720d5ab4b7a06bb2b0a73f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ab2ecf4bbc33a633f474ed24fdf97d215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a24a19301d2591182950dea900b740bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ac3dd50a8913c3ea0317f841d5dcc3b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a5ccb3a61e73e4c41dafc8b7a488a44fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE constexpr auto</type>
      <name>mul_fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Fix_3_01N_01_4_01_4.html</anchorfile>
      <anchor>ab192b7846914d5bc71183692e72643a5</anchor>
      <arglist>(Dyn a, Fix&lt; N &gt;) VEG_NOEXCEPT -&gt; Mul</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE constexpr auto</type>
      <name>div_fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Fix_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a25d2bcb8a7746f5c3e989540a204037c</anchor>
      <arglist>(Dyn a, Fix&lt; N &gt;) VEG_NOEXCEPT -&gt; Div</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE constexpr auto</type>
      <name>mod_fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Dyn_00_01Fix_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a4d78ca555fe7346aa4ae6a78f9c36bb1</anchor>
      <arglist>(Dyn a, Fix&lt; N &gt;) VEG_NOEXCEPT -&gt; Mod</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::binary_traits&lt; Fix&lt; 0 &gt;, Dyn &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_010_01_4_00_01Dyn_01_4.html</filename>
    <base>proxsuite::linalg::veg::_detail::binary_traits&lt; Dyn, Dyn &gt;</base>
    <member kind="typedef">
      <type>Fix&lt; 0 &gt;</type>
      <name>Mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_010_01_4_00_01Dyn_01_4.html</anchorfile>
      <anchor>aab40c15897c60d58c10a02b53e3e91a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Add</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>aef9d712a577d97e7fd1104b6fd972119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a2ac5a4c15ce30e29d9481b5664320c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a33117c8ad240a683111ca14a1eb2e07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Div</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a9fffe0913ce74e075f4fae4494897fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mod</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7179d5a43524789faae302d1915d6313</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a69bffba6f7d1953babf706eefacf3a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpNEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7e1e22e1e720d5ab4b7a06bb2b0a73f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ab2ecf4bbc33a633f474ed24fdf97d215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a24a19301d2591182950dea900b740bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ac3dd50a8913c3ea0317f841d5dcc3b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a5ccb3a61e73e4c41dafc8b7a488a44fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD constexpr static VEG_INLINE auto</type>
      <name>mul_fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_010_01_4_00_01Dyn_01_4.html</anchorfile>
      <anchor>a6be8531b4111caefabb1fa8d4eab5510</anchor>
      <arglist>(Fix&lt; 0 &gt;, Dyn) VEG_NOEXCEPT -&gt; Mul</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::binary_traits&lt; Fix&lt; N &gt;, Dyn &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Dyn_01_4.html</filename>
    <templarg>isize N</templarg>
    <base>proxsuite::linalg::veg::_detail::binary_traits&lt; Dyn, Dyn &gt;</base>
    <member kind="typedef">
      <type>void</type>
      <name>Add</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>aef9d712a577d97e7fd1104b6fd972119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a2ac5a4c15ce30e29d9481b5664320c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a33117c8ad240a683111ca14a1eb2e07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Div</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a9fffe0913ce74e075f4fae4494897fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mod</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7179d5a43524789faae302d1915d6313</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a69bffba6f7d1953babf706eefacf3a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpNEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7e1e22e1e720d5ab4b7a06bb2b0a73f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ab2ecf4bbc33a633f474ed24fdf97d215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a24a19301d2591182950dea900b740bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ac3dd50a8913c3ea0317f841d5dcc3b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a5ccb3a61e73e4c41dafc8b7a488a44fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::binary_traits&lt; Fix&lt; N &gt;, Fix&lt; M &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</filename>
    <templarg>isize N</templarg>
    <templarg>isize M</templarg>
    <member kind="typedef">
      <type>meta::if_t&lt; M==0, void, Fix&lt; N/(M !=0 ? M :1)&gt; &gt;</type>
      <name>Div</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a6156731cc9fb583696e646579b9edbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::if_t&lt; M==0, void, Fix&lt; N %(M !=0 ? M :1)&gt; &gt;</type>
      <name>Mod</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a56630b4dc02b75822e1d1b8161cb79de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Add</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>aef9d712a577d97e7fd1104b6fd972119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a2ac5a4c15ce30e29d9481b5664320c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a33117c8ad240a683111ca14a1eb2e07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Div</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a9fffe0913ce74e075f4fae4494897fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Mod</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7179d5a43524789faae302d1915d6313</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a69bffba6f7d1953babf706eefacf3a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpNEq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a7e1e22e1e720d5ab4b7a06bb2b0a73f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ab2ecf4bbc33a633f474ed24fdf97d215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpLE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a24a19301d2591182950dea900b740bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>ac3dd50a8913c3ea0317f841d5dcc3b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CmpGE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits.html</anchorfile>
      <anchor>a5ccb3a61e73e4c41dafc8b7a488a44fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a2194b5bbe6950d33cb70049866480ec1</anchor>
      <arglist>(add, Add,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a25ee873cffeb235c2111eee2a7edb3f4</anchor>
      <arglist>(sub, Sub, -)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a1a2df2136301746063c4d99fd063f7ae</anchor>
      <arglist>(mul, Mul, *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a8af38820a97e3b6a3da61912a9dc446f</anchor>
      <arglist>(cmp_eq, CmpEq,==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a31933b22be2013cae2020c681ea4d8d2</anchor>
      <arglist>(cmp_neq, CmpNEq, !=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a662ef58fe7ed5ef22b680229de91b242</anchor>
      <arglist>(cmp_lt, CmpLT,&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a956135c7e5d8ce2e4e3ca961b7f68d3d</anchor>
      <arglist>(cmp_le, CmpLE,&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>abd1cb0bed10d2a46ddb657fce2f67ae1</anchor>
      <arglist>(cmp_gt, CmpGT, &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a252a888e3587cf79648234059483c695</anchor>
      <arglist>(cmp_ge, CmpGE, &gt;=)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE constexpr auto</type>
      <name>div_fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a7e48d0ca68f4bc90f80c5ccc8773b9bd</anchor>
      <arglist>(Fix&lt; N &gt;, Fix&lt; M &gt;) VEG_NOEXCEPT -&gt; Div</arglist>
    </member>
    <member kind="function" static="yes">
      <type>VEG_NODISCARD static VEG_INLINE constexpr auto</type>
      <name>mod_fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1binary__traits_3_01Fix_3_01N_01_4_00_01Fix_3_01M_01_4_01_4.html</anchorfile>
      <anchor>a534b7850e190db252cf2140831998ac0</anchor>
      <arglist>(Fix&lt; N &gt;, Fix&lt; M &gt;) VEG_NOEXCEPT -&gt; Mod</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::nb::bit_cast</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1bit__cast.html</filename>
    <templarg>typename To</templarg>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1bit__cast.html</anchorfile>
      <anchor>aa5c96c394638ac95f20e365fb9db73a9</anchor>
      <arglist>(typename From, requires((VEG_CONCEPT(trivially_copyable&lt; From &gt;) &amp;&amp;VEG_CONCEPT(trivially_copyable&lt; To &gt;) &amp;&amp;(sizeof(From)==sizeof(To)))), VEG_INLINE VEG_BITCAST_CONSTEXPR auto operator(),(from, From const &amp;)) const VEG_NOEXCEPT -&gt; To</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Boolean</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</filename>
    <templarg>Ternary T</templarg>
    <member kind="typedef">
      <type>meta::constant&lt; Ternary, T &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>a4ebbdf06847994d6792a71bc0a3989b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Boolean</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>aa1c056451ec0b692416218001a9d1a56</anchor>
      <arglist>() VEG_NOEXCEPT=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Boolean</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>a2143a77b7ea058d3458c395fe42f53b8</anchor>
      <arglist>(Boolean&lt; maybe &gt;, Unsafe) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Boolean</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>aa9354294060afaaa2f86a62de92b54e0</anchor>
      <arglist>(Boolean&lt; maybe &gt; b) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr</type>
      <name>operator bool</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>a66e29630ccd34a2f7db9caa5c8549625</anchor>
      <arglist>() const VEG_NOEXCEPT</arglist>
    </member>
    <member kind="friend">
      <type>VEG_NODISCARD VEG_INLINE constexpr friend auto</type>
      <name>operator!</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>acfdf1a9bbddb01d26bb4829330df5cfa</anchor>
      <arglist>(Boolean) VEG_NOEXCEPT -&gt; Boolean&lt; T==yes ? no :yes &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Boolean&lt; maybe &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Boolean_3_01maybe_01_4.html</filename>
    <member kind="typedef">
      <type>maybe_c</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean_3_01maybe_01_4.html</anchorfile>
      <anchor>a61408835672592f944037cc979b12759</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::constant&lt; Ternary, T &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>a4ebbdf06847994d6792a71bc0a3989b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Boolean</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean_3_01maybe_01_4.html</anchorfile>
      <anchor>a52159377f748c75c2c59c2e0be5bf230</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Boolean</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean_3_01maybe_01_4.html</anchorfile>
      <anchor>aa4100c5c594e22b38d554a6b552c178a</anchor>
      <arglist>(bool _val) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Boolean</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean_3_01maybe_01_4.html</anchorfile>
      <anchor>abca474b45e154f5ec1d8750d4868909c</anchor>
      <arglist>(Boolean&lt; T &gt;) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr</type>
      <name>operator bool</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean_3_01maybe_01_4.html</anchorfile>
      <anchor>ac0297c361d8b0a21ac8b02acbcd38b6e</anchor>
      <arglist>() const VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Boolean</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>aa1c056451ec0b692416218001a9d1a56</anchor>
      <arglist>() VEG_NOEXCEPT=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Boolean</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>a2143a77b7ea058d3458c395fe42f53b8</anchor>
      <arglist>(Boolean&lt; maybe &gt;, Unsafe) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Boolean</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>aa9354294060afaaa2f86a62de92b54e0</anchor>
      <arglist>(Boolean&lt; maybe &gt; b) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr</type>
      <name>operator bool</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>a66e29630ccd34a2f7db9caa5c8549625</anchor>
      <arglist>() const VEG_NOEXCEPT</arglist>
    </member>
    <member kind="friend">
      <type>VEG_NODISCARD VEG_INLINE constexpr friend auto</type>
      <name>operator!</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean_3_01maybe_01_4.html</anchorfile>
      <anchor>a7e03380caf39d3e53ce7e6b20c859e44</anchor>
      <arglist>(Boolean arg) VEG_NOEXCEPT -&gt; Boolean</arglist>
    </member>
    <member kind="friend">
      <type>VEG_NODISCARD VEG_INLINE constexpr friend auto</type>
      <name>operator!</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Boolean.html</anchorfile>
      <anchor>acfdf1a9bbddb01d26bb4829330df5cfa</anchor>
      <arglist>(Boolean) VEG_NOEXCEPT -&gt; Boolean&lt; T==yes ? no :yes &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_mem::builtin_addr</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1builtin__addr.html</filename>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
    <member kind="function" static="yes">
      <type>static VEG_INLINE constexpr auto</type>
      <name>apply</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1builtin__addr.html</anchorfile>
      <anchor>a254bd1dcee8bc74cac10f79c0777700a</anchor>
      <arglist>(T &amp;var) VEG_NOEXCEPT -&gt; T *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::BumpAlloc</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1BumpAlloc.html</filename>
    <templarg>usize MaxAlign</templarg>
    <base protection="private">proxsuite::linalg::veg::_detail::_mem::BumpAllocLayout&lt; MaxAlign &gt;</base>
    <member kind="function">
      <type></type>
      <name>BumpAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1BumpAlloc.html</anchorfile>
      <anchor>aa41f85482320f21d0af1d566e9f716be</anchor>
      <arglist>(FromSliceMut, SliceMut&lt; byte &gt; s) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_mem::BumpAllocLayout</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</filename>
    <templarg>usize MaxAlign</templarg>
    <member kind="function">
      <type>auto</type>
      <name>_is_last</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>affa084849164666280745d8b9b670b2d</anchor>
      <arglist>(void *ptr, usize byte_size) noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_assert_last</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>a5b202300cea5c6297827102a5e60359a</anchor>
      <arglist>(void *ptr, usize byte_size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_dealloc_last_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>ae9bcc7130fc251137e2bba4a12696b41</anchor>
      <arglist>(void *ptr, mem::Layout layout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_dealloc_any</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>aea650e7f3f0a2238a9624ab1dd2a444e</anchor>
      <arglist>(void *ptr, mem::Layout layout) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_dealloc_last</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>a6d221048f4a8a4160784a12121b6df96</anchor>
      <arglist>(void *ptr, mem::Layout layout)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>_alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>ae1369b27a86e88cc36340876d56d93f5</anchor>
      <arglist>(mem::Layout layout) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>_grow_last_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>a95cbfa616b92049ea6ffde2c773458c7</anchor>
      <arglist>(void *ptr, usize new_byte_size) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>_grow_last</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>a034b1f30ae3d87a71245bcd2f798bf18</anchor>
      <arglist>(void *ptr, mem::Layout old_layout, usize new_byte_size, mem::RelocFn) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>_grow_any</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>ae1e8661a7ecfb10b089737f15d140e90</anchor>
      <arglist>(void *ptr, mem::Layout old_layout, usize new_byte_size, mem::RelocFn reloc) noexcept -&gt; mem::AllocBlock</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>_align</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>a58747b4e7c034c7592464ceeb25565df</anchor>
      <arglist>(usize byte_size) noexcept -&gt; usize</arglist>
    </member>
    <member kind="variable">
      <type>mem::byte *</type>
      <name>current_ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>af95af5501a660f0914339f134175e159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mem::byte *</type>
      <name>start_ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>ac77f0b559e4fb7d692b6410db882911b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mem::byte *</type>
      <name>end_ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1BumpAllocLayout.html</anchorfile>
      <anchor>ac949bb99d27f168eb57cdc375a880907</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::cat</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1cat.html</filename>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::type_sequence_cat&lt; Tuple, Tuples... &gt;</type>
      <name>PreConcat</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1cat.html</anchorfile>
      <anchor>a370ed6c0fc7ce11ab007fcd335dfa192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta:: detected_t&lt; PreConcat, typename meta::TupleBaseInfo&lt; Tuples &gt;::Tuple... &gt;</type>
      <name>Concat</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1cat.html</anchorfile>
      <anchor>a767dd79bda2e647c940dcfe8fba324ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1cat.html</anchorfile>
      <anchor>a18b15107945f557715f81eea6e6017a1</anchor>
      <arglist>((typename... Tuples), requires(VEG_ALL_OF(VEG_CONCEPT(tuple::tuple&lt; Tuples &gt;))), VEG_NODISCARD VEG_INLINE constexpr auto operator(),(... tups, Tuples)) const VEG_NOEXCEPT -&gt; Concat&lt; Tuples... &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::char_seq</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1char__seq.html</filename>
    <templarg>char... Chars</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1char__seq.html</anchorfile>
      <anchor>aa4947c570cd2e3c28515a3eef3b1a266</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::util::nb::checked_non_negative_plus</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1checked__non__negative__plus.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1checked__non__negative__plus.html</anchorfile>
      <anchor>a5892530f58aa2da70e189e6a28cfb936</anchor>
      <arglist>(I a, I b) const noexcept -&gt; I</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::Cleanup</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1Cleanup.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename A</templarg>
    <templarg>typename C</templarg>
    <member kind="function">
      <type></type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1Cleanup.html</anchorfile>
      <anchor>a43c34db2c045fe916c98ca5fb33b3bed</anchor>
      <arglist>(constexpr) void operator()() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>RefMut&lt; A &gt;</type>
      <name>alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1Cleanup.html</anchorfile>
      <anchor>a3e47b417167a29b1641657c6b4602c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RefMut&lt; C &gt;</type>
      <name>cloner</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1Cleanup.html</anchorfile>
      <anchor>a90d77a0fb9cedfd68ffedcc3fb5cd2e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1Cleanup.html</anchorfile>
      <anchor>aaa7eeaff448af7ce5b1b337dc9dc1e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>ptr_end</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1Cleanup.html</anchorfile>
      <anchor>a40ffb84d16540333bb8610ca84c69380</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_dynstack::cleanup</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1cleanup.html</filename>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1cleanup.html</anchorfile>
      <anchor>a7eb6d6e01fbc50ee0f0bd1618d03edd0</anchor>
      <arglist>() const VEG_NOEXCEPT</arglist>
    </member>
    <member kind="variable">
      <type>bool const  &amp;</type>
      <name>success</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1cleanup.html</anchorfile>
      <anchor>ab17ea4904abc04c9d1c2d7993a38cabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::dynstack::DynStackMut &amp;</type>
      <name>parent</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1cleanup.html</anchorfile>
      <anchor>a327d6c98163e8c4bb0115259f8777f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>old_data</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1cleanup.html</anchorfile>
      <anchor>af589794a76fb34d4138239a88adae201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>old_rem_bytes</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1cleanup.html</anchorfile>
      <anchor>a191d349f99672055ebbfa815a3ed92b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::nb::clone</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1clone.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1clone.html</anchorfile>
      <anchor>a82586d646801370abb061b5573d8793a</anchor>
      <arglist>(typename T, requires(VEG_CONCEPT(copyable&lt; T &gt;)), VEG_INLINE constexpr auto operator(),(arg, Ref&lt; T &gt;)) const VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_copyable&lt; T &gt;)) -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::CloneFn</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneFn.html</filename>
    <templarg>bool NoThrow</templarg>
    <templarg>typename T</templarg>
    <templarg>typename A</templarg>
    <templarg>typename C</templarg>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneFn.html</anchorfile>
      <anchor>a98552a6db661ecbf52ec3e250daa9241</anchor>
      <arglist>() VEG_NOEXCEPT_IF(NoThrow) -&gt; T</arglist>
    </member>
    <member kind="variable">
      <type>RefMut&lt; A &gt;</type>
      <name>alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneFn.html</anchorfile>
      <anchor>ab297f725871f362ec4deab9bfd8aa59e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RefMut&lt; C &gt;</type>
      <name>cloner</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneFn.html</anchorfile>
      <anchor>a8265a383285e58e88a950a8b7b5a9801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>in</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneFn.html</anchorfile>
      <anchor>a975b96713fb49c30a47f354a3e21a32b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::CloneFromImpl&lt; false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneFromImpl_3_01false_01_4.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename A</templarg>
    <templarg>typename C</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneFromImpl_3_01false_01_4.html</anchorfile>
      <anchor>a993cbd11ad43ab89f41704050bf988a4</anchor>
      <arglist>(RefMut&lt; A &gt; lhs_alloc, RefMut&lt; C &gt; cloner, vector::RawVector&lt; T &gt; &amp;lhs_raw, Ref&lt; A &gt; rhs_alloc, vector::RawVector&lt; T &gt; const rhs_raw) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_copy_assignable&lt; A &gt;) &amp;&amp;VEG_CONCEPT(alloc</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::CloneFromImpl&lt; true &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneFromImpl_3_01true_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneFromImpl_3_01true_01_4.html</anchorfile>
      <anchor>a1a0a9612e013c1cfc9938d2bc9771331</anchor>
      <arglist>(RefMut&lt; A &gt; lhs_alloc, RefMut&lt; C &gt; cloner, vector::RawVector&lt; T &gt; &amp;lhs_raw, Ref&lt; A &gt; rhs_alloc, vector::RawVector&lt; T &gt; const rhs_raw) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_copy_assignable&lt; A &gt;) &amp;&amp;VEG_CONCEPT(alloc</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::CloneImpl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneImpl.html</filename>
    <templarg>bool IsNoExcept</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::CloneImpl&lt; false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneImpl_3_01false_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneImpl_3_01false_01_4.html</anchorfile>
      <anchor>ab65bb15f92e6ba86a088386f482c0fe5</anchor>
      <arglist>(RefMut&lt; A &gt; alloc, RefMut&lt; C &gt; cloner, T *out, T *out_end, T const *in) VEG_NOEXCEPT_IF(false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::CloneImpl&lt; true &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneImpl_3_01true_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneImpl_3_01true_01_4.html</anchorfile>
      <anchor>ac08a5de3ece6e55e07cf3fdd42f034a3</anchor>
      <arglist>(constexpr) void fn(RefMut&lt; A &gt; alloc</arglist>
    </member>
    <member kind="variable">
      <type>static RefMut&lt; C &gt;</type>
      <name>cloner</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneImpl_3_01true_01_4.html</anchorfile>
      <anchor>ad772817c5857a0dea615a2163d1917d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>static RefMut&lt; C &gt; T *</type>
      <name>out</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneImpl_3_01true_01_4.html</anchorfile>
      <anchor>abfb576bf73dfa079f954a7727f80b86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>static RefMut&lt; C &gt; T T *</type>
      <name>out_end</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1CloneImpl_3_01true_01_4.html</anchorfile>
      <anchor>a76c4609a924f95dff330d40d2473e4fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::Cloner</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Cloner.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::Cloner&lt; DefaultCloner &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Cloner_3_01DefaultCloner_01_4.html</filename>
    <member kind="typedef">
      <type>meta::bool_constant&lt; VEG_CONCEPT(trivially_copyable&lt; T &gt;)&gt;</type>
      <name>trivial_clone</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Cloner_3_01DefaultCloner_01_4.html</anchorfile>
      <anchor>affcd7344b924397e9c9fa6ca821e666f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Cloner_3_01DefaultCloner_01_4.html</anchorfile>
      <anchor>a4fbf8572743e88d1a787bbc89db8e833</anchor>
      <arglist>((typename T, typename Alloc), requires(VEG_CONCEPT(copyable&lt; T &gt;)), VEG_NODISCARD VEG_INLINE static auto clone,(, RefMut&lt; DefaultCloner &gt;),(rhs, Ref&lt; T &gt;),(, RefMut&lt; Alloc &gt;)) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_copyable&lt; T &gt;)) -&gt; T</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Cloner_3_01DefaultCloner_01_4.html</anchorfile>
      <anchor>a62fbfcebb5be5f073f5f23da800b7e6d</anchor>
      <arglist>((typename T, typename Alloc), requires(VEG_CONCEPT(copyable&lt; T &gt;)), VEG_INLINE static void clone_from,(, RefMut&lt; DefaultCloner &gt;),(lhs, RefMut&lt; T &gt;),(rhs, Ref&lt; T &gt;),(, RefMut&lt; Alloc &gt;))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>destroy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Cloner_3_01DefaultCloner_01_4.html</anchorfile>
      <anchor>a93c2077d565245ac31ae8604081e76fc</anchor>
      <arglist>(RefMut&lt; DefaultCloner &gt;, T *ptr, RefMut&lt; Alloc &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::concat_type_seq</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1concat__type__seq.html</filename>
    <templarg>typename Valid</templarg>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Seqs</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1concat__type__seq_3_01true__type_00_01F_01_4.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <member kind="typedef">
      <type>F&lt;&gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1concat__type__seq_3_01true__type_00_01F_01_4.html</anchorfile>
      <anchor>a27911b168957f42153fbd3401dc736b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F, F&lt; Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1concat__type__seq_3_01true__type_00_01F_00_01F_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <member kind="typedef">
      <type>F&lt; Ts... &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1concat__type__seq_3_01true__type_00_01F_00_01F_3_01Ts_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>a69ba2de66e03537ee7a97f2e7d8b89bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F, F&lt; Ts... &gt;, F&lt; Us... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1concat__type__seq_3_01true__type_00_01582279c9f5d813ed42fd9cf78d0a9b55.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <templarg>typename... Us</templarg>
    <member kind="typedef">
      <type>F&lt; Ts..., Us... &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1concat__type__seq_3_01true__type_00_01582279c9f5d813ed42fd9cf78d0a9b55.html</anchorfile>
      <anchor>a4416de871b366b54ef77d8fa042599b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F, F&lt; Ts... &gt;, F&lt; Us... &gt;, F&lt; Vs... &gt;, Seqs... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1concat__type__seq_3_01true__type_00_01de3cf4745ee4581eaa3534df965c4319.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <templarg>typename... Us</templarg>
    <templarg>typename... Vs</templarg>
    <templarg>typename... Seqs</templarg>
    <member kind="typedef">
      <type>typename concat_type_seq&lt; true_type, F, F&lt; Ts..., Us..., Vs... &gt;, typename concat_type_seq&lt; true_type, F, Seqs... &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1concat__type__seq_3_01true__type_00_01de3cf4745ee4581eaa3534df965c4319.html</anchorfile>
      <anchor>a82dace7c8b9b6e56439299150af38d10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::conditional_</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1conditional__.html</filename>
    <templarg>bool B</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::conditional_&lt; false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1conditional___3_01false_01_4.html</filename>
    <member kind="typedef">
      <type>F</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1conditional___3_01false_01_4.html</anchorfile>
      <anchor>ab8288b8479f36c95710f5dedf2f4acff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::conditional_&lt; true &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1conditional___3_01true_01_4.html</filename>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1conditional___3_01true_01_4.html</anchorfile>
      <anchor>a511d7de74cedd24af6e792df351e704c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::concepts::conjunction</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1concepts_1_1conjunction.html</filename>
    <templarg>typename... Preds</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::conjunction</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1conjunction.html</filename>
    <templarg>typename... Preds</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::conjunction</name>
    <filename>structtl_1_1detail_1_1conjunction.html</filename>
    <templarg>class...</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::conjunction&lt; B &gt;</name>
    <filename>structtl_1_1detail_1_1conjunction_3_01B_01_4.html</filename>
    <templarg>class B</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::conjunction&lt; B, Bs... &gt;</name>
    <filename>structtl_1_1detail_1_1conjunction_3_01B_00_01Bs_8_8_8_01_4.html</filename>
    <templarg>class B</templarg>
    <templarg>class... Bs</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::conjunction&lt; First, Preds... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1conjunction_3_01First_00_01Preds_8_8_8_01_4.html</filename>
    <templarg>typename First</templarg>
    <templarg>typename... Preds</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::conjunction&lt;&gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1conjunction_3_4.html</filename>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::constant</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1constant.html</filename>
    <templarg>typename T</templarg>
    <templarg>T Value</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr T</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1constant.html</anchorfile>
      <anchor>a890783168fd0717022dd0faa99e6fdc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::ConstantR</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1ConstantR.html</filename>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1ConstantR.html</anchorfile>
      <anchor>ae41367f652e2bcf6581170119ff41be2</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>r</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1ConstantR.html</anchorfile>
      <anchor>ad9e5df33be21c39ff0abbc01be068144</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::nb::construct_at</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1construct__at.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1construct__at.html</anchorfile>
      <anchor>ad7bf0843231d2d6755d5be91adaa18bd</anchor>
      <arglist>((typename T, typename... Args), requires(!VEG_CONCEPT(const_type&lt; T &gt;) &amp;&amp;VEG_CONCEPT(inplace_constructible&lt; T, Args... &gt;)), VEG_INLINE VEG_CPP20(constexpr) auto operator(),(mem, T *),(... args, Args &amp;&amp;)) const VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_inplace_constructible&lt; T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::nb::construct_with</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1construct__with.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1construct__with.html</anchorfile>
      <anchor>a6b8dd16d4c620dc628f7d53cc4559ee4</anchor>
      <arglist>((typename T, typename Fn), requires(!VEG_CONCEPT(const_type&lt; T &gt;) &amp;&amp;VEG_CONCEPT(fn_once&lt; Fn, T &gt;)), VEG_INLINE VEG_CPP20(constexpr) auto operator(),(mem, T *),(fn, Fn &amp;&amp;)) const VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_fn_once&lt; Fn</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::CopyAvailableFor</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1CopyAvailableFor.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; mem::CopyAvailable,(VEG_CONCEPT(nothrow_copyable&lt; T &gt;) &amp;&amp;VEG_CONCEPT(nothrow_copy_assignable&lt; T &gt;)) ? CopyAvailable::yes_nothrow :(VEG_CONCEPT(copyable&lt; T &gt;) &amp;&amp;VEG_CONCEPT(copy_assignable&lt; T &gt;)) ? CopyAvailable::yes_maythrow :CopyAvailable::no &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::CopyFn</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1CopyFn.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1CopyFn.html</anchorfile>
      <anchor>ad16c351031eb631952d6e24eb8cdc416</anchor>
      <arglist>() const &amp;&amp;VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_copyable&lt; T &gt;)) -&gt; T</arglist>
    </member>
    <member kind="variable">
      <type>T const  &amp;</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1CopyFn.html</anchorfile>
      <anchor>a2db2388ce0027dd4db003f57fa7c37c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::CPUTimes</name>
    <filename>structproxsuite_1_1proxqp_1_1CPUTimes.html</filename>
    <member kind="function">
      <type></type>
      <name>CPUTimes</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1CPUTimes.html</anchorfile>
      <anchor>a21cde7451dca44778b356dae4f4ca56b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1CPUTimes.html</anchorfile>
      <anchor>a6c5fc889a2b72d6ac1074357cb9b4070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>wall</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1CPUTimes.html</anchorfile>
      <anchor>ab54c1d2e5bf6429ab6c8db6fc8b79877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>user</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1CPUTimes.html</anchorfile>
      <anchor>a2d600ef87581ea8246bd795981785d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>system</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1CPUTimes.html</anchorfile>
      <anchor>a374db5e40f5df55ee933a101d6aba84c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::fmt::Debug&lt; Boolean&lt; maybe &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1fmt_1_1Debug_3_01Boolean_3_01maybe_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_string</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1fmt_1_1Debug_3_01Boolean_3_01maybe_01_4_01_4.html</anchorfile>
      <anchor>a0b86d616ef5f208f970962e81c7ed3da</anchor>
      <arglist>(fmt::Buffer &amp;out, Ref&lt; Boolean&lt; maybe &gt; &gt; val)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::fmt::Debug&lt; Dyn &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1fmt_1_1Debug_3_01Dyn_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_string</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1fmt_1_1Debug_3_01Dyn_01_4.html</anchorfile>
      <anchor>ac8de08a8ce2f5ae69266d9057bb56662</anchor>
      <arglist>(fmt::Buffer &amp;out, Ref&lt; Dyn &gt; val)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::decay_helper</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1decay__helper.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::type_identity&lt; T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::decay_helper&lt; Ret(Args...)&gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1decay__helper_3_01Ret_07Args_8_8_8_08_4.html</filename>
    <templarg>typename Ret</templarg>
    <templarg>typename... Args</templarg>
    <base>proxsuite::linalg::veg::meta::type_identity&lt; T &gt;</base>
    <base>proxsuite::linalg::veg::meta::type_identity&lt; Ret(*)(Args...)&gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::decay_helper&lt; T[N]&gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1decay__helper_3_01T_0fN_0e_4.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
    <base>proxsuite::linalg::veg::meta::type_identity&lt; T &gt;</base>
    <base>proxsuite::linalg::veg::meta::type_identity&lt; T * &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_dynstack::default_init_fn</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1default__init__fn.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>make</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1default__init__fn.html</anchorfile>
      <anchor>a250de5946a9cabe4dbec62afbb3e9049</anchor>
      <arglist>(void *ptr, isize len) -&gt; T *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::DefaultCloner</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1DefaultCloner.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::DefaultFn</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1DefaultFn.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1DefaultFn.html</anchorfile>
      <anchor>a2899fb2932a7bf3591fb4f447e471af2</anchor>
      <arglist>() const &amp;&amp;VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_constructible&lt; T &gt;)) -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Defer</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Defer.html</filename>
    <templarg>typename Fn</templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>Defer</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Defer.html</anchorfile>
      <anchor>a88ab80699a90a6823148a353c97c8405</anchor>
      <arglist>(Fn _fn) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_movable&lt; Fn &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Defer</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Defer.html</anchorfile>
      <anchor>a1af5caa2c6abc60b8e7019bb95a704a0</anchor>
      <arglist>(Defer const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Defer</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Defer.html</anchorfile>
      <anchor>adf062b24eed8bbe549e3ecf9b601dad2</anchor>
      <arglist>(Defer &amp;&amp;) VEG_NOEXCEPT=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Defer.html</anchorfile>
      <anchor>ab5347a4639751c7d842e0f16b9f74f1b</anchor>
      <arglist>(Defer const &amp;) -&gt; Defer &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Defer.html</anchorfile>
      <anchor>ae3e3fc5d4c867301becae1e6368eef11</anchor>
      <arglist>(Defer &amp;&amp;) VEG_NOEXCEPT -&gt; Defer &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>~Defer</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Defer.html</anchorfile>
      <anchor>a750df75ba15842247350b44d70ca6711</anchor>
      <arglist>() VEG_NOEXCEPT_IF(VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_fn_once&lt; Fn</arglist>
    </member>
    <member kind="variable">
      <type>Fn</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Defer.html</anchorfile>
      <anchor>a34f8ce376c98d6ead8cd9c460054a187</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VEG_INLINE</type>
      <name>void</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Defer.html</anchorfile>
      <anchor>a2dfa617620b4975f32eeec5a1caaa7e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::Defer</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1Defer.html</filename>
    <templarg>typename Fn</templarg>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>~Defer</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1Defer.html</anchorfile>
      <anchor>a81f61b12bce598fb8e1af82caa64bd44</anchor>
      <arglist>() noexcept(noexcept(VEG_FWD(fn)()))</arglist>
    </member>
    <member kind="variable">
      <type>Fn</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1Defer.html</anchorfile>
      <anchor>a33b77f440a30f67be5ba6b068baf3d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NoCopy</type>
      <name>_</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1Defer.html</anchorfile>
      <anchor>a781230bb1b9b794c7d5d7449e1cea892</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::nb::defer</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1nb_1_1defer.html</filename>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1nb_1_1defer.html</anchorfile>
      <anchor>a271efa9404565de8673a8ecf4d65c633</anchor>
      <arglist>(Fn fn) const -&gt; Defer&lt; Fn &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_mem::DeferUnreachable</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1DeferUnreachable.html</filename>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>~DeferUnreachable</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1DeferUnreachable.html</anchorfile>
      <anchor>a7daeeea6b8f2c44012dcd8d26b0510f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_unreachable</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1DeferUnreachable.html</anchorfile>
      <anchor>abc535c68cfed440612dfa6e8966ee887</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::DenseVecMut</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>DenseVecMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>aae53223bec1f4bb74b2fea06acd0c41b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseVecMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>a8e6f2d9632a91ff160972c93592c7ed5</anchor>
      <arglist>(FromRawParts, T *data, isize len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseVecMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>a8591d022dce099cabd9aacaea3ad7a28</anchor>
      <arglist>(FromEigen, V &amp;&amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_slice</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>a591d9c02f812880271e18cea5bb56439</anchor>
      <arglist>() const noexcept -&gt; Slice&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_slice_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>aecff22a2bee586be65ce154f41d2fd12</anchor>
      <arglist>() noexcept -&gt; SliceMut&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>a190c209a10d7bb1395acf61246555ec6</anchor>
      <arglist>() const noexcept -&gt; DenseVecRef&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nrows</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>a072745f7b3c73d3d61eb5f056bdd638f</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ncols</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>a89c59e72899ccae0ec75c39e634d2dea</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>a92bfe7f8a0efce399710468b745eeb82</anchor>
      <arglist>() const noexcept -&gt; Eigen::Map&lt; Eigen::Matrix&lt; T, -1, 1 &gt; &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>ae9d077714b4822ce1f61e3738ab5beff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>size</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecMut.html</anchorfile>
      <anchor>a20c20a5a9f145d5b6fcbcd2f8ee90ad4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::DenseVecRef</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>DenseVecRef</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</anchorfile>
      <anchor>af25858c4a8356022857617e3c7d2f372</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseVecRef</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</anchorfile>
      <anchor>abff78d130372f6426b102218618600a3</anchor>
      <arglist>(FromRawParts, T const *data, isize len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseVecRef</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</anchorfile>
      <anchor>a23fadf851c19762c2797958500a687f5</anchor>
      <arglist>(FromEigen, V const &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_slice</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</anchorfile>
      <anchor>af881b3899d1f3a99ceed1132eac05cb5</anchor>
      <arglist>() const noexcept -&gt; Slice&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nrows</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</anchorfile>
      <anchor>abf3a26db8a5041bc56e2067f5901c0e3</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ncols</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</anchorfile>
      <anchor>a00ed217848695f184e2f9ef18b71eb4c</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</anchorfile>
      <anchor>af83d6d37dbe0e2a01581be56ed08299a</anchor>
      <arglist>() const noexcept -&gt; Eigen::Map&lt; Eigen::Matrix&lt; T, -1, 1 &gt; const &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</anchorfile>
      <anchor>ab007f4058bec49173e5e4d2a4e786212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>size</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DenseVecRef.html</anchorfile>
      <anchor>ab0767ec62c413eeab971d116ef0d6e36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::nb::deref</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1deref.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1deref.html</anchorfile>
      <anchor>a4cf64a5a7499b6b00a165fa6d262b962</anchor>
      <arglist>(Ref&lt; T &gt; r) const noexcept -&gt; T const &amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::deref_assign</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1deref__assign.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1deref__assign.html</anchorfile>
      <anchor>aa25760fef114a2ca8477733059b79e2e</anchor>
      <arglist>((typename... Ts, typename... Us, usize... Is), requires(VEG_ALL_OF(VEG_CONCEPT(assignable&lt; Ts &amp;, Us const &amp; &gt;))), VEG_INLINE VEG_CPP14(constexpr) void operator(),(ts, IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, RefMut&lt; Ts &gt;... &gt;),(us, IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ref&lt; Us &gt;... &gt;)) const VEG_NOEXCEPT_IF(VEG_ALL_OF(VEG_CONCEPT(nothrow_assignable&lt; Ts &amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::nb::deref_mut</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1deref__mut.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1deref__mut.html</anchorfile>
      <anchor>a69586b725a85757153d3ae3fe603abd3</anchor>
      <arglist>(RefMut&lt; T &gt; r) const noexcept -&gt; T &amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::nb::destroy_at</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1destroy__at.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1destroy__at.html</anchorfile>
      <anchor>aeec834167627b2321a404a32d6e9e7bf</anchor>
      <arglist>((typename T), requires(VEG_CONCEPT(complete&lt; T &gt;)), VEG_INLINE VEG_CPP14(constexpr) void operator(),(mem, T *)) const VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_destructible&lt; T &gt;))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::DestroyImpl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl.html</filename>
    <templarg>bool IsNoExcept</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::DestroyImpl&lt; false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl_3_01false_01_4.html</filename>
    <member kind="function">
      <type>static VEG_INLINE RefMut&lt; C &gt; T T *ptr_end</type>
      <name>VEG_NOEXCEPT_IF</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl_3_01false_01_4.html</anchorfile>
      <anchor>a699be05afaf755ede4bb7150954e82fb</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE</type>
      <name>VEG_CPP20</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl_3_01false_01_4.html</anchorfile>
      <anchor>a6c4c2ca8a9446343a4c42f8a761d2d5e</anchor>
      <arglist>(constexpr) void fn(RefMut&lt; A &gt; alloc</arglist>
    </member>
    <member kind="variable">
      <type>static VEG_INLINE RefMut&lt; C &gt;</type>
      <name>cloner</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl_3_01false_01_4.html</anchorfile>
      <anchor>a16bc6c30a6b9aabf7c1f15a259fd6019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>static VEG_INLINE RefMut&lt; C &gt; T *</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl_3_01false_01_4.html</anchorfile>
      <anchor>a51b01150bca8711248cf8b432ff2dd10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::DestroyImpl&lt; true &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl_3_01true_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl_3_01true_01_4.html</anchorfile>
      <anchor>a367b55b42f167f16555218727774a7a2</anchor>
      <arglist>(constexpr) void fn(RefMut&lt; A &gt; alloc</arglist>
    </member>
    <member kind="variable">
      <type>static VEG_INLINE RefMut&lt; C &gt;</type>
      <name>cloner</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl_3_01true_01_4.html</anchorfile>
      <anchor>aecbd305be38ce5546e4704c91208dc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>static VEG_INLINE RefMut&lt; C &gt; T *</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1DestroyImpl_3_01true_01_4.html</anchorfile>
      <anchor>ae8ca39438842e950aed152937caf8a7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::DetectedImpl</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1DetectedImpl.html</filename>
    <templarg>typename Dummy</templarg>
    <templarg>typename Fallback</templarg>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <member kind="typedef">
      <type>Fallback</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1DetectedImpl.html</anchorfile>
      <anchor>a208a77ca29650691e549efbd3096f49e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::DetectedImpl&lt; Void&lt; F&lt; Ts... &gt; &gt;, Fallback, F, Ts... &gt;</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1DetectedImpl_3_01Void_3_01F_3_01Ts_8_8_8_01_4_01_4_00_01F2ffd9abc2f7171836425854b294c9e6f.html</filename>
    <templarg>typename Fallback</templarg>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
    <member kind="typedef">
      <type>F&lt; Ts... &gt;</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1DetectedImpl_3_01Void_3_01F_3_01Ts_8_8_8_01_4_01_4_00_01F2ffd9abc2f7171836425854b294c9e6f.html</anchorfile>
      <anchor>a59e4ed0c18691a02462bdf05239067a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fallback</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1DetectedImpl.html</anchorfile>
      <anchor>a208a77ca29650691e549efbd3096f49e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::member_extract_access::DetectImpl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access_1_1DetectImpl.html</filename>
    <templarg>typename U</templarg>
    <templarg>typename</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access_1_1DetectImpl.html</anchorfile>
      <anchor>ac01799542da3ecf303193b55652819bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access_1_1DetectImpl.html</anchorfile>
      <anchor>a2dd1c7e93fb8c135313b98c68b16ccb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::member_extract_access::DetectImpl&lt; U, typename U::_veglib_impl_member_extract::Type &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access_1_1DetectImpl_3_01U_00_00af7d3949cdaf6a09d1e61669085cd63.html</filename>
    <templarg>typename U</templarg>
    <member kind="typedef">
      <type>typename U::_veglib_impl_member_extract</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access_1_1DetectImpl_3_01U_00_00af7d3949cdaf6a09d1e61669085cd63.html</anchorfile>
      <anchor>a04e16f8bec18a7a601fb4b764860829e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access_1_1DetectImpl.html</anchorfile>
      <anchor>ac01799542da3ecf303193b55652819bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access_1_1DetectImpl_3_01U_00_00af7d3949cdaf6a09d1e61669085cd63.html</anchorfile>
      <anchor>a693d9401a8c88e49fb92a422476705a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access_1_1DetectImpl.html</anchorfile>
      <anchor>a2dd1c7e93fb8c135313b98c68b16ccb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::detector</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1detector.html</filename>
    <templarg>typename Default</templarg>
    <templarg>template&lt; typename... &gt; class Ftor</templarg>
    <templarg>typename... Args</templarg>
    <base>proxsuite::linalg::veg::_detail::_meta::_detector&lt; void, Ftor, Args... &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::concepts::disjunction</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1concepts_1_1disjunction.html</filename>
    <templarg>typename... Preds</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::disjunction</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1disjunction.html</filename>
    <templarg>typename... Preds</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::disjunction&lt; First, Preds... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1disjunction_3_01First_00_01Preds_8_8_8_01_4.html</filename>
    <templarg>typename First</templarg>
    <templarg>typename... Preds</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::disjunction&lt;&gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1disjunction_3_4.html</filename>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>tl::nullopt_t::do_not_use</name>
    <filename>structtl_1_1nullopt__t_1_1do__not__use.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::DtorAvailableFor</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1DtorAvailableFor.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; mem::DtorAvailable, ? DtorAvailable::yes_nothrow :DtorAvailable::yes_maythrow &gt;</base>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_storage_base::dummy</name>
    <filename>structtl_1_1detail_1_1optional__storage__base_1_1dummy.html</filename>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_storage_base&lt; T, true &gt;::dummy</name>
    <filename>structtl_1_1detail_1_1optional__storage__base_3_01T_00_01true_01_4_1_1dummy.html</filename>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a7d92217da280c88c4f266f1dc9c2c245</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a19db24f29414b68a4000b68056ef0251</anchor>
      <arglist>(in_place_t, U &amp;&amp;... u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a1899339b4ca940f3d05cc6efb44727bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>dummy</type>
      <name>m_dummy</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>ad2683bd7f83154a169b004f7bc54fee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_value</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a26202010e681a9f49921c4fd5cb2f47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_has_value</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a9d691058a66145edc2c0023c7ce9fa21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Dyn</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>Dyn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a61b1bab14385b3a8e1cee7e78c3f02fc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Dyn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a764762208fe4ba21ef12d01ee2940c1e</anchor>
      <arglist>(isize val) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Dyn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a3a9044a2e2b7811577d78ed47614464e</anchor>
      <arglist>(Fix&lt; N &gt;) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr</type>
      <name>operator isize</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a0761a9fba3884c2367cc6cbb34a55d88</anchor>
      <arglist>() const VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator+</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>ad3bcc1819c303f82fed41e62523037fb</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; Dyn</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator-</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a1a2a22d48207bd9b187e051dbc811cc7</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; Dyn</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>aff2282b9dbb5f8c8a851587d310cb0b4</anchor>
      <arglist>(+, add, Add)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a7ddcabb26b2b3fbd5e5600daf8fe07e3</anchor>
      <arglist>(-, sub, Sub)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a70c39460c28bccc1ed2849afc08e6d18</anchor>
      <arglist>((typename R), requires(VEG_CONCEPT(index&lt; R &gt;) &amp;&amp;VEG_CONCEPT(index&lt; typename _detail::binary_traits&lt; Dyn, R &gt;::Div &gt;)), VEG_NODISCARD VEG_INLINE constexpr auto operator/,(b, R)) const VEG_NOEXCEPT -&gt; typename _detail::binary_traits&lt; Dyn, R &gt;::Div</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a5f754a6624e82b1b04d930f1e3f2349d</anchor>
      <arglist>((typename R), requires(VEG_CONCEPT(index&lt; R &gt;) &amp;&amp;VEG_CONCEPT(index&lt; typename _detail::binary_traits&lt; Dyn, R &gt;::Mod &gt;)), VEG_NODISCARD VEG_INLINE constexpr auto operator%,(b, R)) const VEG_NOEXCEPT -&gt; typename _detail::binary_traits&lt; Dyn, R &gt;::Mod</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>aad3479461602ca330a0116390d6007a1</anchor>
      <arglist>(eq, CmpEq,==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>af0efac8111fe59c3bebd89ecb38ef8ca</anchor>
      <arglist>(neq, CmpNEq, !=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a366e04d8b2a2a45f0d9217bb369123da</anchor>
      <arglist>(lt, CmpLT,&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a240aa12fe3a57b8fdb026b52020ca506</anchor>
      <arglist>(le, CmpLE,&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a80f18360fc6f024a714efd2df5014d54</anchor>
      <arglist>(gt, CmpGT, &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a465f6bb9ec06a62437991bcf7f26aa62</anchor>
      <arglist>(ge, CmpGE, &gt;=)</arglist>
    </member>
    <member kind="variable">
      <type>VEG_OP *</type>
      <name>mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Dyn.html</anchorfile>
      <anchor>a02b8c0e67d8b0b56d497e4a92d134f71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_dynstack::DynAllocBase</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynAllocBase.html</filename>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynAllocBase.html</anchorfile>
      <anchor>ac2e5b60f95f330282503166c92bd5c7c</anchor>
      <arglist>(void const volatile *void_data_end) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::dynstack::DynStackMut *</type>
      <name>parent</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynAllocBase.html</anchorfile>
      <anchor>a1b58a2e2ff4813c923bc39d8eb90304e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>old_pos</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynAllocBase.html</anchorfile>
      <anchor>a433cb04599013fd5f0dfadb6d04107c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void const volatile  *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynAllocBase.html</anchorfile>
      <anchor>ac2bb4f3653178a191fd4c905bfcffc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>len</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynAllocBase.html</anchorfile>
      <anchor>aa3d1a6751c3e592b06920ba0838de9d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::dynstack::DynStackAlloc</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::_detail::_dynstack::DynAllocBase</base>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>~DynStackAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>a3d5f64811723414a02b8e4cd7e8d782b</anchor>
      <arglist>() VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynStackAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>a46dec376c915f8e376cc94061e498f26</anchor>
      <arglist>(DynStackAlloc const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynStackAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>a83656d651033fbe757d12ecd6fc73e37</anchor>
      <arglist>(DynStackAlloc &amp;&amp;other) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>a8265e90121f2bafce1703263219e737a</anchor>
      <arglist>(DynStackAlloc const &amp;) -&gt; DynStackAlloc &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>a84935bb115c061f93fefd3ee34d9cd0c</anchor>
      <arglist>(DynStackAlloc &amp;&amp;rhs) VEG_NOEXCEPT -&gt; DynStackAlloc &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>as_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>a083cbf1a4dfab5d4fa5fc8d9a875c826</anchor>
      <arglist>() VEG_NOEXCEPT -&gt; SliceMut&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>as_ref</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>ad279a34518c8c1dd22b3c647b3a748e1</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; Slice&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>ptr_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>a6c6f6ea232ddf18877f256468cc5ef6a</anchor>
      <arglist>() VEG_NOEXCEPT -&gt; T *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>ad3afaa04b72559cfb00c5b670c611e41</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; T const *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>len</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>aeaf0480b66185b1e0d6a7eb381236749</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; isize</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DynStackArray&lt; T &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>a739b0dd27f7ae779fbb7d9f494555c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DynStackMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>accd36152678083f5dc0f2293a44064f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::_dynstack::DynStackArrayDtor&lt; T &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackAlloc.html</anchorfile>
      <anchor>acb74ac93e493485ce34aaee752dd4c8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::dynstack::DynStackArray</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackArray.html</filename>
    <templarg>typename T</templarg>
    <base protection="private">proxsuite::linalg::veg::dynstack::DynStackAlloc&lt; T &gt;</base>
    <base>proxsuite::linalg::veg::_detail::_dynstack::DynStackArrayDtor&lt; T, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>~DynStackArray</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackArray.html</anchorfile>
      <anchor>a875fa3933c64aa6d48df632c14889781</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynStackArray</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackArray.html</anchorfile>
      <anchor>a6d6150cd5d0dc1fe32628c33db215453</anchor>
      <arglist>(DynStackArray const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynStackArray</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackArray.html</anchorfile>
      <anchor>aa4a0ef2c98a38489f4a1531f47abcd8a</anchor>
      <arglist>(DynStackArray &amp;&amp;) VEG_NOEXCEPT=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackArray.html</anchorfile>
      <anchor>a02afdde6f42955f39ab9548416662871</anchor>
      <arglist>(DynStackArray const &amp;) -&gt; DynStackArray &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackArray.html</anchorfile>
      <anchor>a8e601fc1f1e1abce85084bc69c0e2056</anchor>
      <arglist>(DynStackArray &amp;&amp;rhs) VEG_NOEXCEPT -&gt; DynStackArray &amp;</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DynStackMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackArray.html</anchorfile>
      <anchor>accd36152678083f5dc0f2293a44064f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::_dynstack::DynStackArrayDtor&lt; T &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackArray.html</anchorfile>
      <anchor>acb74ac93e493485ce34aaee752dd4c8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_dynstack::DynStackArrayDtor</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynStackArrayDtor.html</filename>
    <templarg>typename T</templarg>
    <templarg>bool</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_dynstack::DynStackArrayDtor&lt; T, false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynStackArrayDtor_3_01T_00_01false_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>DynStackArrayDtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynStackArrayDtor_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>ad9c9817a645be2a4652dd5d8463508cc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynStackArrayDtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynStackArrayDtor_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>afce6c6720d0b57a48f22c8fabf6b16cd</anchor>
      <arglist>(DynStackArrayDtor const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynStackArrayDtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynStackArrayDtor_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>afc3818ec1e0553a6ae3115082b7f009b</anchor>
      <arglist>(DynStackArrayDtor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynStackArrayDtor_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a69a661cd6cce03f487b7b50c3906bb06</anchor>
      <arglist>(DynStackArrayDtor const &amp;) -&gt; DynStackArrayDtor &amp;=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynStackArrayDtor_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>aac5d2e6903d6d36d2fb6714a9736d44c</anchor>
      <arglist>(DynStackArrayDtor &amp;&amp;) -&gt; DynStackArrayDtor &amp;=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>~DynStackArrayDtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1DynStackArrayDtor_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>aaca339b18b428c36297dd1c7f17b4922</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::DynStackMut</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</filename>
    <member kind="function">
      <type></type>
      <name>DynStackMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>af1f8138738f7bdf412c6da1a789192aa</anchor>
      <arglist>(FromSliceMut, SliceMut&lt; unsigned char &gt; s) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>remaining_bytes</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>af8d457265bc065db8aec145085a379ed</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>ptr_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>ac16483c7720347e2aaf3187526474bbd</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>a8efb2d72e4be968810fd745e2c07e403</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; void const *</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>a9aa353807599eaf587bd898118ab24b6</anchor>
      <arglist>((typename T), requires VEG_CONCEPT(constructible&lt; T &gt;), VEG_NODISCARD auto make_new,(, Tag&lt; T &gt;),(len, isize),(align=alignof(T), isize)) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_constructible&lt; T &gt;)) -&gt; DynStackArray&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>a6d381bf4a325a70610b4fa65bf10de23</anchor>
      <arglist>((typename T), requires VEG_CONCEPT(constructible&lt; T &gt;), VEG_NODISCARD auto make_new_for_overwrite,(, Tag&lt; T &gt;),(len, isize),(align=alignof(T), isize)) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_constructible&lt; T &gt;)) -&gt; DynStackArray&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>make_alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>ad7d938d0cedcba7b213330c33793f871</anchor>
      <arglist>(Tag&lt; T &gt;, isize len, isize align=alignof(T)) VEG_NOEXCEPT -&gt; DynStackAlloc&lt; T &gt;</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DynStackAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>a227becb29beb0e68108eb57f5a3d04e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DynStackArray</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>a686769f8bedb98c6fe2682509d7a909b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::_dynstack::cleanup</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>a9f8366bf4005d99ea44daf5b82fe8d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::_dynstack::DynAllocBase</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1DynStackMut.html</anchorfile>
      <anchor>a478a63a468985d2dd5dcb33f6741c4a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::dynstack::DynStackMut</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</filename>
    <member kind="function">
      <type></type>
      <name>DynStackMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>af1f8138738f7bdf412c6da1a789192aa</anchor>
      <arglist>(FromSliceMut, SliceMut&lt; unsigned char &gt; s) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>remaining_bytes</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>af8d457265bc065db8aec145085a379ed</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>ptr_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>ac16483c7720347e2aaf3187526474bbd</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>a8efb2d72e4be968810fd745e2c07e403</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; void const *</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>a9aa353807599eaf587bd898118ab24b6</anchor>
      <arglist>((typename T), requires VEG_CONCEPT(constructible&lt; T &gt;), VEG_NODISCARD auto make_new,(, Tag&lt; T &gt;),(len, isize),(align=alignof(T), isize)) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_constructible&lt; T &gt;)) -&gt; DynStackArray&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>a6d381bf4a325a70610b4fa65bf10de23</anchor>
      <arglist>((typename T), requires VEG_CONCEPT(constructible&lt; T &gt;), VEG_NODISCARD auto make_new_for_overwrite,(, Tag&lt; T &gt;),(len, isize),(align=alignof(T), isize)) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_constructible&lt; T &gt;)) -&gt; DynStackArray&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD auto</type>
      <name>make_alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>ad7d938d0cedcba7b213330c33793f871</anchor>
      <arglist>(Tag&lt; T &gt;, isize len, isize align=alignof(T)) VEG_NOEXCEPT -&gt; DynStackAlloc&lt; T &gt;</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DynStackAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>a227becb29beb0e68108eb57f5a3d04e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DynStackArray</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>a686769f8bedb98c6fe2682509d7a909b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::_dynstack::cleanup</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>a9f8366bf4005d99ea44daf5b82fe8d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::_dynstack::DynAllocBase</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1DynStackMut.html</anchorfile>
      <anchor>a478a63a468985d2dd5dcb33f6741c4a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::EigenAllowAlloc</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1EigenAllowAlloc.html</filename>
    <member kind="function">
      <type></type>
      <name>EigenAllowAlloc</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1EigenAllowAlloc.html</anchorfile>
      <anchor>a86ebad5b8d92164f9a69c8349688c609</anchor>
      <arglist>(EigenAllowAlloc &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenAllowAlloc</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1EigenAllowAlloc.html</anchorfile>
      <anchor>ae9bde03469910d4370f60fe3956477b8</anchor>
      <arglist>(EigenAllowAlloc const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1EigenAllowAlloc.html</anchorfile>
      <anchor>af553bf9e828aeb9dc5a7d421b9cf00f4</anchor>
      <arglist>(EigenAllowAlloc &amp;&amp;) -&gt; EigenAllowAlloc &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1EigenAllowAlloc.html</anchorfile>
      <anchor>a8ac7ae3a8a00348f2f339c961e4651ad</anchor>
      <arglist>(EigenAllowAlloc const &amp;) -&gt; EigenAllowAlloc &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenAllowAlloc</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1EigenAllowAlloc.html</anchorfile>
      <anchor>afd85db9ff379a138b5ef17c5e267d1bb</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alloc_was_allowed</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1EigenAllowAlloc.html</anchorfile>
      <anchor>a8b266635c0e58b6eb2da359a5a086da9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::utils::EigenNoAlloc</name>
    <filename>structproxsuite_1_1proxqp_1_1utils_1_1EigenNoAlloc.html</filename>
    <member kind="function">
      <type></type>
      <name>EigenNoAlloc</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1utils_1_1EigenNoAlloc.html</anchorfile>
      <anchor>a9bc65f2c5169c4888d45a7f0212663c2</anchor>
      <arglist>(EigenNoAlloc &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenNoAlloc</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1utils_1_1EigenNoAlloc.html</anchorfile>
      <anchor>a409e7b66f5bdda23411f1bd6732dfce8</anchor>
      <arglist>(EigenNoAlloc const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1utils_1_1EigenNoAlloc.html</anchorfile>
      <anchor>acca599e345fd5bf9c5826549c51733f3</anchor>
      <arglist>(EigenNoAlloc &amp;&amp;) -&gt; EigenNoAlloc &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1utils_1_1EigenNoAlloc.html</anchorfile>
      <anchor>a74bf1d850f16589f7e582057c13e7982</anchor>
      <arglist>(EigenNoAlloc const &amp;) -&gt; EigenNoAlloc &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenNoAlloc</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1utils_1_1EigenNoAlloc.html</anchorfile>
      <anchor>affe12671777c04d9bf5b500262f970c7</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::ElemAddrImpl</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1ElemAddrImpl.html</filename>
    <templarg>bool ROWMAJOR</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::ElemAddrImpl&lt; false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1ElemAddrImpl_3_01false_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1ElemAddrImpl_3_01false_01_4.html</anchorfile>
      <anchor>a8395a59cc6f87df8da26a18de03c62bd</anchor>
      <arglist>(T *ptr, isize row, isize col, isize outer_stride, isize inner_stride) noexcept -&gt; T *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::ElemAddrImpl&lt; true &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1ElemAddrImpl_3_01true_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1ElemAddrImpl_3_01true_01_4.html</anchorfile>
      <anchor>aebc8fb805c644d7c7bac8c7f5305060f</anchor>
      <arglist>(T *ptr, isize row, isize col, isize outer_stride, isize inner_stride) noexcept -&gt; T *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::ElementAccess</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess.html</filename>
    <templarg>Layout L</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::ElementAccess&lt; Layout::colmajor &gt;</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1colmajor_01_4.html</filename>
    <member kind="typedef">
      <type>Eigen::Stride&lt; 0, 0 &gt;</type>
      <name>NextRowStride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1colmajor_01_4.html</anchorfile>
      <anchor>ab448bde9af5282a4bc508736881e20d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::InnerStride&lt; Eigen::Dynamic &gt;</type>
      <name>NextColStride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1colmajor_01_4.html</anchorfile>
      <anchor>a09cdd836404fe349cbd24f164087f75a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE constexpr auto</type>
      <name>offset</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1colmajor_01_4.html</anchorfile>
      <anchor>ade5b6ab5f722396263d462502ca295a9</anchor>
      <arglist>(T *ptr, isize row, isize col, isize outer_stride) noexcept -&gt; T *</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>next_row_stride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1colmajor_01_4.html</anchorfile>
      <anchor>a6c326496ae1dcbeddf310ca00430a561</anchor>
      <arglist>(isize outer_stride) noexcept -&gt; NextRowStride</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>next_col_stride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1colmajor_01_4.html</anchorfile>
      <anchor>acf6fce29f0fedd685ea1cba5918b9e60</anchor>
      <arglist>(isize outer_stride) noexcept -&gt; NextColStride</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>transpose_if_rowmajor</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1colmajor_01_4.html</anchorfile>
      <anchor>adf12f2502b18f15d3853785d20147ef3</anchor>
      <arglist>(T *ptr, isize dim, isize outer_stride)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::ElementAccess&lt; Layout::rowmajor &gt;</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1rowmajor_01_4.html</filename>
    <member kind="typedef">
      <type>Eigen::Stride&lt; 0, 0 &gt;</type>
      <name>NextColStride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1rowmajor_01_4.html</anchorfile>
      <anchor>a676a940446fe434cd295a8ffd5d3e93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::InnerStride&lt; Eigen::Dynamic &gt;</type>
      <name>NextRowStride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1rowmajor_01_4.html</anchorfile>
      <anchor>a680dff2a8f72be532dc7cc369caa16e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE constexpr auto</type>
      <name>offset</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1rowmajor_01_4.html</anchorfile>
      <anchor>a3c17662e403715b9547b142970c481e5</anchor>
      <arglist>(T *ptr, isize row, isize col, isize outer_stride) noexcept -&gt; T *</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>next_col_stride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1rowmajor_01_4.html</anchorfile>
      <anchor>af8782b651d6eeadb40079429719317c0</anchor>
      <arglist>(isize outer_stride) noexcept -&gt; NextColStride</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>next_row_stride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1rowmajor_01_4.html</anchorfile>
      <anchor>a1b00d25fc5102ada7a01bdc00cc32755</anchor>
      <arglist>(isize outer_stride) noexcept -&gt; NextRowStride</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>transpose_if_rowmajor</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1ElementAccess_3_01Layout_1_1rowmajor_01_4.html</anchorfile>
      <anchor>a3a0fc7e07a6a5c14e329363ad234d861</anchor>
      <arglist>(T *ptr, isize dim, isize outer_stride)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::EmptyI</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1EmptyI.html</filename>
    <templarg>isize I</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::enable_if</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1enable__if.html</filename>
    <templarg>bool B</templarg>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1enable__if.html</anchorfile>
      <anchor>a2b0c501709760564b977cbf086e51939</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::enable_if&lt; false, T &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1enable__if_3_01false_00_01T_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1enable__if.html</anchorfile>
      <anchor>a2b0c501709760564b977cbf086e51939</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::Error</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1Error.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1Error.html</anchorfile>
      <anchor>a0d2d2b7fabccd6edf41fe78efa989d4b</anchor>
      <arglist>(u64 const *fail=nullptr) const VEG_NOEXCEPT -&gt; u64</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__cpo_1_1extract__members__deduce__trait.html</filename>
    <templarg>template&lt; typename &gt; class Trait</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait_impl&lt; _detail::member_extract_access&lt; T &gt;::value, Trait, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait_impl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__cpo_1_1extract__members__deduce__trait__impl.html</filename>
    <templarg>bool</templarg>
    <templarg>template&lt; typename &gt; class Trait</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait_impl&lt; true, Trait, T &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__cpo_1_1extract__members__deduce__trait__impl_3_01true_00_01Trait_00_01T_01_4.html</filename>
    <templarg>template&lt; typename &gt; class Trait</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::_detail::_cpo::member_trait_and&lt; Trait, decltype(_detail::member_extract_access&lt; T &gt;::Type::member_pointers())&gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::ExtractCharsImpl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1ExtractCharsImpl.html</filename>
    <templarg>typename LiteralType</templarg>
    <templarg>typename Seq</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::ExtractCharsImpl&lt; LiteralType, _meta::integer_sequence&lt; usize, Is... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1ExtractCharsImpl_3_01LiteralType_00_01__meta_1_1d476412a21163f03e8522a1305f534b2.html</filename>
    <templarg>typename LiteralType</templarg>
    <templarg>usize... Is</templarg>
    <member kind="typedef">
      <type>StrLiteralConstant&lt; CharUnit(LiteralType::value[Is])... &gt;</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1ExtractCharsImpl_3_01LiteralType_00_01__meta_1_1d476412a21163f03e8522a1305f534b2.html</anchorfile>
      <anchor>ab7c55189e5ec3d3ef6036a65c41f7366</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::ExtractCharsImplExpr</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1ExtractCharsImplExpr.html</filename>
    <templarg>typename LiteralType</templarg>
    <templarg>typename Seq</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::ExtractCharsImplExpr&lt; LiteralType, _meta::integer_sequence&lt; usize, Is... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1ExtractCharsImplExpr_3_01LiteralType_00_01__meta88b7e11331c99a9eada1b5b649dfc6f2.html</filename>
    <templarg>typename LiteralType</templarg>
    <templarg>usize... Is</templarg>
    <member kind="typedef">
      <type>StrLiteralConstant&lt; CharUnit(LiteralType::value()[Is])... &gt;</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1ExtractCharsImplExpr_3_01LiteralType_00_01__meta88b7e11331c99a9eada1b5b649dfc6f2.html</anchorfile>
      <anchor>a633e0a1b5db2e6a2ecbd801edf3d8bc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::nb::fabs</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1nb_1_1fabs.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1nb_1_1fabs.html</anchorfile>
      <anchor>ab8c662adfa5aed797a7e4647dae7bcd4</anchor>
      <arglist>(T x) const -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Fix</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</filename>
    <templarg>isize N</templarg>
    <base>proxsuite::linalg::veg::_detail::idx::adl::IdxBase&lt; Fix&lt; N &gt; &gt;</base>
    <member kind="function">
      <type>constexpr</type>
      <name>Fix</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a7e532e832a1a5ba14e31f0853a2a83fb</anchor>
      <arglist>() VEG_NOEXCEPT=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Fix</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a6df7e2469d6cd9bbd51689011f4b57f9</anchor>
      <arglist>(Dyn, Unsafe) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Fix</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a50e502611a5b22a94a58f15b089fcbe8</anchor>
      <arglist>(Dyn arg) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>ae06e1acaa269adf202f0e99cb0e361a9</anchor>
      <arglist>((isize M), requires((M !=N)), constexpr Fix,(, Fix&lt; M &gt;))=delete</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr</type>
      <name>operator isize</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a2bddcaa1bb4c5bbc5e55be12a0698b4c</anchor>
      <arglist>() const VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator+</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a43adb1561aafc4550dd07f324b63155b</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; Fix</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator-</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a5b44f7f76dfbdcbe5310d88e52132e59</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; Fix&lt;-N &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a09e9e1823dee1992ebe8c54875dea133</anchor>
      <arglist>(+, add, Add)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_OP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>aee097c775cf23eeb9d19026f980bcdb4</anchor>
      <arglist>(-, sub, Sub)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a4ee7d3bcdb889f661ba4e891dd4660b9</anchor>
      <arglist>((typename R), requires(VEG_CONCEPT(index&lt; R &gt;) &amp;&amp;VEG_CONCEPT(index&lt; typename _detail::binary_traits&lt; Fix, R &gt;::Div &gt;)), VEG_NODISCARD VEG_INLINE constexpr auto operator/,(b, R)) const VEG_NOEXCEPT -&gt; typename _detail::binary_traits&lt; Fix, R &gt;::Div</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a5c5f7843de36a59644207c53879f6aee</anchor>
      <arglist>((typename R), requires(VEG_CONCEPT(index&lt; R &gt;) &amp;&amp;VEG_CONCEPT(index&lt; typename _detail::binary_traits&lt; Fix, R &gt;::Mod &gt;)), VEG_NODISCARD VEG_INLINE constexpr auto operator%,(b, R)) const VEG_NOEXCEPT -&gt; typename _detail::binary_traits&lt; Fix, R &gt;::Mod</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a10329648f8f6a77f33229ec37cb0bc20</anchor>
      <arglist>(eq, CmpEq,==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>ab7fb1c09595f55a5db637a89624bc2ae</anchor>
      <arglist>(neq, CmpNEq, !=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>af9df9f48fab77dd293cbd66a645a181b</anchor>
      <arglist>(lt, CmpLT,&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a907f7f0b3ee71c9286ac8ecc4a0d0113</anchor>
      <arglist>(le, CmpLE,&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a521d07a4b8c65f3b7e1194826bc92277</anchor>
      <arglist>(gt, CmpGT, &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CMP</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>a3a02913e4e1c327dc2c5c9a1b9800c6f</anchor>
      <arglist>(ge, CmpGE, &gt;=)</arglist>
    </member>
    <member kind="variable">
      <type>VEG_OP *</type>
      <name>mul</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Fix.html</anchorfile>
      <anchor>aa942b1d208a7d282f2be3e8285f28f45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::FnInfo</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1FnInfo.html</filename>
    <templarg>typename Fn</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::for_each</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1for__each.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1for__each.html</anchorfile>
      <anchor>aedfc04fd33cbfbf3fecc6749f10fa607</anchor>
      <arglist>((typename Fn, typename... Ts, usize... Is), requires(VEG_ALL_OF(VEG_CONCEPT(fn_mut&lt; Fn, void, Ts &amp;&amp; &gt;))), VEG_INLINE VEG_CPP14(constexpr) void operator(),(args, IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ts... &gt; &amp;&amp;),(fn, Fn)) const VEG_NOEXCEPT_IF(VEG_ALL_OF(VEG_CONCEPT(nothrow_fn_mut&lt; Fn</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>void</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1for__each.html</anchorfile>
      <anchor>a48a34ad4563432163716359767152090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::for_each_i</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1for__each__i.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1for__each__i.html</anchorfile>
      <anchor>ac0700521403937d19a2d7e3a852ba53f</anchor>
      <arglist>((typename Fn, typename... Ts, usize... Is), requires(VEG_ALL_OF(VEG_CONCEPT(fn_once&lt; inner_ith&lt; Fn &amp;, Is &gt;, void, Ts &gt;))), VEG_INLINE VEG_CPP14(constexpr) void operator(),(args, IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ts... &gt; &amp;&amp;),(fn, Fn)) const VEG_NOEXCEPT_IF(VEG_ALL_OF(VEG_CONCEPT(nothrow_fn_once&lt; inner_ith&lt; Fn</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Is</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1for__each__i.html</anchorfile>
      <anchor>aa288bf34aaf3d4c50a01102efb84e145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>void</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1for__each__i.html</anchorfile>
      <anchor>abc83e90be48c6aa3e0edd213d22fbb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Ts</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1for__each__i.html</anchorfile>
      <anchor>aea0887894d12c2d0151054d028a1e078</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::nb::get</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1get.html</filename>
    <templarg>usize I</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_mem::has_adl_addr</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1has__adl__addr.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
    <base>proxsuite::linalg::veg::_detail::_mem::adl_addr</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::has_adl_get</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1has__adl__get.html</filename>
    <templarg>usize I</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
    <base>proxsuite::linalg::veg::_detail::_meta::adl_get</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::has_array_get</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1has__array__get.html</filename>
    <templarg>usize I</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
    <base>proxsuite::linalg::veg::_detail::_meta::array_get</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_mem::has_member_addr</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1has__member__addr.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
    <base>proxsuite::linalg::veg::_detail::_mem::member_addr</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::has_member_get</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1has__member__get.html</filename>
    <templarg>usize I</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
    <base>proxsuite::linalg::veg::_detail::_meta::member_get</base>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; tl::optional&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01tl_1_1optional_3_01T_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>::std::size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01tl_1_1optional_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aca07f522688b1fada8611947f71ddd97</anchor>
      <arglist>(const tl::optional&lt; T &gt; &amp;o) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::HollowIndexedTuple</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1HollowIndexedTuple.html</filename>
    <templarg>typename ISeq</templarg>
    <templarg>typename... Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::HollowIndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1HollowIndexedTuple_3_01meta_1_1index__sequence_3f84b3922c12e192319784dd1647ab986.html</filename>
    <templarg>usize... Is</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::_detail::HollowLeaf&lt; Is, Ts &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::HollowLeaf</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1HollowLeaf.html</filename>
    <templarg>usize I</templarg>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::i_am_secret</name>
    <filename>structtl_1_1detail_1_1i__am__secret.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::preconditioner::Identity</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="function">
      <type>void</type>
      <name>scale_qp_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a72ddae8907a60a50b4e099938c115b28</anchor>
      <arglist>(QpViewMut&lt; T, I &gt;, proxsuite::linalg::veg::dynstack::DynStackMut)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>ac732755cb480e044758df3eff5ecc18c</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a5b7fe45787e50a3b2f3ee411a933ebf3</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a332f62429c01cf378b8a0936263bd898</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a23d3842fb171b2595930d6a5c427b1e4</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>af87d2d58490a58528b21c4c1451366a3</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>aca9e6584fa51189091e8f226078618d1</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>aa6019dab59b5ca4378a734abac6d7c7e</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a246b2d2d4cb958773ce3d2bf860703c8</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a1c467ee4ea65a6bb8ad265f4e9de95df</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>ac9b569c03e2716b906c9f9e3f482e44d</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>ab01194ede1ac16393e43e687a4d8e17d</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>aa126694d3610e05a8058aed914e6b490</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>af88777e6622b2939b185faeab56b4ba7</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a1f7175f0acdd860e47724ea43f597bb0</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a1cda12e11200e66cfb5a29bbf06f315d</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a7290ed464c454294647a449654cefcbc</anchor>
      <arglist>(VectorViewMut&lt; T &gt;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>scale_qp_in_place_req</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1Identity.html</anchorfile>
      <anchor>a698391d2bd31f87611f0b3650134290b</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, isize, isize, isize) -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::preconditioner::IdentityPrecond</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</filename>
    <member kind="function">
      <type>void</type>
      <name>scale_qp_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>a9f52a17dbc87b40baa4c9efcf761d559</anchor>
      <arglist>(QpViewBoxMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>a78be183af75304c2e4fb3c4296cf6701</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>a1cf324354866acfdf3532a94248d5d88</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>acdb2e66d9a47b883857553cc388d698c</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>a6adddc58024ee9b3c65cabcb2cc0b928</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>a8edee2fad3e14e4d9f21a8ab264b7842</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>a1cc31225fa22016dff91fa7cad55bb1d</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>a1e09b1309abbb98a8bfdcc8d00bf432b</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>aa4bbad7629b5b03a5c46095a9f10b3b8</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>a8c7ea9a87bf477b4ad4ef26533b7d242</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>ad78db6f43fd27aaf4b16714a255a0a10</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1IdentityPrecond.html</anchorfile>
      <anchor>a15a934996782d8956dc467f7115f103d</anchor>
      <arglist>(VectorViewMut&lt; T &gt;) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::idx::adl::IdxBase</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1idx_1_1adl_1_1IdxBase.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::in_place_t</name>
    <filename>structtl_1_1in__place__t.html</filename>
    <member kind="function">
      <type></type>
      <name>in_place_t</name>
      <anchorfile>structtl_1_1in__place__t.html</anchorfile>
      <anchor>aca20ba43da1b8ebda434863a2f1cb7d4</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::incomplete_t</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1incomplete__t.html</filename>
    <templarg>typename... Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::meta_::IndexedToTuple</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1IndexedToTuple.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::meta_::IndexedToTuple&lt; tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1IndexedToTuple_3_01tuple_1_1IndexedTupe487541fa43c4281cd76feb4b9d3db73.html</filename>
    <templarg>usize... Is</templarg>
    <templarg>typename... Ts</templarg>
    <member kind="typedef">
      <type>Tuple&lt; Ts... &gt;</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1IndexedToTuple_3_01tuple_1_1IndexedTupe487541fa43c4281cd76feb4b9d3db73.html</anchorfile>
      <anchor>af2d0f3d80c9169f215f9e32e86008e7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::IndexedTuple</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple.html</filename>
    <templarg>typename ISeq</templarg>
    <templarg>typename... Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</filename>
    <templarg>usize... Is</templarg>
    <templarg>typename... Ts</templarg>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt;::_</type>
      <name>inner</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>a05d136d2fd34f91a139f45adf718e282</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedTuple</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>a442ddd0d2726b0a14c1815ee56a66f8a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>IndexedTuple</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>ae931e0c034a5bb6d7440cd2ca5488890</anchor>
      <arglist>(Tuplify, Ts... args) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>a2ef4bb478991868ea821f78f75519248</anchor>
      <arglist>((typename _, typename... Fns), requires(VEG_CONCEPT(same&lt; _, Tuplify &gt;) &amp;&amp;VEG_ALL_OF(VEG_CONCEPT(fn_once&lt; Fns, Ts &gt;))), VEG_INLINE constexpr IndexedTuple,(, InPlace&lt; _ &gt;),(... fns, Fns)) VEG_NOEXCEPT_IF(VEG_ALL_OF(VEG_CONCEPT(nothrow_fn_once&lt; Fns</arglist>
    </member>
    <member kind="function">
      <type>Ts</type>
      <name>VEG_FWD</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>aef1e5d8f80fc8ca68efc5bc10a620c61</anchor>
      <arglist>(fns)... }</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_EXPLICIT_COPY</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>aa095ca5f8af35c5f3652f6838ceef6af</anchor>
      <arglist>(IndexedTuple)</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>a7520a48f7f8c4318093712a38f29e408</anchor>
      <arglist>(constexpr) auto as_ref() const &amp;VEG_NOEXCEPT -&gt; Tuple&lt; Ref&lt; Ts &gt;... &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>aa9ed8fdc34d1eb5139d8ba4a28ef281d</anchor>
      <arglist>(constexpr) auto as_mut() VEG_NOEXCEPT -&gt; Tuple&lt; RefMut&lt; Ts &gt;... &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>a0c669d2ceeda0cc407ed2ece60e05b71</anchor>
      <arglist>(Fix&lt; I &gt;) const &amp;&amp;=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>a7158f16e2f388d6660f0aed8edcbd109</anchor>
      <arglist>((isize I), requires(static_cast&lt; usize &gt;(I)&lt; sizeof...(Ts)), VEG_NODISCARD VEG_INLINE VEG_CPP14(constexpr) auto operator[],(, Fix&lt; I &gt;)) &amp;&amp;VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_movable&lt; ith&lt; static_cast&lt; usize &gt;(I)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>ac675d248bfe5199c9c090782b44b3fe5</anchor>
      <arglist>((isize I), requires(static_cast&lt; usize &gt;(I)&lt; sizeof...(Ts)), VEG_NODISCARD VEG_INLINE VEG_CPP14(constexpr) auto operator[],(, Fix&lt; I &gt;)) &amp;VEG_NOEXCEPT -&gt; ith&lt; static_cast&lt; usize &gt;(I), Ts... &gt; &amp;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>a558a6dd39f27507b1cf9592aceac6d13</anchor>
      <arglist>((isize I), requires(static_cast&lt; usize &gt;(I)&lt; sizeof...(Ts)), VEG_NODISCARD VEG_INLINE VEG_CPP14(constexpr) auto operator[],(, Fix&lt; I &gt;)) const &amp;VEG_NOEXCEPT -&gt; ith&lt; static_cast&lt; usize &gt;(I), Ts... &gt; const &amp;</arglist>
    </member>
    <member kind="variable">
      <type>Ts</type>
      <name>__pad0__</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>a9c34cced31dd874114d96cb76f2932ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ts</type>
      <name>ith&lt; static_cast&lt; usize &gt;(I), Ts... &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1IndexedTuple_3_01meta_1_1index__sequence_3_01Is_8_8_8_01_4_00_01Ts_8_8_8_01_4.html</anchorfile>
      <anchor>aae56cc60931c55da9dd0f2b60e06ee51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::IndicesR</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1IndicesR.html</filename>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1IndicesR.html</anchorfile>
      <anchor>a332a6f19d65fcb8426f0de6f6b08d515</anchor>
      <arglist>() noexcept -&gt; isize</arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>current_col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1IndicesR.html</anchorfile>
      <anchor>a5cbbeee82141e402283cde1eee0533ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>current_r</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1IndicesR.html</anchorfile>
      <anchor>a37c55623bd6e514db75e4eeec13c33b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>r</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1IndicesR.html</anchorfile>
      <anchor>ad801b2478f3e611b55c3896860c8d02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize const  *</type>
      <name>indices</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1IndicesR.html</anchorfile>
      <anchor>a416d6daef72aab8824a321f83ff47222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::helpers::infinite_bound</name>
    <filename>structproxsuite_1_1helpers_1_1infinite__bound.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="function" static="yes">
      <type>static Scalar</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1helpers_1_1infinite__bound.html</anchorfile>
      <anchor>a13cef837efd744c9520374deee04f527</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::Info</name>
    <filename>structproxsuite_1_1proxqp_1_1Info.html</filename>
    <templarg>typename T</templarg>
    <member kind="variable">
      <type>T</type>
      <name>mu_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a397593a11b562b9a08d955b382379f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_eq_inv</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a287c6279bdfb819f2784ab90661c034a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>afb9315401922b834da45cdc9047fd108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_in_inv</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a1aa327f0a1835f9443dfeb7f8f690078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rho</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a1303e6faa7c57ebe2260847316e6c050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>nu</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a65eba15ed6784f568c0f8f230b2d8553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::isize</type>
      <name>iter</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a533b2bf01b5d34c824bc78e55e0b39dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::isize</type>
      <name>iter_ext</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>ab6ca13756f03d98715b3c635af73b76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::isize</type>
      <name>mu_updates</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a466db9dc030bf1ac2f5825a53087e781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::isize</type>
      <name>rho_updates</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>aba2b6e6a5e58f7c3d5196b9f10a8ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QPSolverOutput</type>
      <name>status</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a7ec030095d08febf145c54d46f34d51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>setup_time</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a1ea630aa751fdebf5ed1a6997ad85fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>solve_time</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>afe94c45d1916373672433a577df9a8e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>run_time</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a2a3e322479065c3b213a0d04d7f20b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>objValue</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a07f62fa33bce0780e78c082c4cb5d2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>pri_res</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a729ee967ad5ad5cb87233de2fc30514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dua_res</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a078039aabc1c7d6ffa5cddaf1982b789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>duality_gap</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a0e14fb903a5441b90b7da4d8947b4a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>iterative_residual</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a5d6312e02edaadaa21c096951759f688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparseBackend</type>
      <name>sparse_backend</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>a846f580dc75073ebe1e94e98702b7749</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>minimal_H_eigenvalue_estimate</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Info.html</anchorfile>
      <anchor>aa0e41293393ff9c51a5c0725d8d5ea24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::nb::infty_norm</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1nb_1_1infty__norm.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1nb_1_1infty__norm.html</anchorfile>
      <anchor>a48d47e6bbc3bce3992501cec076611c4</anchor>
      <arglist>(Eigen::MatrixBase&lt; D &gt; const &amp;mat) const -&gt; typename D::Scalar</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::nb::init_list</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1init__list.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1init__list.html</anchorfile>
      <anchor>a3a012e20bde2ca08545d21d16d340953</anchor>
      <arglist>(std::initializer_list&lt; T &gt; init_list) const noexcept -&gt; Slice&lt; T &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tags::InPlace</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tags_1_1InPlace.html</filename>
    <templarg>typename Tag</templarg>
    <member kind="function">
      <type></type>
      <name>InPlace</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tags_1_1InPlace.html</anchorfile>
      <anchor>adf49592925576578045875c58b90c1fd</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tags::InPlace&lt; void &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tags_1_1InPlace_3_01void_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>InPlace</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tags_1_1InPlace_3_01void_01_4.html</anchorfile>
      <anchor>ac1507b03f7e6d1d477ae08933ef954e6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tags_1_1InPlace_3_01void_01_4.html</anchorfile>
      <anchor>acafa766ab899e94261776709836571c1</anchor>
      <arglist>(Tag) const noexcept -&gt; InPlace&lt; Tag &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InPlace</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tags_1_1InPlace.html</anchorfile>
      <anchor>adf49592925576578045875c58b90c1fd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InPlace</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tags_1_1InPlace.html</anchorfile>
      <anchor>adf49592925576578045875c58b90c1fd</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::helpers::InstructionSet</name>
    <filename>structproxsuite_1_1helpers_1_1InstructionSet.html</filename>
    <member kind="typedef">
      <type>internal::InstructionSetBase</type>
      <name>Base</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>aa8d3ba27163badf0a82e633b54acf2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>vendor</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a8624802bfd7d8f414370904f14b5b14b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>brand</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a97545da6aafb3f32fbfa2c679577717b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SSE3</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a1684d13d74ccbcf40cbe989d8f03e8aa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_PCLMULQDQ</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ae2e95d1fe9443e81077ac11bf6a54056</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_MONITOR</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a1d8cf6687137a571ccb47904e9c8f282</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SSSE3</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a5129793e895487598800998c25847b3e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_FMA</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a09b688766dfe3efdd689be79b4e980f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_CMPXCHG16B</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a428871a9ac723934a9e1b08ef221040e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SSE41</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>aa025bcdc809bcfb4a2b1c1dec2f94a96</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SSE42</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a88bcb44fc969afa62b62493a94e903c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_MOVBE</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ad021d55fc4a4666c50471fd264f1a583</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_POPCNT</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ab524a70d58501375641b5942bee50c77</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AES</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a91a97ff7dbbb48dd8ff380ec33866fda</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_XSAVE</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a20b3a7074f47a0af60d813d4d4ed2041</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_OSXSAVE</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>abab8d0f6ee6dc6548fa3a9f37d7c6821</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ad6f262d01f49314ea6ad6d9e9975b71a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_F16C</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ad6d9052001f200828ab4366704777a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_RDRAND</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a31d37802f62ae9b8b660b262d3f156b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_MSR</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a20a067c46ff7fb3af6f3e2be672c2760</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_CX8</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>aa9da638c1bed6ffef322565c14193727</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SEP</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a8d40a1dae9d3d87b2a07c9340c8d810d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_CMOV</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a7a002ad1d907686a5fbb9f6f874c5e9d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_CLFSH</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a9a4e50b9482e837dd6d54f37291d9d15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_MMX</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a8d2be4b2f6d6478e62261dff6170e397</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_FXSR</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a97f02884e0050009e7a947760f5ff1c9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SSE</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a4d13efad4bfc9648377b1df3a0fe2f52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SSE2</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>afc088a3567fbfc1aebcf2f674ddd02c8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_FSGSBASE</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a56b92bedde335dd876e3b50c62cf1615</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX512VBMI</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ad791d2420df79825e41b4853709b621e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_BMI1</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a665ec7e68e6b3fffd396515105404f2e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_HLE</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ad63af43adcee7460a655f053c85bf3dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX2</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ab0c1a067e68cab796ef929d03625aeac</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_BMI2</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a3f1456feeb8ce6b6b7f48e2f4b9c8162</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_ERMS</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a4d302bb8d8749e36dd0149f52fdd02a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_INVPCID</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a85713cadf4a28b3e40fb3456983e429d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_RTM</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>af6616bcbf6e4ab6e125d58f157e9ee7a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX512F</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ad2b9809fd3c04d4279612e98276316c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX512DQ</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a583fd1a07d4a8642a4c08c6b814ad237</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_RDSEED</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a927598c49e49d327c90f704eda65758d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_ADX</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a1ba04a78be45af581bd0cb4e21b409e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX512IFMA</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a3858453647733b924589a3cb74ad9036</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX512PF</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a9f0425a3e2ae28ef456355ae863f7a3f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX512ER</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a5103108fd2a4960d074b17ad56d7b651</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX512CD</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a303ab45e0708514d0b874af1ddd02310</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SHA</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>af534e3d01283e3e237e38bba7c3609a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX512BW</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a814339b361f552bbedabad8413530a41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_AVX512VL</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a2796bae99f46ff0865049e7270ab4e92</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_PREFETCHWT1</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a47547c51f349763f9a7ca1ae61dd11aa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_LAHF</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a93fa6c596ff83c55084dd87152c01604</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_LZCNT</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>aa411f1b2bde41c6f5ec7fb40246bc3c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_ABM</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ae68eec6f2f1a8df3f3f103d428571b94</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SSE4a</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a606c38bba1688514a687fc98f11b135c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_XOP</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a5834c64200f63e3acb408d46ced5367f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_FMA4</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>af9ac8eeac85e9fb2968aeafe63226511</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_TBM</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a6e4af9ddc79aefa31ae1841f1430d715</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_SYSCALL</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a6d5dba89727ff351da8793a6e43ada58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_MMXEXT</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a3153f32b93bc612a5899f44ccd84df14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_RDTSCP</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>ad1b8874493237ab2943fda2fa4a7ee31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_x64</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>adaafbc7e0336c7d06e020d6e24d5b361</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_3DNOWEXT</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>adbe5d9556dfa3f7abb31f9a6247e20e9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_3DNOW</name>
      <anchorfile>structproxsuite_1_1helpers_1_1InstructionSet.html</anchorfile>
      <anchor>a6259e155c7673c5bd13b0456c7eca5b4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::integer_sequence</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1integer__sequence.html</filename>
    <templarg>typename T</templarg>
    <templarg>T... Nums</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::invoke_result_impl</name>
    <filename>structtl_1_1detail_1_1invoke__result__impl.html</filename>
    <templarg>class F</templarg>
    <templarg>class</templarg>
    <templarg>class... Us</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::invoke_result_impl&lt; F, decltype(detail::invoke(std::declval&lt; F &gt;(), std::declval&lt; Us &gt;()...), void()), Us... &gt;</name>
    <filename>structtl_1_1detail_1_1invoke__result__impl_3_01F_00_01decltype_07detail_1_1invoke_07std_1_1declvcbceb13962854eff875073298b31c9c4.html</filename>
    <templarg>class F</templarg>
    <templarg>class... Us</templarg>
    <member kind="typedef">
      <type>decltype(detail::invoke(std::declval&lt; F &gt;(), std::declval&lt; Us &gt;()...))</type>
      <name>type</name>
      <anchorfile>structtl_1_1detail_1_1invoke__result__impl_3_01F_00_01decltype_07detail_1_1invoke_07std_1_1declvcbceb13962854eff875073298b31c9c4.html</anchorfile>
      <anchor>afea7349afa1e4c3f7c48a59c5b66c5d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::swap_adl_tests::is_adl_swap_noexcept</name>
    <filename>structtl_1_1detail_1_1swap__adl__tests_1_1is__adl__swap__noexcept.html</filename>
    <templarg>class T</templarg>
    <templarg>class U</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::is_bounded_array</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1is__bounded__array.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::is_bounded_array&lt; T[N]&gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1is__bounded__array_3_01T_0fN_0e_4.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_complete</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__complete.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_complete&lt; T, bool_constant&lt; sizeof(T)==sizeof(T)&gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__complete_3_01T_00_01bool__constant1b5735d04e74f2f41e112a59109e1896.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_const</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__const.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_const&lt; T const &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__const_3_01T_01const_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::nb::is_consteval</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1nb_1_1is__consteval.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1nb_1_1is__consteval.html</anchorfile>
      <anchor>a0d1a7ba1c216826748129a0f07a7ab27</anchor>
      <arglist>() const noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_fix</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__fix.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_fix&lt; Fix&lt; N &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__fix_3_01Fix_3_01N_01_4_01_4.html</filename>
    <templarg>isize N</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_lvalue_reference</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__lvalue__reference.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_lvalue_reference&lt; T &amp; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__lvalue__reference_3_01T_01_6_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>tl::detail::is_nothrow_swappable</name>
    <filename>structtl_1_1detail_1_1is__nothrow__swappable.html</filename>
    <templarg>class T</templarg>
    <templarg>class U</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::is_optional_impl</name>
    <filename>structtl_1_1detail_1_1is__optional__impl.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::is_optional_impl&lt; optional&lt; T &gt; &gt;</name>
    <filename>structtl_1_1detail_1_1is__optional__impl_3_01optional_3_01T_01_4_01_4.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_pointer</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__pointer.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::type_identity&lt; T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_pointer&lt; T * &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__pointer_3_01T_01_5_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::type_identity&lt; T &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
    <base>proxsuite::linalg::veg::meta::type_identity&lt; T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_rvalue_reference</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__rvalue__reference.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::is_rvalue_reference&lt; T &amp;&amp; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1is__rvalue__reference_3_01T_01_6_6_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>tl::detail::swap_adl_tests::is_std_swap_noexcept</name>
    <filename>structtl_1_1detail_1_1swap__adl__tests_1_1is__std__swap__noexcept.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::swap_adl_tests::is_std_swap_noexcept&lt; T[N]&gt;</name>
    <filename>structtl_1_1detail_1_1swap__adl__tests_1_1is__std__swap__noexcept_3_01T_0fN_0e_4.html</filename>
    <templarg>class T</templarg>
    <templarg>std::size_t N</templarg>
    <base>tl::detail::swap_adl_tests::is_std_swap_noexcept&lt; T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>tl::detail::is_swappable</name>
    <filename>structtl_1_1detail_1_1is__swappable.html</filename>
    <templarg>class T</templarg>
    <templarg>class U</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::is_swappable&lt; T[N], T[N]&gt;</name>
    <filename>structtl_1_1detail_1_1is__swappable_3_01T_0fN_0e_00_01T_0fN_0e_4.html</filename>
    <templarg>class T</templarg>
    <templarg>std::size_t N</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cpo::is_trivially_constructible</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cpo_1_1is__trivially__constructible.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; Slice&lt; T &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cpo_1_1is__trivially__constructible_3_01Slice_3_01T_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cpo_1_1is__trivially__constructible_3_01tuple_1_1IndexedTupl14a1f264569e7350f37ed76ce13be4f5.html</filename>
    <templarg>usize... Is</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; tuple::Tuple&lt; Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cpo_1_1is__trivially__constructible_3_01tuple_1_1Tuple_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; Vec&lt; T, A &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cpo_1_1is__trivially__constructible_3_01Vec_3_01T_00_01A_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename A</templarg>
    <base>proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; A &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cpo::is_trivially_relocatable</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cpo_1_1is__trivially__relocatable.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cpo_1_1is__trivially__relocatable_3_01tuple_1_1IndexedTuple_1a5f170446885fa944e8403df425058d.html</filename>
    <templarg>usize... Is</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; tuple::Tuple&lt; Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cpo_1_1is__trivially__relocatable_3_01tuple_1_1Tuple_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; Vec&lt; T, A &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cpo_1_1is__trivially__relocatable_3_01Vec_3_01T_00_01A_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename A</templarg>
    <base>proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; A &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::meta_::is_tuple_helper</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1is__tuple__helper.html</filename>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>test</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1is__tuple__helper.html</anchorfile>
      <anchor>ab7a01995f671a1c886bdfc0550c5d7f1</anchor>
      <arglist>(void *) -&gt; NonTupleBaseInfoImpl</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>test</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1is__tuple__helper.html</anchorfile>
      <anchor>a9c75bc9b31fc5137337faaae5768961f</anchor>
      <arglist>(tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; *) -&gt; TupleBaseInfoImpl&lt; Ts... &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::nb::launder</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1launder.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb_1_1launder.html</anchorfile>
      <anchor>ad42d35dff3311513fc5cd0b26c1d5f02</anchor>
      <arglist>(typename T, requires(VEG_CONCEPT(complete&lt; T &gt;)), VEG_INLINE constexpr auto operator(),(mem, T *)) const VEG_NOEXCEPT -&gt; T *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::Layout</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Layout.html</filename>
    <member kind="variable">
      <type>usize</type>
      <name>byte_size</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Layout.html</anchorfile>
      <anchor>a420ae251112acc8dfaf601df6f331186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>usize</type>
      <name>align</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1Layout.html</anchorfile>
      <anchor>af6ac4bb1fd7948353fcc051c06d8875e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::Ldlt</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>Ldlt</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a791c35fd529339ffa1d865154e36c4f5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve_uninit</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>ace2c4bca793ee7cfe4e4d4f935840125</anchor>
      <arglist>(isize cap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a22e4e5a74fc14b2a4a4c9c76c30e4d0e</anchor>
      <arglist>(isize cap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_at</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a8e65dd62d1750dede2423fef05e0c7de</anchor>
      <arglist>(isize const *indices, isize r, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>choose_insertion_position</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a77bbf96d219141b47504bc96181f1d16</anchor>
      <arglist>(isize i, Eigen::Ref&lt; Vec const &gt; a) -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_block_at</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a943f6646c1f55fd37a8032f5828f823e</anchor>
      <arglist>(isize i, Eigen::Ref&lt; ColMat const &gt; a, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diagonal_update_clobber_indices</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a78ae7ec33fa3260fe5c5c68f554027a7</anchor>
      <arglist>(isize *indices, isize r, Eigen::Ref&lt; Vec const &gt; alpha, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rank_r_update</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a8fda40a23fb047e65620e53b0124fd30</anchor>
      <arglist>(Eigen::Ref&lt; ColMat const &gt; w, Eigen::Ref&lt; Vec const &gt; alpha, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dim</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a242edfddfb1cd15cc56180e53db7f00d</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ld_col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a1615052aa890c824e452c9142a73f146</anchor>
      <arglist>() const noexcept -&gt; Eigen::Map&lt; ColMat const, Eigen::Unaligned, Eigen::OuterStride&lt; DYN &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ld_col_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>ad31ce640d229a0571fb7c24fa83c9247</anchor>
      <arglist>() noexcept -&gt; Eigen::Map&lt; ColMat, Eigen::Unaligned, Eigen::OuterStride&lt; DYN &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ld_row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a7e18e2ae801f288f54d0cb31197f9f06</anchor>
      <arglist>() const noexcept -&gt; Eigen::Map&lt; RowMat const, Eigen::Unaligned, Eigen::OuterStride&lt; DYN &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ld_row_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>aac7c1a9073c9de0cacc50ccae42caf6f</anchor>
      <arglist>() noexcept -&gt; Eigen::Map&lt; RowMat, Eigen::Unaligned, Eigen::OuterStride&lt; DYN &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a52557b7d71a93deb930c3a3b87665efe</anchor>
      <arglist>() const noexcept -&gt; LView</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>l_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>acabb44ad2522f1b2b88eda3841155599</anchor>
      <arglist>() noexcept -&gt; LViewMut</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lt</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a60c19ebebae23ff5c93f4274d16ca0b5</anchor>
      <arglist>() const noexcept -&gt; LTView</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lt_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>ae6efb17f76fed57dab043f25bae63b04</anchor>
      <arglist>() noexcept -&gt; LTViewMut</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>d</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>ab173d194d1463a12449df4d00655d344</anchor>
      <arglist>() const noexcept -&gt; DView</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>d_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a7d08e0f055172d4ef38906483368d502</anchor>
      <arglist>() noexcept -&gt; DViewMut</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>p</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>af32ccd7d5e18659430e4ad08b10b78cb</anchor>
      <arglist>() const -&gt; Perm</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>pt</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a183831c0c1932d26314a7768d14a4ec9</anchor>
      <arglist>() const -&gt; Perm</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>aafb9d559bfcd8cf6748aac278b8ade43</anchor>
      <arglist>(Eigen::Ref&lt; ColMat const &gt; mat, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_in_place</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a8ffae854d050e593d9e7ac948471416d</anchor>
      <arglist>(Eigen::Ref&lt; Vec &gt; rhs, proxsuite::linalg::veg::dynstack::DynStackMut stack) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dual_solve_in_place</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a47e8bc610146cdfa3aa8ecac40217c5b</anchor>
      <arglist>(Eigen::Ref&lt; Vec &gt; rhs, isize n, proxsuite::linalg::veg::dynstack::DynStackMut stack) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dbg_reconstructed_matrix_internal</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a5755750aee18f3ba173ac7151a39bf19</anchor>
      <arglist>() const -&gt; ColMat</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dbg_reconstructed_matrix</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a720f987cb6b565fe9afbb9fc4646e9c7</anchor>
      <arglist>() const -&gt; ColMat</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>rank_r_update_req</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a7ce5aeb7d99fa64f8e92c8b4fa3d4ec6</anchor>
      <arglist>(isize n, isize r) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>delete_at_req</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a1409e588c166037b77665928b8f184e5</anchor>
      <arglist>(isize n, isize r) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>insert_block_at_req</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a119b5f8237c95f7d1b55d009a20c130d</anchor>
      <arglist>(isize n, isize r) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>diagonal_update_req</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>ae070b93ff0bcdf39b0a33ffbcbf89969</anchor>
      <arglist>(isize n, isize r) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>factorize_req</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a682647186c33e040c47646a3bde856f4</anchor>
      <arglist>(isize n) -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>solve_in_place_req</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1Ldlt.html</anchorfile>
      <anchor>a72c2a2db74739b66373c475efbce5ec7</anchor>
      <arglist>(isize n) -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::Ldlt</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1Ldlt.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>etree</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Ldlt.html</anchorfile>
      <anchor>a73593eee323c9f27a262c109f74bfb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>perm</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Ldlt.html</anchorfile>
      <anchor>af1ffa5108dbbef068a8e36e0951d4da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>perm_inv</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Ldlt.html</anchorfile>
      <anchor>a9c8279776d9033cac04946d53fc8d51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>col_ptrs</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Ldlt.html</anchorfile>
      <anchor>ab267e2aa1ad3d7716cfa8e6bb61bca06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>nnz_counts</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Ldlt.html</anchorfile>
      <anchor>a12e1462df13321aa765e742d493f0af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>row_indices</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Ldlt.html</anchorfile>
      <anchor>a65ce7978a94863c179fbf4e27e2fddf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; T &gt;</type>
      <name>values</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Ldlt.html</anchorfile>
      <anchor>a718326f9383a04953e0e95279ed5333f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::LdltView</name>
    <filename>structproxsuite_1_1proxqp_1_1LdltView.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>LdltView</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltView.html</anchorfile>
      <anchor>a8e3b383181d069bccbdf8defc3d09d39</anchor>
      <arglist>(MatrixView&lt; T, colmajor &gt; ld) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltView.html</anchorfile>
      <anchor>acb74d17ea4d95faf8ad5337ede9e4298</anchor>
      <arglist>() const noexcept -&gt; MatrixView&lt; T, colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>d</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltView.html</anchorfile>
      <anchor>a0072184927480e710bfe5c08a02f775a</anchor>
      <arglist>() const noexcept -&gt; StridedVectorView&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>head</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltView.html</anchorfile>
      <anchor>a671dc893263146c73638985765271237</anchor>
      <arglist>(isize k) const -&gt; LdltView</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>tail</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltView.html</anchorfile>
      <anchor>aee1fae36a8525a044b53042eb88024b8</anchor>
      <arglist>(isize k) const -&gt; LdltView</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::LdltViewMut</name>
    <filename>structproxsuite_1_1proxqp_1_1LdltViewMut.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>LdltViewMut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltViewMut.html</anchorfile>
      <anchor>a171f5cebd5058a41128fb806a7d6d5c8</anchor>
      <arglist>(MatrixViewMut&lt; T, colmajor &gt; ld) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltViewMut.html</anchorfile>
      <anchor>a83032ab115fd72d3d5db490faf1820f9</anchor>
      <arglist>() const noexcept -&gt; MatrixView&lt; T, colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>l_mut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltViewMut.html</anchorfile>
      <anchor>a0136a244979fb60c08a63a18fc7b0299</anchor>
      <arglist>() const noexcept -&gt; MatrixViewMut&lt; T, colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>d</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltViewMut.html</anchorfile>
      <anchor>a33701e8e869efd49342320278c51015d</anchor>
      <arglist>() const noexcept -&gt; StridedVectorView&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>d_mut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltViewMut.html</anchorfile>
      <anchor>a5bd44bc474869755232c68b63ae208a8</anchor>
      <arglist>() const noexcept -&gt; StridedVectorViewMut&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltViewMut.html</anchorfile>
      <anchor>a60306a36e76a7bb1bdc234595c609b44</anchor>
      <arglist>() const noexcept -&gt; LdltView&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>head</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltViewMut.html</anchorfile>
      <anchor>a2540798db7c143f343ab7dbffcad6a0b</anchor>
      <arglist>(isize k) const -&gt; LdltViewMut</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>tail</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1LdltViewMut.html</anchorfile>
      <anchor>aca29c95eea0410d8b566501824eeb5c8</anchor>
      <arglist>(isize k) const -&gt; LdltViewMut</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::make_signed</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned char &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01char_01_4.html</filename>
    <member kind="typedef">
      <type>signed char</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>aa9f3c7e4fc3def9c0c975d4ac00cb5f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned int &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01int_01_4.html</filename>
    <member kind="typedef">
      <type>signed int</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ac34771646207b548d15b14b8bc1211dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned long &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01long_01_4.html</filename>
    <member kind="typedef">
      <type>signed long</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a4e436a4dbb62717b3e1ffcef874a7c9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned long long &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01long_01long_01_4.html</filename>
    <member kind="typedef">
      <type>signed long long</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a8458c4c8960eeff4c4dabe7e9c2d174c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned short &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01short_01_4.html</filename>
    <member kind="typedef">
      <type>signed short</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1make__signed_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>a9f4223c993a7c2463d1eb67644171bf5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_mem::ManagedAlloc</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1ManagedAlloc.html</filename>
    <templarg>typename A</templarg>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>~ManagedAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1ManagedAlloc.html</anchorfile>
      <anchor>a69b6764ac5efdd9a721d509420e2b4ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1ManagedAlloc.html</anchorfile>
      <anchor>acfb78e38da6a0620761ca518624d1096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mem::Layout</type>
      <name>layout</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1ManagedAlloc.html</anchorfile>
      <anchor>a15f75e93e06bcad2e098f6692ac308cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RefMut&lt; A &gt;</type>
      <name>alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1ManagedAlloc.html</anchorfile>
      <anchor>a427fffafd8872a7c6d774448f1b32e7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::map</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1map.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1map.html</anchorfile>
      <anchor>a190694fcb7e16e50b182f40cae656e7d</anchor>
      <arglist>((typename Fn, typename... Ts, usize... Is), requires(VEG_ALL_OF(VEG_CONCEPT(fn_mut&lt; Fn, proxsuite::linalg::veg::meta::invoke_result_t&lt; Fn &amp;, Ts &amp;&amp; &gt;, Ts &amp;&amp; &gt;))), VEG_NODISCARD VEG_INLINE VEG_CPP14(constexpr) auto operator(),(args, IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ts... &gt; &amp;&amp;),(fn, Fn)) const VEG_NOEXCEPT_IF(VEG_ALL_OF(VEG_CONCEPT(nothrow_fn_mut&lt; Fn</arglist>
    </member>
    <member kind="variable">
      <type>Ts &amp;&amp;</type>
      <name>Tuple&lt; proxsuite::linalg::veg::meta::invoke_result_t&lt; Fn &amp;, Ts &amp;&amp; &gt;... &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1map.html</anchorfile>
      <anchor>adbcd528550e4299d994db235cd8ba47d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::map_i</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1map__i.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1map__i.html</anchorfile>
      <anchor>a0437e3170d2f18e5d431d0d84aeacdbf</anchor>
      <arglist>((typename Fn, typename... Ts, usize... Is), requires(VEG_ALL_OF(VEG_CONCEPT(fn_once&lt; inner_ith&lt; Fn &amp;, Is &gt;, proxsuite::linalg::veg::meta::invoke_result_t&lt; inner_ith&lt; Fn &amp;, Is &gt;, Ts &gt;, Ts &gt;))), VEG_NODISCARD VEG_INLINE VEG_CPP14(constexpr) auto operator(),(args, IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ts... &gt; &amp;&amp;),(fn, Fn)) const VEG_NOEXCEPT_IF(VEG_ALL_OF(VEG_CONCEPT(nothrow_fn_once&lt; inner_ith&lt; Fn &amp;</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Is</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1map__i.html</anchorfile>
      <anchor>ab55af50109a7a6c55879a656a6bc23b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ts</type>
      <name>Tuple&lt; proxsuite::linalg::veg::meta::invoke_result_t&lt; inner_ith&lt; Fn &amp;, Is &gt;, Ts &gt;... &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1map__i.html</anchorfile>
      <anchor>a95dfa1f81776b0918156b27b2849c76f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::MatMut</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <base>proxsuite::linalg::sparse::_detail::SymbolicMatMutInterface&lt; MatMut&lt; T, isize &gt;, isize &gt;</base>
    <member kind="function">
      <type></type>
      <name>MatMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a367bee4bce3facbda145a756d83bf984</anchor>
      <arglist>(FromRawParts, isize nrows, isize ncols, isize nnz, I *col_ptrs, I *nnz_per_col, I *row_indices, T *values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>aeafc7451198e8919e139b8047c6a6b21</anchor>
      <arglist>(FromEigen, M &amp;&amp;m)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>values</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a7e735e883acd22dcfb2937708d1e73b4</anchor>
      <arglist>() const noexcept -&gt; T const *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>values_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>abd39bbd1d5682ac7cbb9f69460febbf2</anchor>
      <arglist>() const noexcept -&gt; T *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>is_compressed</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a2ebfcca8061e9b96f21f496f889a46d7</anchor>
      <arglist>() const noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>ab6be84275ec2741962bdd5593629522e</anchor>
      <arglist>() const noexcept -&gt; MatRef&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>symbolic</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>aba25b0bd9f70f9319b75c26e8dba3faf</anchor>
      <arglist>() const noexcept -&gt; SymbolicMatRef&lt; I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>symbolic_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>af26de7d15d3075a254b52f72979fe004</anchor>
      <arglist>() const noexcept -&gt; SymbolicMatRef&lt; I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>adeb4108030ce869697e15160df1444b3</anchor>
      <arglist>() const noexcept -&gt; Eigen::Map&lt; Eigen::SparseMatrix&lt; T, Eigen::ColMajor, I &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_set_nnz</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a1d3850f4cd6d4c1c86d27b543c8e781f</anchor>
      <arglist>(isize new_nnz) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nrows</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>ab95be143651a361aad0b732d00f7939f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>ncols</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a499884273829510658cd9957f0e048a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nnz</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a22ec8ce541f57d254fbcb448e598fa26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I *</type>
      <name>col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a49716e6650fd07496bbf44cf2832dec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I *</type>
      <name>nnz_per_col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a2faaf8ca8bd36fcb6e2c00401f80c2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I *</type>
      <name>row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a8b0438dca952bf5b82ef1a792dcf10a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>val</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a825e88bae54a3119631d11a612141ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::SymbolicMatRefInterface&lt; MatMut, I &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>acdf64fc5bfbab294ed0bb41594679675</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::SymbolicMatMutInterface&lt; MatMut, I &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatMut.html</anchorfile>
      <anchor>a4449e1c377dffb99571d969375424867</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::MatRef</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <base>proxsuite::linalg::sparse::_detail::SymbolicMatRefInterface&lt; MatRef&lt; T, isize &gt;, isize &gt;</base>
    <member kind="function">
      <type></type>
      <name>MatRef</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>a858b7ca187d8979aa0e3a48621c3b327</anchor>
      <arglist>(FromRawParts, isize nrows, isize ncols, isize nnz, I const *col_ptrs, I const *nnz_per_col, I const *row_indices, T const *values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatRef</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>abf90acf7e57d2c5967577f1dca916374</anchor>
      <arglist>(FromEigen, M const &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>values</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>aaed8c50b2dde2dcaf4ad3c3db3a2afbd</anchor>
      <arglist>() const noexcept -&gt; T const *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>symbolic</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>a5ce35c5c428b8d9e699baee99efe03cf</anchor>
      <arglist>() const noexcept -&gt; SymbolicMatRef&lt; I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>a86b05910ad2497ab1661dd9f666e435d</anchor>
      <arglist>() const noexcept -&gt; Eigen::Map&lt; Eigen::SparseMatrix&lt; T, Eigen::ColMajor, I &gt; const &gt;</arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nrows</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>aac30c1e6b4538a49d28afe440df3b5b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>ncols</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>ad149a7d2acef023c8c20ed52ce4917dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nnz</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>af838e15e0af5615e6c1eefa532ecab40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I const  *</type>
      <name>col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>ac9a6b6d4d41bbc3f171af70ae656f7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I const  *</type>
      <name>nnz_per_col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>a6ab127a42ddd634a53fd1da20c0a656b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I const  *</type>
      <name>row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>a91af278578ec45f86a4463c3eddcebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>val</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>a8fb4082f508d656ecac1b4c43685b9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::SymbolicMatRefInterface&lt; MatRef, I &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1MatRef.html</anchorfile>
      <anchor>a83b818160b826eb8a0ab4aa724fdb2da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::MatrixView</name>
    <filename>structproxsuite_1_1proxqp_1_1MatrixView.html</filename>
    <templarg>typename T</templarg>
    <templarg>Layout L</templarg>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>MatrixView</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>a7bf2891716cd9935c7484f0c2902465b</anchor>
      <arglist>(FromPtrRowsColsStride, T const *_data, isize _rows, isize _cols, isize _outer_stride) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>adea772d781169e10827316e0dfa11f5e</anchor>
      <arglist>(typename Mat, requires(LDLT_CONCEPT(eigen_view&lt; Mat, T &gt;) &amp;&amp;eigen::GetLayout&lt; unref&lt; Mat &gt; &gt;::value==L), VEG_INLINE MatrixView,(, FromEigen),(mat, Mat const &amp;)) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>af83346e09a17a6a82c40e7fa57149d36</anchor>
      <arglist>(isize row, isize col) const noexcept -&gt; T const *</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>a03e47e31e71e072ad7709195a2aeb68f</anchor>
      <arglist>(isize row, isize col) const noexcept -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>block</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>a023830c74d924db8a7982cca2e7ba5e8</anchor>
      <arglist>(isize row, isize col, isize nrows, isize ncols) const noexcept -&gt; MatrixView</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>col</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>a91f640a0d6ed512202e83eb013ea7711</anchor>
      <arglist>(isize c) const noexcept -&gt; proxsuite::linalg::veg::meta::if_t&lt;(L==colmajor), VectorView&lt; T &gt;, StridedVectorView&lt; T &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>row</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>a9a4e8b024e45a2e4e3afcd50ab469be7</anchor>
      <arglist>(isize r) const noexcept -&gt; proxsuite::linalg::veg::meta::if_t&lt;(L==rowmajor), VectorView&lt; T &gt;, StridedVectorView&lt; T &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>trans</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>ab184c9195483217c5570830f5cd5144a</anchor>
      <arglist>() const noexcept -&gt; MatrixView&lt; T, proxqp::flip_layout(L)&gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>a29ea9370817a01ce738bc2ede07638b2</anchor>
      <arglist>() const noexcept -&gt; detail::EigenMatMap&lt; T, L &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>ade9de96e1a77b7278aeb9c6d610ea56e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>rows</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>ab83e5c6f447b57fbfa9ed4be76475486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>cols</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>a450d5afb4dfb88cfdc7e2f003ed77fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>outer_stride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixView.html</anchorfile>
      <anchor>a900ec68232bbadd8def8dfb1389ad2e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::MatrixViewMut</name>
    <filename>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</filename>
    <templarg>typename T</templarg>
    <templarg>Layout L</templarg>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>MatrixViewMut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>acadd022e0d31cbf3c01b12b46639195d</anchor>
      <arglist>(FromPtrRowsColsStride, T *_data, isize _rows, isize _cols, isize _outer_stride) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>a6333a31052961a7874ecd8baecf3a3e8</anchor>
      <arglist>(typename Mat, requires(LDLT_CONCEPT(eigen_view&lt; Mat, T &gt;) &amp;&amp;eigen::GetLayout&lt; unref&lt; Mat &gt; &gt;::value==L), VEG_INLINE MatrixViewMut,(, FromEigen),(mat, Mat &amp;&amp;)) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>afa46a79f8f12254e813a914fb7ab10fa</anchor>
      <arglist>(isize row, isize col) const noexcept -&gt; T *</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>a553977770ca33fc55cfbb9b6c6006adb</anchor>
      <arglist>(isize row, isize col) const noexcept -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>block</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>a8a76ac24285f58e23a43cddfa3083bca</anchor>
      <arglist>(isize row, isize col, isize nrows, isize ncols) const noexcept -&gt; MatrixViewMut</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>col</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>ab373b99efcd0e7847f8f69e1cbc42f56</anchor>
      <arglist>(isize c) const noexcept -&gt; proxsuite::linalg::veg::meta::if_t&lt;(L==colmajor), VectorViewMut&lt; T &gt;, StridedVectorViewMut&lt; T &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>row</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>a029812af528c1377fca9847ec62e7922</anchor>
      <arglist>(isize r) const noexcept -&gt; proxsuite::linalg::veg::meta::if_t&lt;(L==rowmajor), VectorViewMut&lt; T &gt;, StridedVectorViewMut&lt; T &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>trans</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>a6f2bfa539c14c4b26dd62a74e7a5bd41</anchor>
      <arglist>() const noexcept -&gt; MatrixViewMut&lt; T, proxqp::flip_layout(L)&gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>a75a540df691aaa4646a23196547a5f91</anchor>
      <arglist>() const noexcept -&gt; detail::EigenMatMapMut&lt; T, L &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>a77ea916379334f83071128ddc626c0e8</anchor>
      <arglist>() const noexcept -&gt; MatrixView&lt; T, L &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>a34f4c44d9bda8e71141cf38640152d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>rows</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>ad00afbd34bf1698750a98af45de40982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>cols</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>addb10aafa159d334ac6555847b965cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>outer_stride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1MatrixViewMut.html</anchorfile>
      <anchor>a7bf57ca1a97007f2ad7fb2ee2a2d5662</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::nb::max2</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1nb_1_1max2.html</filename>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1nb_1_1max2.html</anchorfile>
      <anchor>a492aa2c7986f92bde664ce0e835c411a</anchor>
      <arglist>(T const &amp;a, T const &amp;b) const -&gt; T const &amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::nb::max2</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1nb_1_1max2.html</filename>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1nb_1_1max2.html</anchorfile>
      <anchor>a51bb564052a114c6324ee6f49c4d4621</anchor>
      <arglist>(T const &amp;a, T const &amp;b) const -&gt; T const &amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::nb::max_list</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1nb_1_1max__list.html</filename>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1nb_1_1max__list.html</anchorfile>
      <anchor>afd7499d4ed0fb83905dc1d6f80f01260</anchor>
      <arglist>(std::initializer_list&lt; T &gt; list) const -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::mem_ptr_type</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1mem__ptr__type.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::mem_ptr_type&lt; Mem C::* &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1mem__ptr__type_3_01Mem_01C_1_1_5_01_4.html</filename>
    <templarg>typename C</templarg>
    <templarg>typename Mem</templarg>
    <member kind="typedef">
      <type>Mem</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1mem__ptr__type_3_01Mem_01C_1_1_5_01_4.html</anchorfile>
      <anchor>ae6802b92c9e2af19bb7c5fc162bd21c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_mem::member_addr</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1member__addr.html</filename>
    <member kind="typedef">
      <type>decltype(void(VEG_DECLVAL(T &amp;).operator&amp;()))</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1member__addr.html</anchorfile>
      <anchor>a6282848d5804892a0d3931c17ae235b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>apply</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem_1_1member__addr.html</anchorfile>
      <anchor>a366bb8233d7b4007af06d852b1a7c0c1</anchor>
      <arglist>(T &amp;var) VEG_NOEXCEPT -&gt; T *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::member_extract_access</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access.html</filename>
    <templarg>typename T</templarg>
    <class kind="struct">proxsuite::linalg::veg::_detail::member_extract_access::DetectImpl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::member_extract_access::DetectImpl&lt; U, typename U::_veglib_impl_member_extract::Type &gt;</class>
    <member kind="typedef">
      <type>DetectImpl&lt; T &gt;</type>
      <name>Detect</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access.html</anchorfile>
      <anchor>aab10fdb5440853e59663ecf9505cefb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Detect::Type</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access.html</anchorfile>
      <anchor>a62ae6f4c40c5299bc4fe2301a5f711dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1member__extract__access.html</anchorfile>
      <anchor>aa662e9895196e80145eaba5b396b398c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::member_get</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1member__get.html</filename>
    <member kind="typedef">
      <type>decltype(VEG_DECLVAL(T &amp;&amp;).template get&lt; I::value &gt;())</type>
      <name>result_type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1member__get.html</anchorfile>
      <anchor>a617efb9c2805f0a1004e3aab250c9bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE constexpr auto</type>
      <name>apply</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1member__get.html</anchorfile>
      <anchor>aef08daf05362d20f8548f96553884928</anchor>
      <arglist>(T &amp;&amp;arg) VEG_DEDUCE_RET(VEG_FWD(arg).template get&lt; I &gt;())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_cpo::member_trait_and</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__cpo_1_1member__trait__and.html</filename>
    <templarg>template&lt; typename &gt; class Trait</templarg>
    <templarg>typename Tuple</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_cpo::member_trait_and&lt; Trait, SimpleITuple&lt; _meta::integer_sequence&lt; usize, Is... &gt;, Ts Bases::*... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__cpo_1_1member__trait__and_3_01Trait_00_01Simplc5b492ef828350d9630bf5ebc812c047.html</filename>
    <templarg>template&lt; typename &gt; class Trait</templarg>
    <templarg>usize... Is</templarg>
    <templarg>typename... Bases</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::meta_apply</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1meta__apply.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <member kind="typedef">
      <type>F&lt; Ts... &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1meta__apply.html</anchorfile>
      <anchor>af834a4ea5024f84bad2835f3bcb9614f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::nb::min2</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1nb_1_1min2.html</filename>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1nb_1_1min2.html</anchorfile>
      <anchor>ab03b09affadae51fdb525d470b486fa5</anchor>
      <arglist>(T a, T b) const -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::nb::min2</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1nb_1_1min2.html</filename>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1nb_1_1min2.html</anchorfile>
      <anchor>a7902b5d598c9725317b2a918a3761e02</anchor>
      <arglist>(T a, T b) const -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::alignment::detail::min_size</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1alignment_1_1detail_1_1min__size.html</filename>
    <templarg>std::size_t A</templarg>
    <templarg>std::size_t B</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::Model</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>aaf1de0726bca716839093132ea3e948b</anchor>
      <arglist>(isize dim, isize n_eq, isize n_in, bool box_constraints=false)</arglist>
    </member>
    <member kind="function">
      <type>proxsuite::proxqp::sparse::SparseModel&lt; T &gt;</type>
      <name>to_sparse</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>aab18fd6fc7f3e83bbf907f30270ca80c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>af753e44fc1df7338d9c8475c402b1f9a</anchor>
      <arglist>(const bool box_constraints)</arglist>
    </member>
    <member kind="variable">
      <type>Mat&lt; T &gt;</type>
      <name>H</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>a420a3bc7af86f6eaf6584f3f6b163e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>aab44afb08fed7665a9a1b6b76123bc2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat&lt; T &gt;</type>
      <name>A</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>a2faa69ae13a95d134f8f55e50935486b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat&lt; T &gt;</type>
      <name>C</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>ab9585ea151d2a15be6a672b2204f67a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>a35143abc2bf2a3dc4d4d0030376f00d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>u</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>ab44246d2c5fd3b5bf19e1cfd6e556456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>a1e83a4aff28b7e6f81ecb962afaa6166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>u_box</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>a32ef32c48b6caa956b9655226f848b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>l_box</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>a10bda062a18c3658fe7e79dae7f60979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>dim</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>a65cc80eafcd5a5c9aadca68c427e2869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>ad990a0ddc1463ba309338c1aa49189a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>ab80dc12d7baf60a2e8f268fada47d6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n_total</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>a73cbc3d2d1bb59f5b6ee8a573ac29baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BackwardData&lt; T &gt;</type>
      <name>backward_data</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Model.html</anchorfile>
      <anchor>a8f0a041ef2d9d4efff933be4691da699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::Model</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Scalar</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a3924f351411dd0faf9a0eea3fdf6bbb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a3c8c94f5f57b49f93bf8e04b6513d0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a4f1308d44e64fec328d7e72c4e572661</anchor>
      <arglist>(isize dim, isize n_eq, isize n_in)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>kkt</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>ad220943707b391c8d64b6bfc912964e5</anchor>
      <arglist>() const -&gt; proxsuite::linalg::sparse::MatRef&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>kkt_mut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a6a5516c2b4375fa0aecb5c483cc45ee1</anchor>
      <arglist>() -&gt; proxsuite::linalg::sparse::MatMut&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>kkt_unscaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a039a0f62cf6e950905b340bc312c0ee6</anchor>
      <arglist>() const -&gt; proxsuite::linalg::sparse::MatRef&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>kkt_mut_unscaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a8e7982de73ce55e68a3610875658fb00</anchor>
      <arglist>() -&gt; proxsuite::linalg::sparse::MatMut&lt; T, I &gt;</arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>dim</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a2d31aa03005625ee9ac456d341f22bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a22a4c6e9c3b592e4b2f762a10740cc2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>ace47b5db487e1ac33f06e4c4ecc7c951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>H_nnz</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a8dd6ac943bc23e8400f0c46ee543e455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>A_nnz</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a3025b400e6cd380a50c445723517a8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>C_nnz</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a1e23b1e9c061a084d299e0817d4da82d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>kkt_col_ptrs</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a096e89dfa9a2e33811ed01bb39d8f9ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>kkt_row_indices</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>ae6956bda76da82b1306b3c4b9515859b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; T &gt;</type>
      <name>kkt_values</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a319ccb123d7c097e77eea38f6a957c51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>kkt_col_ptrs_unscaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>af52f24d741a5aa3a8d9e0679248a6bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>kkt_row_indices_unscaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a51780ce6a53b00a68cd04235f0cb9e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; T &gt;</type>
      <name>kkt_values_unscaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a656a16dfe6ca607d4b89d0ebe92e6832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>ae2004296126d404822e242bf5ea6f243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a14d3f7392eb315ed1f2a430076163738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>a4b479fe03e53cb9503459b93188e6700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>u</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Model.html</anchorfile>
      <anchor>ad2bbb5aba5a312b92e64192df36be6d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::monostate</name>
    <filename>classtl_1_1monostate.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::MonotonicAlloc</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1MonotonicAlloc.html</filename>
    <templarg>usize MaxAlign</templarg>
    <base protection="private">proxsuite::linalg::veg::mem::BumpAlloc&lt; MaxAlign &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::MoveFn</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1MoveFn.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>MoveFn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1MoveFn.html</anchorfile>
      <anchor>a52d88bd0e28703d8ce61a21d03663948</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1MoveFn.html</anchorfile>
      <anchor>a9341652ecc2541ec2422a752957825e0</anchor>
      <arglist>() const &amp;&amp;VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_movable&lt; T &gt;)) -&gt; T</arglist>
    </member>
    <member kind="variable">
      <type>T &amp;&amp;</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1MoveFn.html</anchorfile>
      <anchor>ac7709a76533ddba4bf2c64f0006e2404</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::nb::mut</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1mut.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1mut.html</anchorfile>
      <anchor>a1944a1f35b4d2d3f0bf02f0e606e613d</anchor>
      <arglist>(typename T, requires(!VEG_CONCEPT(const_type&lt; meta::unref_t&lt; T &gt; &gt;)), constexpr auto operator(),(r, T &amp;&amp;)) const noexcept -&gt; RefMut&lt; meta::uncvref_t&lt; T &gt; &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::nb::narrow</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1narrow.html</filename>
    <templarg>typename To</templarg>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1narrow.html</anchorfile>
      <anchor>a2a5dd6fd05c203d14af37d7dbd5acf52</anchor>
      <arglist>((typename From), requires VEG_CONCEPT(integral&lt; From &gt;) &amp;&amp;VEG_CONCEPT(integral&lt; To &gt;), constexpr auto operator(),(from, From)) const VEG_NOEXCEPT -&gt; To</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::_simd::NativePackInfo</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1NativePackInfo.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>Pack&lt; f32, N &gt;</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1NativePackInfo.html</anchorfile>
      <anchor>a379b12eee5b1d3e94e6db8cad83e2dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr usize</type>
      <name>N</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1NativePackInfo.html</anchorfile>
      <anchor>a00cbdf21a374d7c0d29c2af6009773ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_dynstack::no_init_fn</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1no__init__fn.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>make</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1no__init__fn.html</anchorfile>
      <anchor>a3ac5ce069e47a7a65432a367116d68d5</anchor>
      <arglist>(void *ptr, isize len) -&gt; T *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::NoCopy</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1NoCopy.html</filename>
    <member kind="function">
      <type></type>
      <name>NoCopy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>a40de1a5c68654aebf8531ceacb803def</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoCopy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>aea58b11a4a2124dea0ddd0c1daf386b2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>a9ca3f138d4fa62e7107040e80a237cfd</anchor>
      <arglist>(NoCopy const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>a9c046cd5b0249eb3ae9e94a61814b378</anchor>
      <arglist>(NoCopy &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>ae71c3d867895be9d0e67627658df1b9b</anchor>
      <arglist>(NoCopy const &amp;) -&gt; NoCopy &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>acbc479edcba8acc4a881ce055c969855</anchor>
      <arglist>(NoCopy &amp;&amp;) -&gt; NoCopy &amp;=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::NoCopy</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopy.html</filename>
    <member kind="function">
      <type></type>
      <name>NoCopy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>aa69b44960b330d2d5287a767e4a4ea35</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoCopy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>aad15ce6a3cbcfca8c1ebdb1a42473b7f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>a9bcd53ea40e6d9a3ed654847f6f17b8e</anchor>
      <arglist>(NoCopy const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopy</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>a24266da19138d01434ef45aacf03b505</anchor>
      <arglist>(NoCopy &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>ab4b2aedd926504f2162204ea281ac0f5</anchor>
      <arglist>(NoCopy const &amp;) -&gt; NoCopy &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopy.html</anchorfile>
      <anchor>a40354d9560b5d5e80c8e0524ebdef848</anchor>
      <arglist>(NoCopy &amp;&amp;) -&gt; NoCopy &amp;=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::NoCopy</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1NoCopy.html</filename>
    <member kind="function">
      <type></type>
      <name>NoCopy</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1NoCopy.html</anchorfile>
      <anchor>a1dab8d679bc15c5d04d135bc7aa0d89b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoCopy</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1NoCopy.html</anchorfile>
      <anchor>afbd39ebe8e2f943fcb9f136abeec67a8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopy</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1NoCopy.html</anchorfile>
      <anchor>ab06e37d079a0f611ace955b0e6ef4b35</anchor>
      <arglist>(NoCopy const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopy</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1NoCopy.html</anchorfile>
      <anchor>a5c478c9a26d8eee3bacb4500b7c6e141</anchor>
      <arglist>(NoCopy &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1NoCopy.html</anchorfile>
      <anchor>af7e19392e08a1f4ed214799f4485d196</anchor>
      <arglist>(NoCopy const &amp;) -&gt; NoCopy &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1NoCopy.html</anchorfile>
      <anchor>ac648138e938975109ea0a06044ad0237</anchor>
      <arglist>(NoCopy &amp;&amp;) -&gt; NoCopy &amp;=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::NoCopyAssign</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyAssign.html</filename>
    <member kind="function">
      <type></type>
      <name>NoCopyAssign</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyAssign.html</anchorfile>
      <anchor>a52d727094c13a03c11d103cca4b514ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoCopyAssign</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyAssign.html</anchorfile>
      <anchor>a5525495cd41a4352f4a99da21354f37c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopyAssign</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyAssign.html</anchorfile>
      <anchor>a510a1eaee822eb9f71c7de40a115c81e</anchor>
      <arglist>(NoCopyAssign const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopyAssign</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyAssign.html</anchorfile>
      <anchor>ae15f5be1a7c5a3b92758998dc206fa27</anchor>
      <arglist>(NoCopyAssign &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyAssign.html</anchorfile>
      <anchor>a067a61f8332f0495a28401103aca86ed</anchor>
      <arglist>(NoCopyAssign const &amp;) -&gt; NoCopyAssign &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyAssign.html</anchorfile>
      <anchor>a66537b743f7c6a34302d581fa4b6ec1c</anchor>
      <arglist>(NoCopyAssign &amp;&amp;) -&gt; NoCopyAssign &amp;=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::NoCopyCtor</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyCtor.html</filename>
    <member kind="function">
      <type></type>
      <name>NoCopyCtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyCtor.html</anchorfile>
      <anchor>adbc11f3feba108f2871561365aa0b942</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoCopyCtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyCtor.html</anchorfile>
      <anchor>a50385c95b651614a18eabda41734b700</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopyCtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyCtor.html</anchorfile>
      <anchor>abcee3ea4cfbb96b85128891616aae223</anchor>
      <arglist>(NoCopyCtor const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCopyCtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyCtor.html</anchorfile>
      <anchor>a2a295f510d0197b5db435fbc170f995d</anchor>
      <arglist>(NoCopyCtor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyCtor.html</anchorfile>
      <anchor>ae7db93171286647da1606d851fedb019</anchor>
      <arglist>(NoCopyCtor const &amp;) -&gt; NoCopyCtor &amp;=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoCopyCtor.html</anchorfile>
      <anchor>ad521ae739a8a9a5d5585b95ed392ab40</anchor>
      <arglist>(NoCopyCtor &amp;&amp;) -&gt; NoCopyCtor &amp;=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::NoDefaultCtor</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoDefaultCtor.html</filename>
    <member kind="function">
      <type></type>
      <name>NoDefaultCtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoDefaultCtor.html</anchorfile>
      <anchor>a5499fba51bf67c8cfda3685ae02f33e5</anchor>
      <arglist>()=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::NoMove</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMove.html</filename>
    <member kind="function">
      <type></type>
      <name>NoMove</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMove.html</anchorfile>
      <anchor>ae54027c173aba91063e168cde94baa3c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoMove</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMove.html</anchorfile>
      <anchor>ac8d2d4ffddb402363088303c09bf50eb</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoMove</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMove.html</anchorfile>
      <anchor>af2098483610385e88ecdbca06d2a8d3e</anchor>
      <arglist>(NoMove const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoMove</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMove.html</anchorfile>
      <anchor>ade246ff9b139dd3d94810376d1eaad8c</anchor>
      <arglist>(NoMove &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMove.html</anchorfile>
      <anchor>a8f615253f291efcb816a77ffc80c3ed5</anchor>
      <arglist>(NoMove const &amp;) -&gt; NoMove &amp;=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMove.html</anchorfile>
      <anchor>a79183c343a2b5e26acec6b8a995cef83</anchor>
      <arglist>(NoMove &amp;&amp;) -&gt; NoMove &amp;=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::NoMoveAssign</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveAssign.html</filename>
    <member kind="function">
      <type></type>
      <name>NoMoveAssign</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveAssign.html</anchorfile>
      <anchor>a071e77235cee4da1a8b5bcf130051e86</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoMoveAssign</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveAssign.html</anchorfile>
      <anchor>a2cb28263f0129321c2efbdf9310c9bfb</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoMoveAssign</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveAssign.html</anchorfile>
      <anchor>a1e347ff2c658ef78e1202c6f42ee0ca7</anchor>
      <arglist>(NoMoveAssign const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoMoveAssign</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveAssign.html</anchorfile>
      <anchor>a126c0dee6238378d315d8b77787b2c36</anchor>
      <arglist>(NoMoveAssign &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveAssign.html</anchorfile>
      <anchor>a781ac733ba5c81e0b677398f23f31b74</anchor>
      <arglist>(NoMoveAssign const &amp;) -&gt; NoMoveAssign &amp;=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveAssign.html</anchorfile>
      <anchor>a765196ed3b9a20444abe30ef9c42abe8</anchor>
      <arglist>(NoMoveAssign &amp;&amp;) -&gt; NoMoveAssign &amp;=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::NoMoveCtor</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveCtor.html</filename>
    <member kind="function">
      <type></type>
      <name>NoMoveCtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveCtor.html</anchorfile>
      <anchor>a0fdc2e8cbdc4f0ef3679df1e936ffdab</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoMoveCtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveCtor.html</anchorfile>
      <anchor>ae6274f526b51ddad1fed549803276830</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoMoveCtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveCtor.html</anchorfile>
      <anchor>a957f01c3781f85c64cb3c80f88f5a9d5</anchor>
      <arglist>(NoMoveCtor const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoMoveCtor</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveCtor.html</anchorfile>
      <anchor>a553fb67684adbb7d15055439ee86b3b8</anchor>
      <arglist>(NoMoveCtor &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveCtor.html</anchorfile>
      <anchor>a09160f974249ee371d1c95f9ad06a1d4</anchor>
      <arglist>(NoMoveCtor const &amp;) -&gt; NoMoveCtor &amp;=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1NoMoveCtor.html</anchorfile>
      <anchor>a48544c9826107ec2ceb850bd75fab87e</anchor>
      <arglist>(NoMoveCtor &amp;&amp;) -&gt; NoMoveCtor &amp;=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::none</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1none.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::none_found</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1none__found.html</filename>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1none__found.html</anchorfile>
      <anchor>ab8af5a53e92213af77c3eca116d9be41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::meta_::NonTupleBaseInfoImpl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1NonTupleBaseInfoImpl.html</filename>
    <member kind="typedef">
      <type>void</type>
      <name>ith</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1NonTupleBaseInfoImpl.html</anchorfile>
      <anchor>a149006302aa720a9720d232a8f7ed255</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>seq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1NonTupleBaseInfoImpl.html</anchorfile>
      <anchor>aabd85217c64e1ce120bc04a79f036854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_tuple</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1NonTupleBaseInfoImpl.html</anchorfile>
      <anchor>aaa9b0aacd73b0f6dd3caeb5be0e4b938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr usize</type>
      <name>size</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1NonTupleBaseInfoImpl.html</anchorfile>
      <anchor>af69b2dbb758682f59cfbf5fe385444da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::detail::nullopt_instance</name>
    <filename>structproxsuite_1_1detail_1_1nullopt__instance.html</filename>
    <templarg>typename T</templarg>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>instance</name>
      <anchorfile>structproxsuite_1_1detail_1_1nullopt__instance.html</anchorfile>
      <anchor>ac6a905f061dad6fe4b751a489013d17f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::nullopt_t</name>
    <filename>structtl_1_1nullopt__t.html</filename>
    <class kind="struct">tl::nullopt_t::do_not_use</class>
    <member kind="function">
      <type>constexpr</type>
      <name>nullopt_t</name>
      <anchorfile>structtl_1_1nullopt__t.html</anchorfile>
      <anchor>a8e07c7ae84ce1a04c86f5452973b5eb0</anchor>
      <arglist>(do_not_use, do_not_use) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::alignment::detail::offset_value</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1alignment_1_1detail_1_1offset__value.html</filename>
    <templarg>class T</templarg>
    <member kind="variable">
      <type>char</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1alignment_1_1detail_1_1offset__value.html</anchorfile>
      <anchor>a5ea9e5868429500e9900fc7a9a06411d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>object</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1alignment_1_1detail_1_1offset__value.html</anchorfile>
      <anchor>a45bb66bbad21085ae3f7729480c8f922</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::optional</name>
    <filename>classtl_1_1optional.html</filename>
    <templarg>class T</templarg>
    <base protection="private">tl::detail::optional_move_assign_base&lt; T, bool &gt;</base>
    <base protection="private">tl::detail::optional_delete_ctor_base&lt; T, EnableCopy, EnableMove &gt;</base>
    <base protection="private">tl::detail::optional_delete_assign_base&lt; T, EnableCopy, EnableMove &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a085157c1b81e3f87abb5b865380d56d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0b28361aeaf04ee9c00824d0860610ae</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, T &amp;&amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a8b95caa938ab7ecf8c2f8d2ef8375bdf</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::invoke_result_t&lt; F, const T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab3ec2ddcac5b4e152561bb631a49029f</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::invoke_result_t&lt; F, const T &amp;&amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a81947503aacb7fb1d484d00f26a74832</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>acefe118593a4a6820cae40be34e240b5</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(optional_map_impl(std::declval&lt; optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a227e4d0f4660759edf1a027e3923ccfd</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(optional_map_impl(std::declval&lt; const optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a081d444e83ec3953124c37ceb241adbe</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(optional_map_impl(std::declval&lt; const optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0f5a33e44efa1be901adfc82b591d655</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a5f4f3a4bc83725003bde5e868550a395</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(optional_map_impl(std::declval&lt; optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a56e233cc76551c5561a07f2e1bbbd908</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(optional_map_impl(std::declval&lt; const optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a6d47e3acb61588c7d45fa64ccee8005c</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(optional_map_impl(std::declval&lt; const optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af7a9f9371cbb4373e1875a9cac366337</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af6a43ff80a8ab7859b125948f18ee213</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af6a43ff80a8ab7859b125948f18ee213</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ad87cf06d578397620b120e1f3bbef002</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ae2360b6502f1aeb3d519d73034a77916</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a820c3845356b1afd0bfaca13bf4210de</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af8e1ce5a1351d3115960e8540b42ac0a</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a543cfbc1c7a650fdb325177540d4a108</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a543cfbc1c7a650fdb325177540d4a108</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac6b57a596068ba148281b238851ca5e0</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a7d04b3a05a87f0e62238a46eba056da5</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a1f3bd8a5a41f805eeaab67a7fda54a9a</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a757b1c8a856ea4245595db19563d78f4</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a9c0723f87bc39ce4e5937a7bd97b6bf8</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aee37e446cfd13a7af8ac9682d7b639f1</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a790b9c7e488ec9433701ed94cff367b4</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a05c8d77db2975407f4385badbcfa177e</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab1b587e2a702319ef2dd50a46d5942d1</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a1158c78f39a9928eb943c6bf76ad8883</anchor>
      <arglist>(const optional &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a03075967b32fbe8861b59c9129187056</anchor>
      <arglist>(const optional &amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a09434d378ff22cde57b9d804553b7285</anchor>
      <arglist>(const optional &amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac6aedfa136d588ab48ade811eef9b3d3</anchor>
      <arglist>(const optional &amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a7f0b268bde1c5dcab588ff5d6f91f085</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a3147c4f871535cd63f80123790ec4960</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af174db26b73fc668779544093d25253f</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a922f154e66c650cbc8eab12801bdfca3</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aa8bee2264e91f5c24a7faa52b7195918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a01ad4287b5186f3e2d4973bd92fe15f1</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0fd08f91c8418d4f38fd460ba3880f5d</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0d1208c24613b8cd6b406469be15b208</anchor>
      <arglist>(const optional &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a75613038a7fb68f79df5fbb2be1f49b0</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a42210dafa99c06aa79be0d2f62221aa4</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; T, Args... &gt;::value, in_place_t &gt;, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a61618063b2d66b083cda3125aca3f3e3</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; T, std::initializer_list&lt; U &gt; &amp;, Args &amp;&amp;... &gt;::value, in_place_t &gt;, std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aab200292e5fdaaf2de21d867567e0660</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aab200292e5fdaaf2de21d867567e0660</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a2ea501771bdba573527123456953059a</anchor>
      <arglist>(const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a2ea501771bdba573527123456953059a</anchor>
      <arglist>(const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab25270f499c2ae2f8fb8815360f3ecfa</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab25270f499c2ae2f8fb8815360f3ecfa</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a8099c8b0d18941682ce9009f96f25e9a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ad56d1a3b7e01e57fa9d9bd84b14ddac3</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac9a3d1950de023f0cb4b44db43161421</anchor>
      <arglist>(const optional &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a1f20f006b4e03a34fb99db213d3a2d3c</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a494bab9e94b7cc2a63c13539f850a69b</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab216e67ae107403e9742f03e38b1643b</anchor>
      <arglist>(const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aaaba35aeec687c36bf4f0d3c333b584e</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>emplace</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a13b2f5427cd494e5da2e655954da7c5a</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>detail::enable_if_t&lt; std::is_constructible&lt; T, std::initializer_list&lt; U &gt; &amp;, Args &amp;&amp;... &gt;::value, T &amp; &gt;</type>
      <name>emplace</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a85d3cba68d2e56689b5648456bf381bd</anchor>
      <arglist>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a78123e13c4a3391120f657cd66e5fdbf</anchor>
      <arglist>(optional &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;detail::is_nothrow_swappable&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a59de2e5bc12b19963b1157d343b4ea70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a3b3e8211139058f3f923c648aff6818a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0ce158d04b1eb21ea4248c476ce53b92</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a8a819cfb7b261d6342f1b0c97a573ac8</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab23e58b15db7f4bc8c3f0df724ceb7f3</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac42195e4372f0a6d6a7ad1f7bd94d3e0</anchor>
      <arglist>() const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a333580f6b47bc3e4a8526c66c5bd20ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a57f5cf865d278a19c4fb16eb1fbef3b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a2baaba780785b36fe1eec5eee9e5df9c</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR const T &amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a8fd99184ea345d309392ae9788ad216a</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;&amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0bfe2bd124bb5eeb02c2716025ccba81</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR const T &amp;&amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a16375e792b3d27f5faae3252002b39d8</anchor>
      <arglist>() const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a98f4ae7eb6ac265c1137aa6f03e4a2b0</anchor>
      <arglist>(U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T</type>
      <name>value_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a7da77225c9c620b2c75902b5dd2a06d1</anchor>
      <arglist>(U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac235a23b19976d16d4cdc467a02e38d8</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::optional&lt; T &amp; &gt;</name>
    <filename>classtl_1_1optional_3_01T_01_6_01_4.html</filename>
    <templarg>class T</templarg>
    <base protection="private">tl::detail::optional_move_assign_base&lt; T, bool &gt;</base>
    <base protection="private">tl::detail::optional_delete_ctor_base&lt; T, EnableCopy, EnableMove &gt;</base>
    <base protection="private">tl::detail::optional_delete_assign_base&lt; T, EnableCopy, EnableMove &gt;</base>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>value_type</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a72bdf98bc62af48dcb6a8da86c976719</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a085157c1b81e3f87abb5b865380d56d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a6c339f3b244efa1915efd31d824b9d25</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>afab0bbad9d5025c007691e634a3b8122</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::invoke_result_t&lt; F, const T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a221eda7cfc7ca73224ef8b88b2a2e281</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::invoke_result_t&lt; F, const T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a20d706c050e1e69b26885bd1203ffc36</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(detail::optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>aab23c909d6f40bea598067c9926e616e</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(detail::optional_map_impl(std::declval&lt; optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a1d65bba1759caefac0f0ec2a2b81a79f</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(detail::optional_map_impl(std::declval&lt; const optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a89af83d4a871499fbf5b1bc6ad662cef</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(detail::optional_map_impl(std::declval&lt; const optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a42f632ba51e9af57af7f1767599293a6</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(detail::optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a6f200fa7776df47ac73d8b0347b2f056</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(detail::optional_map_impl(std::declval&lt; optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a8e03ceab5c8062e270aa0608a2ed1cfc</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(detail::optional_map_impl(std::declval&lt; const optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a48ee9667c8d19b0771665466fb6c6913</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(detail::optional_map_impl(std::declval&lt; const optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a39782dbf7086cb7a3aba3d36db43eca1</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a3a1dc74f91d1b8ab74428adbd82ffa92</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a3a1dc74f91d1b8ab74428adbd82ffa92</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a8d93609fd9d900c63533630d4d8a6c05</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ac93162f9fe2802e295f88e7b715e2106</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a7d533400da1feb001d480170ce4659ff</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a8a7a644eedb6b6c5647ac728294f7726</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>afc5dac21f4c3776332206dc5af6c1227</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>afc5dac21f4c3776332206dc5af6c1227</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>acc964d3653b89ec655baaff461d4a9c2</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>aa58a2cc1910852214eab1859c53d6566</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a0ff6634dc12abcfec9eb495b08086387</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a786a8ce4fce4b41e2fc07c9b91fdea76</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ab0c6bf1093de4b9109adc7c454b640e7</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>aa416e1e2d33bdb72b7338018ddd6dd2b</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>aa6809e245670460dda360ccee4dff164</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a05c31ab1e7bcba716e9d1e5013c402d2</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a7bc96f1fadb92283b0473982030a2d95</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ab3eef2266d32f167dc17584c98abe968</anchor>
      <arglist>(const optional &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>af2c3a97812f6456593d655b9ff746dd0</anchor>
      <arglist>(const optional &amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>aa9046a691a4acdc240b5d21461406847</anchor>
      <arglist>(const optional &amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a3160626f58d0371b19cbaa8f4a9b6dc1</anchor>
      <arglist>(const optional &amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a95fd7cc5ae8c359f690389e79057f6f7</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a71e275dea087ea60a60ee38b39b40d15</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a76d1dac61559fe86af9ce1cf568bd71a</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ab9b7cd1cee4d3afe06792baf20840d0e</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ac7f2da90774f3eb5ea5dc4fded4ad0c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a188ad3db5e954a5179e46269ae16e2fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a3f838839420da60c7758af72a3086a27</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a6ddd87706e98af1d59bc6455066862f5</anchor>
      <arglist>(const optional &amp;rhs) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a83353cad945c28a5c73953e62b5f8594</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>aae304e4cca1a3f5323c2ae01d38142c6</anchor>
      <arglist>(U &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a05fd774366b255edf801d10c603b4f9a</anchor>
      <arglist>(const optional&lt; U &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a2ef17ab5779f5ce51a998b2eb68ff8fa</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a8725ab675387de08c170cf19abfe4dc1</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a666a91875d16f4878d90001ef6ead072</anchor>
      <arglist>(const optional &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a94300cc13c7846095a28fece483b2784</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a854297d8d25d2a1294787c68155994cf</anchor>
      <arglist>(const optional&lt; U &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>emplace</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ae6f7a99c45c188138bcdc5372c16ae29</anchor>
      <arglist>(U &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>aef452596615248fd46138fa5e8b7bef2</anchor>
      <arglist>(optional &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ad74d41d210650b7c2dfef62a16f33c3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a7bdc61314e24afc003a77e1cc476840f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a4cff24201ad739c1c39b842e1045bb66</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>adda1684cc1ff415ff42448e17b46186a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ac3aaa44648f754a734f25b81112b0202</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a2f7d00d50b04f22833c7e3fe47f342d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a951e30ebe0466ca915b16bd98ebc2447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR const T &amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>aaffa4c19a26fb6277c969d74db6d17d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ac3b13084ca2791e81130d2a46770d695</anchor>
      <arglist>(U &amp;&amp;u) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T</type>
      <name>value_or</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a6b419b4e29a42f16921be326c6297be0</anchor>
      <arglist>(U &amp;&amp;u) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classtl_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a8f68348874fb45d329cab41fb174b9f4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0b28361aeaf04ee9c00824d0860610ae</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, T &amp;&amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a8b95caa938ab7ecf8c2f8d2ef8375bdf</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::invoke_result_t&lt; F, const T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab3ec2ddcac5b4e152561bb631a49029f</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::invoke_result_t&lt; F, const T &amp;&amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a81947503aacb7fb1d484d00f26a74832</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>acefe118593a4a6820cae40be34e240b5</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(optional_map_impl(std::declval&lt; optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a227e4d0f4660759edf1a027e3923ccfd</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(optional_map_impl(std::declval&lt; const optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a081d444e83ec3953124c37ceb241adbe</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(optional_map_impl(std::declval&lt; const optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>map</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0f5a33e44efa1be901adfc82b591d655</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a5f4f3a4bc83725003bde5e868550a395</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR decltype(optional_map_impl(std::declval&lt; optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a56e233cc76551c5561a07f2e1bbbd908</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(optional_map_impl(std::declval&lt; const optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a6d47e3acb61588c7d45fa64ccee8005c</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(optional_map_impl(std::declval&lt; const optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;()))</type>
      <name>transform</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af7a9f9371cbb4373e1875a9cac366337</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af6a43ff80a8ab7859b125948f18ee213</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af6a43ff80a8ab7859b125948f18ee213</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ad87cf06d578397620b120e1f3bbef002</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ae2360b6502f1aeb3d519d73034a77916</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a820c3845356b1afd0bfaca13bf4210de</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af8e1ce5a1351d3115960e8540b42ac0a</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a543cfbc1c7a650fdb325177540d4a108</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a543cfbc1c7a650fdb325177540d4a108</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac6b57a596068ba148281b238851ca5e0</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a7d04b3a05a87f0e62238a46eba056da5</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a1f3bd8a5a41f805eeaab67a7fda54a9a</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a757b1c8a856ea4245595db19563d78f4</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a9c0723f87bc39ce4e5937a7bd97b6bf8</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aee37e446cfd13a7af8ac9682d7b639f1</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a790b9c7e488ec9433701ed94cff367b4</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a05c8d77db2975407f4385badbcfa177e</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab1b587e2a702319ef2dd50a46d5942d1</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a1158c78f39a9928eb943c6bf76ad8883</anchor>
      <arglist>(const optional &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a03075967b32fbe8861b59c9129187056</anchor>
      <arglist>(const optional &amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a09434d378ff22cde57b9d804553b7285</anchor>
      <arglist>(const optional &amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac6aedfa136d588ab48ade811eef9b3d3</anchor>
      <arglist>(const optional &amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a7f0b268bde1c5dcab588ff5d6f91f085</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a3147c4f871535cd63f80123790ec4960</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>af174db26b73fc668779544093d25253f</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a922f154e66c650cbc8eab12801bdfca3</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aa8bee2264e91f5c24a7faa52b7195918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a01ad4287b5186f3e2d4973bd92fe15f1</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0fd08f91c8418d4f38fd460ba3880f5d</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0d1208c24613b8cd6b406469be15b208</anchor>
      <arglist>(const optional &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a75613038a7fb68f79df5fbb2be1f49b0</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a42210dafa99c06aa79be0d2f62221aa4</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; T, Args... &gt;::value, in_place_t &gt;, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a61618063b2d66b083cda3125aca3f3e3</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; T, std::initializer_list&lt; U &gt; &amp;, Args &amp;&amp;... &gt;::value, in_place_t &gt;, std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aab200292e5fdaaf2de21d867567e0660</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aab200292e5fdaaf2de21d867567e0660</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a2ea501771bdba573527123456953059a</anchor>
      <arglist>(const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a2ea501771bdba573527123456953059a</anchor>
      <arglist>(const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab25270f499c2ae2f8fb8815360f3ecfa</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab25270f499c2ae2f8fb8815360f3ecfa</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a8099c8b0d18941682ce9009f96f25e9a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ad56d1a3b7e01e57fa9d9bd84b14ddac3</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac9a3d1950de023f0cb4b44db43161421</anchor>
      <arglist>(const optional &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a1f20f006b4e03a34fb99db213d3a2d3c</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a494bab9e94b7cc2a63c13539f850a69b</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab216e67ae107403e9742f03e38b1643b</anchor>
      <arglist>(const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>aaaba35aeec687c36bf4f0d3c333b584e</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>emplace</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a13b2f5427cd494e5da2e655954da7c5a</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>detail::enable_if_t&lt; std::is_constructible&lt; T, std::initializer_list&lt; U &gt; &amp;, Args &amp;&amp;... &gt;::value, T &amp; &gt;</type>
      <name>emplace</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a85d3cba68d2e56689b5648456bf381bd</anchor>
      <arglist>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a78123e13c4a3391120f657cd66e5fdbf</anchor>
      <arglist>(optional &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;detail::is_nothrow_swappable&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a59de2e5bc12b19963b1157d343b4ea70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a3b3e8211139058f3f923c648aff6818a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0ce158d04b1eb21ea4248c476ce53b92</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a8a819cfb7b261d6342f1b0c97a573ac8</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ab23e58b15db7f4bc8c3f0df724ceb7f3</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac42195e4372f0a6d6a7ad1f7bd94d3e0</anchor>
      <arglist>() const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a333580f6b47bc3e4a8526c66c5bd20ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a57f5cf865d278a19c4fb16eb1fbef3b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a2baaba780785b36fe1eec5eee9e5df9c</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR const T &amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a8fd99184ea345d309392ae9788ad216a</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;&amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a0bfe2bd124bb5eeb02c2716025ccba81</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR const T &amp;&amp;</type>
      <name>value</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a16375e792b3d27f5faae3252002b39d8</anchor>
      <arglist>() const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a98f4ae7eb6ac265c1137aa6f03e4a2b0</anchor>
      <arglist>(U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T</type>
      <name>value_or</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>a7da77225c9c620b2c75902b5dd2a06d1</anchor>
      <arglist>(U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classtl_1_1optional.html</anchorfile>
      <anchor>ac235a23b19976d16d4cdc467a02e38d8</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_copy_assign_base</name>
    <filename>structtl_1_1detail_1_1optional__copy__assign__base.html</filename>
    <templarg>class T</templarg>
    <templarg>bool</templarg>
    <base>tl::detail::optional_move_base&lt; T, bool &gt;</base>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_copy_assign_base&lt; T, false &gt;</name>
    <filename>structtl_1_1detail_1_1optional__copy__assign__base_3_01T_00_01false_01_4.html</filename>
    <templarg>class T</templarg>
    <base>tl::detail::optional_move_base&lt; T, bool &gt;</base>
    <base>tl::detail::optional_move_base&lt; T, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>optional_copy_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a7195bf06d18e1c8e4c43b4c5f2e99fe9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_copy_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a5cde84d6d88c42918e8683b666952b99</anchor>
      <arglist>(const optional_copy_assign_base &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_copy_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>af1ac2b1b1c3a580df1c235faade8bb33</anchor>
      <arglist>(optional_copy_assign_base &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_copy_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a706147734aa595c6b575b1250a965bab</anchor>
      <arglist>(const optional_copy_assign_base &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>optional_copy_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>ac15481014857c730f70f8b98fae36805</anchor>
      <arglist>(optional_copy_assign_base &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_copy_base</name>
    <filename>structtl_1_1detail_1_1optional__copy__base.html</filename>
    <templarg>class T</templarg>
    <templarg>bool</templarg>
    <base>tl::detail::optional_operations_base&lt; T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_copy_base&lt; T, false &gt;</name>
    <filename>structtl_1_1detail_1_1optional__copy__base_3_01T_00_01false_01_4.html</filename>
    <templarg>class T</templarg>
    <base>tl::detail::optional_operations_base&lt; T &gt;</base>
    <base>tl::detail::optional_operations_base&lt; T &gt;</base>
    <member kind="function">
      <type></type>
      <name>optional_copy_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a00a66cc169c4c8dd0257ea1ddeda3ab3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_copy_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a2e8d0ff9dabd2cf712544a07b56f7524</anchor>
      <arglist>(const optional_copy_base &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_copy_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>ae78f3d6c77cc18174033e0aea25166b2</anchor>
      <arglist>(optional_copy_base &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_copy_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a1ca7330cd4c8a134fcfec0e49cd5eed9</anchor>
      <arglist>(const optional_copy_base &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_copy_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__copy__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a5eccb68f94bb2b8451b405b3a68b9ea0</anchor>
      <arglist>(optional_copy_base &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_delete_assign_base</name>
    <filename>structtl_1_1detail_1_1optional__delete__assign__base.html</filename>
    <templarg>class T</templarg>
    <templarg>bool EnableCopy</templarg>
    <templarg>bool EnableMove</templarg>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>aafb19fb1e03c5822c92e06f40b016b0f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>ae0f7f8e5207fc84fe71fc9d82a086518</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a13feaee2c20bc872b8d5007ca23da902</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a5188a05b4ca3035f44413ae7ccc8732e</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a9c19d91d8145c1ae339b6b7322962114</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_delete_assign_base&lt; T, false, false &gt;</name>
    <filename>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01false_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a84d7cd2789ef4a36b6aa5f0695625af5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a2f02b00d24823a048c19a9b94eae6732</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>ac033edd1a753c36da24d024ae6241f98</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a4bb84d6f62cb1db334d5c3a011922b92</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a3125492b18acc5a83848b2c95df7d6d1</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>aafb19fb1e03c5822c92e06f40b016b0f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>ae0f7f8e5207fc84fe71fc9d82a086518</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a13feaee2c20bc872b8d5007ca23da902</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a5188a05b4ca3035f44413ae7ccc8732e</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a9c19d91d8145c1ae339b6b7322962114</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_delete_assign_base&lt; T, false, true &gt;</name>
    <filename>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01true_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a873414f0dba295727ae0f2226b2ce150</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a9fbcbe91b60009a200fce87245190d39</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a545cdbd276fd47323a2698b5fb85a08f</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>afb7be9a96cde694540c4c34c06d043bb</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a7d5a0978be185dde16f4c3ba52e518fc</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>aafb19fb1e03c5822c92e06f40b016b0f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>ae0f7f8e5207fc84fe71fc9d82a086518</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a13feaee2c20bc872b8d5007ca23da902</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a5188a05b4ca3035f44413ae7ccc8732e</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a9c19d91d8145c1ae339b6b7322962114</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_delete_assign_base&lt; T, true, false &gt;</name>
    <filename>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01true_00_01false_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>a560c4a116ee3188c61a6f54f816459ec</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>a6422213336907f611e515782cec6d3e9</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>aec0240c717734b655d9f7e0021900a6f</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>a5a79df5d4094ff9d2a29ccfcf3eb0e38</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>ac96f6dc892e132ef08fbfab8c7e929d8</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>aafb19fb1e03c5822c92e06f40b016b0f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>ae0f7f8e5207fc84fe71fc9d82a086518</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a13feaee2c20bc872b8d5007ca23da902</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a5188a05b4ca3035f44413ae7ccc8732e</anchor>
      <arglist>(const optional_delete_assign_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__assign__base.html</anchorfile>
      <anchor>a9c19d91d8145c1ae339b6b7322962114</anchor>
      <arglist>(optional_delete_assign_base &amp;&amp;) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_delete_ctor_base</name>
    <filename>structtl_1_1detail_1_1optional__delete__ctor__base.html</filename>
    <templarg>class T</templarg>
    <templarg>bool EnableCopy</templarg>
    <templarg>bool EnableMove</templarg>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a9b6550d937ff2d9da101b2061a3e5067</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a977c1d4b7951d75c4c6a91dcca83023d</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>ae7a85d03dbc31c4344e7bac2ff6e182f</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a1439ac7309ec904931e11dd839fbab3b</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a460a237de049505823fdfb471570233b</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_delete_ctor_base&lt; T, false, false &gt;</name>
    <filename>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01false_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a980cbaa63519a44bd1e1e6a241c680c6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a4cbea39535051fd49aeec6ac72ab43c7</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a34d27957e53f635cb949e0dde223463a</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=delete</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a52bff75c250c766335176feb3f9e58dc</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a71835ae2fa246efd4c87c98f90bd2a87</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a9b6550d937ff2d9da101b2061a3e5067</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a977c1d4b7951d75c4c6a91dcca83023d</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>ae7a85d03dbc31c4344e7bac2ff6e182f</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a1439ac7309ec904931e11dd839fbab3b</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a460a237de049505823fdfb471570233b</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_delete_ctor_base&lt; T, false, true &gt;</name>
    <filename>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01true_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>aa689fa044a0670c35458cf31fe92b7a5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a76d884e6b18af47145cf59416f6cae4b</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>aec6dd1d36be42edf78b927619981541b</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a9004eedb325f8c60062e10aa41f6680d</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>aa07f7007ffe49a27c26b132a886e9a83</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a9b6550d937ff2d9da101b2061a3e5067</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a977c1d4b7951d75c4c6a91dcca83023d</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>ae7a85d03dbc31c4344e7bac2ff6e182f</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a1439ac7309ec904931e11dd839fbab3b</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a460a237de049505823fdfb471570233b</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_delete_ctor_base&lt; T, true, false &gt;</name>
    <filename>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01true_00_01false_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>a82badfc206eb4142fdab622b6ea74b95</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>aea02ef37c9e150f5a8970b6d77c66c20</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>a6ad8a5f6bbc13864979406fc66512b5d</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=delete</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>afab1cdb12f56f26b9963048ec29e60bd</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>ac4bd1a955f07622bfc782fd957ed9bd9</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a9b6550d937ff2d9da101b2061a3e5067</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a977c1d4b7951d75c4c6a91dcca83023d</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_delete_ctor_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>ae7a85d03dbc31c4344e7bac2ff6e182f</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a1439ac7309ec904931e11dd839fbab3b</anchor>
      <arglist>(const optional_delete_ctor_base &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_delete_ctor_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__delete__ctor__base.html</anchorfile>
      <anchor>a460a237de049505823fdfb471570233b</anchor>
      <arglist>(optional_delete_ctor_base &amp;&amp;) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_move_assign_base</name>
    <filename>structtl_1_1detail_1_1optional__move__assign__base.html</filename>
    <templarg>class T</templarg>
    <templarg>bool</templarg>
    <base>tl::detail::optional_copy_assign_base&lt; T, bool &gt;</base>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_move_assign_base&lt; T, false &gt;</name>
    <filename>structtl_1_1detail_1_1optional__move__assign__base_3_01T_00_01false_01_4.html</filename>
    <templarg>class T</templarg>
    <base>tl::detail::optional_copy_assign_base&lt; T, bool &gt;</base>
    <base>tl::detail::optional_copy_assign_base&lt; T, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>optional_move_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>ae8e5630c4e696d11a75c1b863e303f18</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_move_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a4913a160fcbf2679429ecfdc48ae0e0e</anchor>
      <arglist>(const optional_move_assign_base &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_move_assign_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a8ed4b3748f342b1a92b136074267d3b5</anchor>
      <arglist>(optional_move_assign_base &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_move_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a8721ec9b2664e65e6ec14a31bbce086e</anchor>
      <arglist>(const optional_move_assign_base &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_move_assign_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__assign__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a189f215902b954784cfe6d2e70b882aa</anchor>
      <arglist>(optional_move_assign_base &amp;&amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; T &gt;::value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_move_base</name>
    <filename>structtl_1_1detail_1_1optional__move__base.html</filename>
    <templarg>class T</templarg>
    <templarg>bool</templarg>
    <base>tl::detail::optional_copy_base&lt; T, bool &gt;</base>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_move_base&lt; T, false &gt;</name>
    <filename>structtl_1_1detail_1_1optional__move__base_3_01T_00_01false_01_4.html</filename>
    <templarg>class T</templarg>
    <base>tl::detail::optional_copy_base&lt; T, bool &gt;</base>
    <base>tl::detail::optional_copy_base&lt; T, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>optional_move_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>ae1479fc6c113f0d95e0ac5c8c85094e8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_move_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a44d56cc94effe310050cee0c01b888d9</anchor>
      <arglist>(const optional_move_base &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_move_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a48b02180ce8e1577aac2fec400b9bfd4</anchor>
      <arglist>(optional_move_base &amp;&amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>optional_move_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a09de6e48beeb0c230a3054856bab9038</anchor>
      <arglist>(const optional_move_base &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional_move_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structtl_1_1detail_1_1optional__move__base_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a74184f7e362b2af0f2beced8b24b5c46</anchor>
      <arglist>(optional_move_base &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_operations_base</name>
    <filename>structtl_1_1detail_1_1optional__operations__base.html</filename>
    <templarg>class T</templarg>
    <base>tl::detail::optional_storage_base&lt; T, bool &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>hard_reset</name>
      <anchorfile>structtl_1_1detail_1_1optional__operations__base.html</anchorfile>
      <anchor>afdfe78c71a13c173e8658aa5073d6d54</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structtl_1_1detail_1_1optional__operations__base.html</anchorfile>
      <anchor>a8ea97395013e95a569fe331e0b84e988</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>structtl_1_1detail_1_1optional__operations__base.html</anchorfile>
      <anchor>a1429578c9848d5903184b2db559022cf</anchor>
      <arglist>(Opt &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>structtl_1_1detail_1_1optional__operations__base.html</anchorfile>
      <anchor>a137d046c5326058870d320d42c483eeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>get</name>
      <anchorfile>structtl_1_1detail_1_1optional__operations__base.html</anchorfile>
      <anchor>aa1fefc3154a6e615ae0f5cc7ca934ec7</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR const T &amp;</type>
      <name>get</name>
      <anchorfile>structtl_1_1detail_1_1optional__operations__base.html</anchorfile>
      <anchor>aef658ab8214ef4c4b1f703128058373b</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;&amp;</type>
      <name>get</name>
      <anchorfile>structtl_1_1detail_1_1optional__operations__base.html</anchorfile>
      <anchor>a8243138fa7723513ea7fc6ad123cd380</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;&amp;</type>
      <name>get</name>
      <anchorfile>structtl_1_1detail_1_1optional__operations__base.html</anchorfile>
      <anchor>a2f98d6e004c22c2ea496efeb5192adc6</anchor>
      <arglist>() const &amp;&amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_storage_base</name>
    <filename>structtl_1_1detail_1_1optional__storage__base.html</filename>
    <templarg>class T</templarg>
    <templarg>bool</templarg>
    <class kind="struct">tl::detail::optional_storage_base::dummy</class>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a7d92217da280c88c4f266f1dc9c2c245</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a19db24f29414b68a4000b68056ef0251</anchor>
      <arglist>(in_place_t, U &amp;&amp;... u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a1899339b4ca940f3d05cc6efb44727bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>dummy</type>
      <name>m_dummy</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>ad2683bd7f83154a169b004f7bc54fee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_value</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a26202010e681a9f49921c4fd5cb2f47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_has_value</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a9d691058a66145edc2c0023c7ce9fa21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::optional_storage_base&lt; T, true &gt;</name>
    <filename>structtl_1_1detail_1_1optional__storage__base_3_01T_00_01true_01_4.html</filename>
    <templarg>class T</templarg>
    <class kind="struct">tl::detail::optional_storage_base&lt; T, true &gt;::dummy</class>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a90144dced619427e9c250ff214609f01</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a10ba1090f51cd0a315807c21c0aab943</anchor>
      <arglist>(in_place_t, U &amp;&amp;... u)</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a7d92217da280c88c4f266f1dc9c2c245</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a19db24f29414b68a4000b68056ef0251</anchor>
      <arglist>(in_place_t, U &amp;&amp;... u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional_storage_base</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a1899339b4ca940f3d05cc6efb44727bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>dummy</type>
      <name>m_dummy</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a5c4d7495238f7181e91c0a710ac42896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_value</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a6d51b65a824bb0b09ea9a2e48ec4e333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_has_value</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a0d899d0aabf2cb431da98fb121dba768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dummy</type>
      <name>m_dummy</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>ad2683bd7f83154a169b004f7bc54fee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_value</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a26202010e681a9f49921c4fd5cb2f47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_has_value</name>
      <anchorfile>structtl_1_1detail_1_1optional__storage__base.html</anchorfile>
      <anchor>a9d691058a66145edc2c0023c7ce9fa21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::or_test</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1or__test.html</filename>
    <templarg>typename Seq</templarg>
    <templarg>typename... Bs</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::or_test&lt; index_sequence&lt; Is... &gt;, indexed&lt; Is, false_type &gt;... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1or__test_3_01index__sequence_3_01Is_8_8_8_01_4_00_0172997cf84633db2288bb9ba9827aedd6.html</filename>
    <templarg>usize... Is</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::_simd::Pack</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1Pack.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::_simd::Pack&lt; T, 1 &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1Pack_3_01T_00_011_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ScalarType</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1Pack_3_01T_00_011_01_4.html</anchorfile>
      <anchor>a73ccf86bf477bb9af25352bf24fe5eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>store_unaligned</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1Pack_3_01T_00_011_01_4.html</anchorfile>
      <anchor>a1978be8bc3db8109dde99625a15a5bad</anchor>
      <arglist>(ScalarType *ptr) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>fmadd</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1Pack_3_01T_00_011_01_4.html</anchorfile>
      <anchor>a3803518a26b5c761eba61dfda83c26fb</anchor>
      <arglist>(Pack a, Pack b, Pack c) noexcept -&gt; Pack</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>fnmadd</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1Pack_3_01T_00_011_01_4.html</anchorfile>
      <anchor>ac2d4149559c77f4344eadc339534fcf4</anchor>
      <arglist>(Pack a, Pack b, Pack c) noexcept -&gt; Pack</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>load_unaligned</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1Pack_3_01T_00_011_01_4.html</anchorfile>
      <anchor>a1b35684aadd768edc25f6d8ed43ffe08</anchor>
      <arglist>(ScalarType const *ptr) noexcept -&gt; Pack</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEG_INLINE auto</type>
      <name>broadcast</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1Pack_3_01T_00_011_01_4.html</anchorfile>
      <anchor>a9b9eb3f0f9f8345d46a8a08028f5b7a2</anchor>
      <arglist>(ScalarType value) noexcept -&gt; Pack</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>inner</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd_1_1Pack_3_01T_00_011_01_4.html</anchorfile>
      <anchor>a33c0f68ddb025c4f8b5895e368820f30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::pack_idx_elem</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1pack__idx__elem.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>decltype(_detail::get_idx&lt; T &gt;( static_cast&lt; HollowIndexedTuple&lt; meta::make_index_sequence&lt; sizeof...(Ts)&gt;, Ts... &gt; * &gt;( nullptr)))</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1pack__idx__elem.html</anchorfile>
      <anchor>a040f28dd08cf83340aba4f7bd3a12504</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::pack_ith_elem</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1pack__ith__elem.html</filename>
    <templarg>usize I</templarg>
    <member kind="typedef">
      <type>decltype(_detail::get_type&lt; I &gt;( static_cast&lt; HollowIndexedTuple&lt; meta::make_index_sequence&lt; sizeof...(Ts)&gt;, Ts... &gt; * &gt;( nullptr)))</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1pack__ith__elem.html</anchorfile>
      <anchor>af5517ae4144aa5717f613a4d1b891457</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::pack_size</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1pack__size.html</filename>
    <templarg>typename... Ts</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr usize</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1pack__size.html</anchorfile>
      <anchor>a37f46463d230d168dd7f81fa340c2986</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::nb::pow</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1nb_1_1pow.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1nb_1_1pow.html</anchorfile>
      <anchor>ad878605723c4db0c9e0123418b076339</anchor>
      <arglist>(T x, T y) const -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::linesearch::PrimalDualDerivativeResult</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1linesearch_1_1PrimalDualDerivativeResult.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>VEG_REFLECT</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1linesearch_1_1PrimalDualDerivativeResult.html</anchorfile>
      <anchor>a1d1772612dc1f89ef621a8f34214abd6</anchor>
      <arglist>(PrimalDualDerivativeResult, a, b, grad)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1linesearch_1_1PrimalDualDerivativeResult.html</anchorfile>
      <anchor>aad601986ca028b3569d422d6e2b442fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1linesearch_1_1PrimalDualDerivativeResult.html</anchorfile>
      <anchor>afe9c44db737f9d3caa500975cfff2f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>grad</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1linesearch_1_1PrimalDualDerivativeResult.html</anchorfile>
      <anchor>a1e6147ecfb23121b12118c5bd42bc150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::PrimalDualGradResult</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1PrimalDualGradResult.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>VEG_REFLECT</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1PrimalDualGradResult.html</anchorfile>
      <anchor>a4c0b4c8ac683e2e611528a6b7258ff31</anchor>
      <arglist>(PrimalDualGradResult, a, b, grad)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1PrimalDualGradResult.html</anchorfile>
      <anchor>a21f86b413eb93476bfc1c1a195f47ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1PrimalDualGradResult.html</anchorfile>
      <anchor>ac5bd0b7b26b5c95e67a787a25a749a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>grad</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1PrimalDualGradResult.html</anchorfile>
      <anchor>af7e9b0763afbc52da75b8807e5927868</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::QP</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a5539a0b22b1bba5c5012982becfc0e2f</anchor>
      <arglist>(isize _dim, isize _n_eq, isize _n_in, bool _box_constraints, proxsuite::proxqp::HessianType _hessian_type, DenseBackend _dense_backend)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a911f8f06808a4234d965ec97429e8073</anchor>
      <arglist>(isize _dim, isize _n_eq, isize _n_in, bool _box_constraints, DenseBackend _dense_backend, proxsuite::proxqp::HessianType _hessian_type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a982d4aff266fe5250bc3cd61c9bc2451</anchor>
      <arglist>(isize _dim, isize _n_eq, isize _n_in, bool _box_constraints, proxsuite::proxqp::HessianType _hessian_type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>abb442f98389e20cc858ddbdfa0ec1813</anchor>
      <arglist>(isize _dim, isize _n_eq, isize _n_in, bool _box_constraints, DenseBackend _dense_backend)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a2a3622c9f1f0b631fe3333d4285992a1</anchor>
      <arglist>(isize _dim, isize _n_eq, isize _n_in, bool _box_constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>ad259b17d997b94d0c9fe2f82f67eac1a</anchor>
      <arglist>(isize _dim, isize _n_eq, isize _n_in, proxsuite::proxqp::HessianType _hessian_type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>aa033a9cd9e2d5d4fea00189247318d67</anchor>
      <arglist>(isize _dim, isize _n_eq, isize _n_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_box_constrained</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>ace6d1486e1c7b5128bf439409fedfa7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseBackend</type>
      <name>which_dense_backend</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a23d15160955e8a750794b25ade5c86d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HessianType</type>
      <name>which_hessian_type</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a23121a770c33b65c0f54f4dd15c2aca2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>afc4a0eb6fd6e45c9a2ba5bcc58fc45b7</anchor>
      <arglist>(optional&lt; MatRef&lt; T &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; MatRef&lt; T &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; MatRef&lt; T &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, bool compute_preconditioner=true, optional&lt; T &gt; rho=nullopt, optional&lt; T &gt; mu_eq=nullopt, optional&lt; T &gt; mu_in=nullopt, optional&lt; T &gt; manual_minimal_H_eigenvalue=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>ad23e9c4989de4f887426961edeeefbe6</anchor>
      <arglist>(optional&lt; MatRef&lt; T &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; MatRef&lt; T &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; MatRef&lt; T &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, optional&lt; VecRef&lt; T &gt; &gt; l_box, optional&lt; VecRef&lt; T &gt; &gt; u_box, bool compute_preconditioner=true, optional&lt; T &gt; rho=nullopt, optional&lt; T &gt; mu_eq=nullopt, optional&lt; T &gt; mu_in=nullopt, optional&lt; T &gt; manual_minimal_H_eigenvalue=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a9f3938014e003c249289f3651663f642</anchor>
      <arglist>(optional&lt; MatRef&lt; T &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; MatRef&lt; T &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; MatRef&lt; T &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, bool update_preconditioner=false, optional&lt; T &gt; rho=nullopt, optional&lt; T &gt; mu_eq=nullopt, optional&lt; T &gt; mu_in=nullopt, optional&lt; T &gt; manual_minimal_H_eigenvalue=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a48d8e2b46bb43f5857a03799c9ccc289</anchor>
      <arglist>(optional&lt; MatRef&lt; T &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; MatRef&lt; T &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; MatRef&lt; T &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, optional&lt; VecRef&lt; T &gt; &gt; l_box, optional&lt; VecRef&lt; T &gt; &gt; u_box, bool update_preconditioner=false, optional&lt; T &gt; rho=nullopt, optional&lt; T &gt; mu_eq=nullopt, optional&lt; T &gt; mu_in=nullopt, optional&lt; T &gt; manual_minimal_H_eigenvalue=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a5027e4150940b1f90504152d3fe4ec87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a5f0ee768d8d9dc56aab637e36bcf5ba0</anchor>
      <arglist>(optional&lt; VecRef&lt; T &gt; &gt; x, optional&lt; VecRef&lt; T &gt; &gt; y, optional&lt; VecRef&lt; T &gt; &gt; z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a8d8955be685ecb75faa77f97b4f0b41a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Results&lt; T &gt;</type>
      <name>results</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a297a12eb04ce367daa34e851e46c53b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Settings&lt; T &gt;</type>
      <name>settings</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a1620df974ff332a77091965583be0b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Model&lt; T &gt;</type>
      <name>model</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a0b59e8cb71d889828c1820c200e6aab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Workspace&lt; T &gt;</type>
      <name>work</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>a5c1c8b0e8863dc6a00455b7fa21adc53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>preconditioner::RuizEquilibration&lt; T &gt;</type>
      <name>ruiz</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QP.html</anchorfile>
      <anchor>af7b0bdeb935c94ee38c7581229df7216</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::QP</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>aef6a6cddf8898923f90f72f99cdf499e</anchor>
      <arglist>(isize dim, isize n_eq, isize n_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a59326d34e2d7d63a31a819088ed121ce</anchor>
      <arglist>(const SparseMat&lt; bool, I &gt; &amp;H, const SparseMat&lt; bool, I &gt; &amp;A, const SparseMat&lt; bool, I &gt; &amp;C)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>ab3e96a1332ee67de9ba85f4f8991c496</anchor>
      <arglist>(const QP &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>QP &amp;</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a2e30ca352e2608b70e1642f4a9e25471</anchor>
      <arglist>(const QP &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a2d2663ebcbe0615e720f884f8f2a4631</anchor>
      <arglist>(QP &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>QP &amp;</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a905be1fffd5ae687f649746ba3a41a76</anchor>
      <arglist>(QP &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a9aa090f5c363ece74e26f5f50458b5f0</anchor>
      <arglist>(optional&lt; SparseMat&lt; T, I &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; SparseMat&lt; T, I &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; SparseMat&lt; T, I &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, bool compute_preconditioner_=true, optional&lt; T &gt; rho=nullopt, optional&lt; T &gt; mu_eq=nullopt, optional&lt; T &gt; mu_in=nullopt, optional&lt; T &gt; manual_minimal_H_eigenvalue=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a940b96e746a13656fa7b1867b180866d</anchor>
      <arglist>(const optional&lt; SparseMat&lt; T, I &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, const optional&lt; SparseMat&lt; T, I &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, const optional&lt; SparseMat&lt; T, I &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, bool update_preconditioner=false, optional&lt; T &gt; rho=nullopt, optional&lt; T &gt; mu_eq=nullopt, optional&lt; T &gt; mu_in=nullopt, optional&lt; T &gt; manual_minimal_H_eigenvalue=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a6af68e8508f3d3e5794479528737dac2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a66663416c86cac0e2b51a3f11ee4b07e</anchor>
      <arglist>(optional&lt; VecRef&lt; T &gt; &gt; x, optional&lt; VecRef&lt; T &gt; &gt; y, optional&lt; VecRef&lt; T &gt; &gt; z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>ac89d46d9f028d3ea13bbf0f2f8a19220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Results&lt; T &gt;</type>
      <name>results</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>aad8dada031c8b705e6a3bed9bd851746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Settings&lt; T &gt;</type>
      <name>settings</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>acc2ec4c91875dab53eff112072486231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Model&lt; T, I &gt;</type>
      <name>model</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a4f3f8807e2ec4fbeb3ee339278fc2019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Workspace&lt; T, I &gt;</type>
      <name>work</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>a4e1db1ceb41e053fb26a8c2fa24154d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>preconditioner::RuizEquilibration&lt; T, I &gt;</type>
      <name>ruiz</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QP.html</anchorfile>
      <anchor>af76da7e0cc6b91d3092037b592babc1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::QpView</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1QpView.html</filename>
    <templarg>typename T</templarg>
    <member kind="variable">
      <type>MatrixView&lt; T, layout &gt;</type>
      <name>H</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpView.html</anchorfile>
      <anchor>a142e99bec7a022e13faf9d487228aa2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; T &gt;</type>
      <name>g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpView.html</anchorfile>
      <anchor>a3a424fa7640720e4fad92e14ab57280c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixView&lt; T, layout &gt;</type>
      <name>A</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpView.html</anchorfile>
      <anchor>a11c0f0285b5b788582779a50f09d2c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; T &gt;</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpView.html</anchorfile>
      <anchor>aa27d2df8b47cf5482149b6a37d744714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixView&lt; T, layout &gt;</type>
      <name>C</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpView.html</anchorfile>
      <anchor>ad189d5c5e2438d968e085a21aac7b684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; T &gt;</type>
      <name>d</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpView.html</anchorfile>
      <anchor>af06f5f9a2f7d25c83973194544da03d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Layout</type>
      <name>layout</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpView.html</anchorfile>
      <anchor>ace561ae51d4a243193e667b27da0b130</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::QpView</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1QpView.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::MatRef&lt; T, I &gt;</type>
      <name>H</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpView.html</anchorfile>
      <anchor>abe49ef91cfc0409af002d0f77a34877d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::DenseVecRef&lt; T &gt;</type>
      <name>g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpView.html</anchorfile>
      <anchor>a4fa99cd063917b72c297a872445fd39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::MatRef&lt; T, I &gt;</type>
      <name>AT</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpView.html</anchorfile>
      <anchor>a1c686d77ce44119b6524b11694396092</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::DenseVecRef&lt; T &gt;</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpView.html</anchorfile>
      <anchor>a2936bafd5dcb42efd6b3a768c4d90800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::MatRef&lt; T, I &gt;</type>
      <name>CT</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpView.html</anchorfile>
      <anchor>a5dabd89dc07cd0bd4480534407110d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::DenseVecRef&lt; T &gt;</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpView.html</anchorfile>
      <anchor>af5dc147deaa24c84373f59ca01975b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::DenseVecRef&lt; T &gt;</type>
      <name>u</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpView.html</anchorfile>
      <anchor>a01abd93fcd4758de9b3b9f1b65516fb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::QpViewBox</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="variable">
      <type>MatrixView&lt; Scalar, layout &gt;</type>
      <name>H</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>a724cd441bf5af9d01269cdd2c0e4e06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; Scalar &gt;</type>
      <name>g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>adfece714449031f7ec17ae33a2abca9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixView&lt; Scalar, layout &gt;</type>
      <name>A</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>aed3c9dc53a919c1b50f7b94786f6b960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; Scalar &gt;</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>aaf5f3cfcc288d2d91d14d7d8c1a14ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixView&lt; Scalar, layout &gt;</type>
      <name>C</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>ac882e05cb3500b935552d94fbb66f32d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; Scalar &gt;</type>
      <name>u</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>ac5edcfb2585c4679c82b7edd00729833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; Scalar &gt;</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>a3e67a9b04d79ad4042c43152ab0c2358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; Scalar &gt;</type>
      <name>I</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>a6f8ff8402c55ba851f68b9a00177e181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; Scalar &gt;</type>
      <name>u_box</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>a4de576067d949a0430b7ff75a1f64fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorView&lt; Scalar &gt;</type>
      <name>l_box</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>a73220509a3366867e2a5adf89d1968a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Layout</type>
      <name>layout</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBox.html</anchorfile>
      <anchor>a09f37376f4f18bed7ab874c3a8f635b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::QpViewBoxMut</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>a552013b568730de26be359d6b8f1af28</anchor>
      <arglist>() const noexcept -&gt; QpViewBox&lt; Scalar &gt;</arglist>
    </member>
    <member kind="variable">
      <type>MatrixViewMut&lt; Scalar, layout &gt;</type>
      <name>H</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>abdf8c2d24f904d6f5fac01f9739e120a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; Scalar &gt;</type>
      <name>g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>af6f906a186fc0d8e4e5840d926be37ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixViewMut&lt; Scalar, layout &gt;</type>
      <name>A</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>aa26dc7ddce9effd75dec384806798c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; Scalar &gt;</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>aa65056f5ad6336bba581331f3e013d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixViewMut&lt; Scalar, layout &gt;</type>
      <name>C</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>a07b76fca359553edce496ea9a1bc7ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; Scalar &gt;</type>
      <name>u</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>a9a7c30cbbc9b0d7da48821271683945c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; Scalar &gt;</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>a62c8a8486be79e07a875b8dd08e2711b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; Scalar &gt;</type>
      <name>I</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>a78f2c3ec3d3046ba8f07f4e5d0f88433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; Scalar &gt;</type>
      <name>l_box</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>af79f281e5f7555f4626c125f74aa5a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; Scalar &gt;</type>
      <name>u_box</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>a1c29af5e8736572337eff1fb0aaf9427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Layout</type>
      <name>layout</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewBoxMut.html</anchorfile>
      <anchor>a0cb06f1f2c1a04f02aeda1dca5c9e90e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::QpViewMut</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1QpViewMut.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewMut.html</anchorfile>
      <anchor>ab13d94b0bef9d8c4a04801be955b3fd8</anchor>
      <arglist>() const noexcept -&gt; QpView&lt; T &gt;</arglist>
    </member>
    <member kind="variable">
      <type>MatrixViewMut&lt; T, layout &gt;</type>
      <name>H</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewMut.html</anchorfile>
      <anchor>ab716393ff03d105635f956b488709ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; T &gt;</type>
      <name>g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewMut.html</anchorfile>
      <anchor>a864339165d5e540ed5604ebf8544d511</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixViewMut&lt; T, layout &gt;</type>
      <name>A</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewMut.html</anchorfile>
      <anchor>a0894b8c80c68f7993373d646492b6db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; T &gt;</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewMut.html</anchorfile>
      <anchor>a3440ffed190cd60ee5e1aaadeca3ee18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixViewMut&lt; T, layout &gt;</type>
      <name>C</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewMut.html</anchorfile>
      <anchor>a53eca2cbef0b08b28391e7a3b5bec523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorViewMut&lt; T &gt;</type>
      <name>d</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewMut.html</anchorfile>
      <anchor>a63787f60dd82dde1243a868a57387dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Layout</type>
      <name>layout</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1QpViewMut.html</anchorfile>
      <anchor>adf151a5fdaf87725d74d70d497a54a2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::QpViewMut</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1QpViewMut.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="function">
      <type>auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpViewMut.html</anchorfile>
      <anchor>ad2b81f5000dd26218630a5d9f4fcba65</anchor>
      <arglist>() noexcept -&gt; QpView&lt; T, I &gt;</arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::MatMut&lt; T, I &gt;</type>
      <name>H</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpViewMut.html</anchorfile>
      <anchor>afbd78d16f03324f9d0853202b95b6fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::DenseVecMut&lt; T &gt;</type>
      <name>g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpViewMut.html</anchorfile>
      <anchor>a8f99f3f18bb423377041f27b9cdcd035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::MatMut&lt; T, I &gt;</type>
      <name>AT</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpViewMut.html</anchorfile>
      <anchor>ab835e63f6b130335e11f0c221ee3d574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::DenseVecMut&lt; T &gt;</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpViewMut.html</anchorfile>
      <anchor>a094e751b675083c7eea5d57b310ce0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::MatMut&lt; T, I &gt;</type>
      <name>CT</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpViewMut.html</anchorfile>
      <anchor>a7cc3334bcb9a03392161b0d5a009d21c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::DenseVecMut&lt; T &gt;</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpViewMut.html</anchorfile>
      <anchor>a74a13fde3b57756c5bff0fb393853472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::DenseVecMut&lt; T &gt;</type>
      <name>u</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1QpViewMut.html</anchorfile>
      <anchor>a47f5f03ca2ce1281b0be9a9b3b17a127</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RankRUpdateLoopImpl</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankRUpdateLoopImpl.html</filename>
    <templarg>bool VECTORIZABLE</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RankRUpdateLoopImpl&lt; false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankRUpdateLoopImpl_3_01false_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankRUpdateLoopImpl_3_01false_01_4.html</anchorfile>
      <anchor>ac0fc4313e884e9e0c25acd5249ae638f</anchor>
      <arglist>(isize n, T *inout_l, T *pw, isize w_stride, T const *p, T const *mu) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RankRUpdateLoopImpl&lt; true &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankRUpdateLoopImpl_3_01true_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static VEG_INLINE void</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankRUpdateLoopImpl_3_01true_01_4.html</anchorfile>
      <anchor>ab5c0d3bf6db9f202c7bb3de5ea2b713d</anchor>
      <arglist>(isize n, T *inout_l, T *pw, isize w_stride, T const *p, T const *mu) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RankUpdateLoadPMu</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadPMu.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadPMu.html</anchorfile>
      <anchor>a4686be29dc37871ad1409553ab9ec033</anchor>
      <arglist>(usize i) const</arglist>
    </member>
    <member kind="variable">
      <type>_simd::Pack&lt; T, N &gt; *</type>
      <name>p_p</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadPMu.html</anchorfile>
      <anchor>a952e3410d1d1f21e7bb7f06b43e04901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>_simd::Pack&lt; T, N &gt; *</type>
      <name>p_mu</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadPMu.html</anchorfile>
      <anchor>ad08e47252f54261f547e6b2d818e4172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>p</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadPMu.html</anchorfile>
      <anchor>a9b605f5f4f06cd4acb3d41ceedd5fab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>mu</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadPMu.html</anchorfile>
      <anchor>a230795e48ac90b771fa6a175af79acd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RankUpdateLoadW</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadW.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadW.html</anchorfile>
      <anchor>aa09747449956398dec59d494e64c1121</anchor>
      <arglist>(usize i) const</arglist>
    </member>
    <member kind="variable">
      <type>_simd::Pack&lt; T, N &gt; *</type>
      <name>p_wr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadW.html</anchorfile>
      <anchor>a79d971d06266a34c7e62b21d0de4a880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>pw</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadW.html</anchorfile>
      <anchor>acd9775de773f46115714d159fce58d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>w_stride</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateLoadW.html</anchorfile>
      <anchor>a6bcdf0546f2d86301ec0afabd9aa8ecc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RankUpdateStoreW</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateStoreW.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateStoreW.html</anchorfile>
      <anchor>af4cc6df9e4e3bcfc07d06df46e520e8d</anchor>
      <arglist>(usize i) const</arglist>
    </member>
    <member kind="variable">
      <type>_simd::Pack&lt; T, N &gt; const  *</type>
      <name>p_wr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateStoreW.html</anchorfile>
      <anchor>a7da5dc6a22d933c934a7ae5823c3ea79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>pw</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateStoreW.html</anchorfile>
      <anchor>a699cbdf866d01996451aac3ba6cb0d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>w_stride</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateStoreW.html</anchorfile>
      <anchor>a16e56efa84b6dd1cf1b563fa9e37f9f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RankUpdateUpdateWAndL</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateUpdateWAndL.html</filename>
    <templarg>typename T</templarg>
    <templarg>usize N</templarg>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateUpdateWAndL.html</anchorfile>
      <anchor>a0dc1a3231d7b5c95ba28417823b4b171</anchor>
      <arglist>(usize i) const</arglist>
    </member>
    <member kind="variable">
      <type>_simd::Pack&lt; T, N &gt; *</type>
      <name>p_wr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateUpdateWAndL.html</anchorfile>
      <anchor>ac88a92675a90e0ae2ca84a5fde444694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>_simd::Pack&lt; T, N &gt; &amp;</type>
      <name>p_in_l</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateUpdateWAndL.html</anchorfile>
      <anchor>aaa567ae6a582b034b0297d2b46d77399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>_simd::Pack&lt; T, N &gt; const  *</type>
      <name>p_p</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateUpdateWAndL.html</anchorfile>
      <anchor>a45c54c1ca68261157626bf49637a152b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>_simd::Pack&lt; T, N &gt; const  *</type>
      <name>p_mu</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RankUpdateUpdateWAndL.html</anchorfile>
      <anchor>aa6bc60aac073608331d7f26fa21dd287</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::detail::AugmentedKkt::Raw</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt_1_1Raw.html</filename>
    <member kind="variable">
      <type>proxsuite::linalg::sparse::MatRef&lt; T, I &gt;</type>
      <name>kkt_active</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt_1_1Raw.html</anchorfile>
      <anchor>a67cbddc99a48e2cdfd55288b845b124d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Slice&lt; bool &gt;</type>
      <name>active_constraints</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt_1_1Raw.html</anchorfile>
      <anchor>af622bbf8cc8e72b114e21b680519c7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt_1_1Raw.html</anchorfile>
      <anchor>adb8461a94e5a094af9cf31541dbeef8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt_1_1Raw.html</anchorfile>
      <anchor>a84511170a6ad60cd913f48fc717d103a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt_1_1Raw.html</anchorfile>
      <anchor>a62aab402cb2759821aecec898347d0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rho</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt_1_1Raw.html</anchorfile>
      <anchor>ae05055790669f662d71b89e9b310f45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt_1_1Raw.html</anchorfile>
      <anchor>a7b50f3072e4445d984eb8d8c6f35eeac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1detail_1_1AugmentedKkt_1_1Raw.html</anchorfile>
      <anchor>ac862a6fa4b2866283411c042334441df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::vector::RawVector</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1vector_1_1RawVector.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>len</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1vector_1_1RawVector.html</anchorfile>
      <anchor>ad16f8d0e4af955cd562239e4491af22d</anchor>
      <arglist>() const noexcept -&gt; usize</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>cap</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1vector_1_1RawVector.html</anchorfile>
      <anchor>a64108f8290fa6ff3e114efd4782f7fe3</anchor>
      <arglist>() const noexcept -&gt; usize</arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1vector_1_1RawVector.html</anchorfile>
      <anchor>a2b88502329d4729444d19147a53f8d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>end</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1vector_1_1RawVector.html</anchorfile>
      <anchor>a72005139cd2c01568894dda5829788a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>end_alloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1vector_1_1RawVector.html</anchorfile>
      <anchor>a98666b7c34567e807dacc0cf15c95e2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_vector::RawVectorMoveRaii</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1RawVectorMoveRaii.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>RawVectorMoveRaii</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1RawVectorMoveRaii.html</anchorfile>
      <anchor>a21b60c276de0dd738103a5aba072c42e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RawVectorMoveRaii</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1RawVectorMoveRaii.html</anchorfile>
      <anchor>a0351ef4abb5a21d558b5ca3d94f42760</anchor>
      <arglist>(FromRawParts, vector::RawVector&lt; T &gt; inner) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1RawVectorMoveRaii.html</anchorfile>
      <anchor>a3dbea859b80c20a9034b4e09eeea3bc0</anchor>
      <arglist>(constexpr) RawVectorMoveRaii(RawVectorMoveRaii &amp;&amp;rhs) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1RawVectorMoveRaii.html</anchorfile>
      <anchor>a4b8fd9aa28b45ed0d158dac646ff6be5</anchor>
      <arglist>(constexpr) RawVectorMoveRaii(RawVectorMoveRaii const &amp;) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="variable">
      <type>vector::RawVector&lt; T &gt;</type>
      <name>_</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1RawVectorMoveRaii.html</anchorfile>
      <anchor>a1778250c6f78daeb763c1291dda4790e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::Ref</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1Ref.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::cmp::ref::RefBase</base>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Ref.html</anchorfile>
      <anchor>af32eb826409b95e04cdd58c0a24f2667</anchor>
      <arglist>() const noexcept -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator*</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Ref.html</anchorfile>
      <anchor>ab148e91662f4d63b4b8744caf5e17ee0</anchor>
      <arglist>() const noexcept -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator-&gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Ref.html</anchorfile>
      <anchor>ad9f2cdcfeb76dd1f27d144e4fb44d8ae</anchor>
      <arglist>() const noexcept -&gt; T const *</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>nb::ref</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Ref.html</anchorfile>
      <anchor>a0cb83e147c69c4f277093943535f59ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Ref</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Ref.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::cmp::ref::RefBase</base>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Ref.html</anchorfile>
      <anchor>af32eb826409b95e04cdd58c0a24f2667</anchor>
      <arglist>() const noexcept -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator*</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Ref.html</anchorfile>
      <anchor>ab148e91662f4d63b4b8744caf5e17ee0</anchor>
      <arglist>() const noexcept -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator-&gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Ref.html</anchorfile>
      <anchor>ad9f2cdcfeb76dd1f27d144e4fb44d8ae</anchor>
      <arglist>() const noexcept -&gt; T const *</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>nb::ref</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Ref.html</anchorfile>
      <anchor>a0cb83e147c69c4f277093943535f59ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::nb::ref</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1ref.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1ref.html</anchorfile>
      <anchor>af1dc5200acd49f7487bf313786f18802</anchor>
      <arglist>(T const &amp;r) const noexcept -&gt; Ref&lt; T &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cmp::ref::RefBase</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cmp_1_1ref_1_1RefBase.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::RefMut</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1RefMut.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::cmp::mut::RefMutBase</base>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1RefMut.html</anchorfile>
      <anchor>add354a4549c0535949b8e06c0c11096b</anchor>
      <arglist>() const noexcept -&gt; Ref&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1RefMut.html</anchorfile>
      <anchor>a542c2499a51df9a14629b1ad16453cf4</anchor>
      <arglist>() const noexcept -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator*</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1RefMut.html</anchorfile>
      <anchor>a1f6673fcaf4baa8cd8305259986eda9e</anchor>
      <arglist>() const noexcept -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator-&gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1RefMut.html</anchorfile>
      <anchor>afc9ec284f49086fca670a9bba59461ab</anchor>
      <arglist>() const noexcept -&gt; T *</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>nb::mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1RefMut.html</anchorfile>
      <anchor>a202186e6b12edfebc8df910f5e140c27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::RefMut</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1RefMut.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::cmp::mut::RefMutBase</base>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1RefMut.html</anchorfile>
      <anchor>add354a4549c0535949b8e06c0c11096b</anchor>
      <arglist>() const noexcept -&gt; Ref&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1RefMut.html</anchorfile>
      <anchor>a542c2499a51df9a14629b1ad16453cf4</anchor>
      <arglist>() const noexcept -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator*</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1RefMut.html</anchorfile>
      <anchor>a1f6673fcaf4baa8cd8305259986eda9e</anchor>
      <arglist>() const noexcept -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator-&gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1RefMut.html</anchorfile>
      <anchor>afc9ec284f49086fca670a9bba59461ab</anchor>
      <arglist>() const noexcept -&gt; T *</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>nb::mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1RefMut.html</anchorfile>
      <anchor>a202186e6b12edfebc8df910f5e140c27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::cmp::mut::RefMutBase</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1cmp_1_1mut_1_1RefMutBase.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::relocate_pointer</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1relocate__pointer.html</filename>
    <templarg>typename T</templarg>
    <templarg>bool</templarg>
    <base>proxsuite::linalg::veg::_detail::_collections::relocate_pointer_trivial</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::collections::relocate_pointer</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1collections_1_1relocate__pointer.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::_detail::_collections::relocate_pointer&lt; T, bool &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::relocate_pointer&lt; T, false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1relocate__pointer_3_01T_00_01false_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::_detail::_collections::relocate_pointer_trivial</base>
    <member kind="variable" static="yes">
      <type>static constexpr void *(*</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1relocate__pointer_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a0fb988a9eed5988d0b45f2bfb931b3f7</anchor>
      <arglist>)(void *, void const *, usize)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::relocate_pointer_trivial</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1relocate__pointer__trivial.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr void *(*</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1relocate__pointer__trivial.html</anchorfile>
      <anchor>a34404fa584f974653f2e654f3af6297c</anchor>
      <arglist>)(void *, void const *, usize)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::RelocFn</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1RelocFn.html</filename>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1RelocFn.html</anchorfile>
      <anchor>a208adb70441a6c031695fac81285cab8</anchor>
      <arglist>(void *dst, void *src, usize n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>is_trivial</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1RelocFn.html</anchorfile>
      <anchor>ac431d47736563aba74468108f548d425</anchor>
      <arglist>() const noexcept -&gt; bool</arglist>
    </member>
    <member kind="variable">
      <type>void *(*</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1RelocFn.html</anchorfile>
      <anchor>a19bb19bb190612c7f53d2d4685a804ef</anchor>
      <arglist>)(void *, void const *, usize)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::Results</name>
    <filename>structproxsuite_1_1proxqp_1_1Results.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>Results</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>a7eaf352e952b4e68e6e672fa0f2521c2</anchor>
      <arglist>(isize dim=0, isize n_eq=0, isize n_in=0, bool box_constraints=false, DenseBackend dense_backend=DenseBackend::PrimalDualLDLT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>a5640c9f979165b9396c3506be80833f5</anchor>
      <arglist>(optional&lt; Settings&lt; T &gt; &gt; settings=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup_statistics</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>a7c7b0a63669b1631b07947e3c9ba16a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cold_start</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>a4856c7a61f02d0c14367907363ebd78b</anchor>
      <arglist>(optional&lt; Settings&lt; T &gt; &gt; settings=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup_all_except_prox_parameters</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>aeeb315fd2359221db34435216692c5ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>sparse::Vec&lt; T &gt;</type>
      <name>x</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>ad05a360234a4dce744c868b6aad72f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::Vec&lt; T &gt;</type>
      <name>y</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>ab412e8dbd9325586ca0d8b299a31b21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::Vec&lt; T &gt;</type>
      <name>z</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>a1be314db5179afe99216d9564ee35ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::Vec&lt; T &gt;</type>
      <name>se</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>abc45525fa7629407c261ef457ca4e8cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::Vec&lt; T &gt;</type>
      <name>si</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>a409d915cd4a3e64661ea1bdc18266ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; bool &gt;</type>
      <name>active_constraints</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>a5d19d99b013aac3affe9e07ce415ceca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Info&lt; T &gt;</type>
      <name>info</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Results.html</anchorfile>
      <anchor>a9815e12eaaf54fb2b6a371e5771cfe0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::Ret_</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1Ret__.html</filename>
    <templarg>typename Ret_</templarg>
    <templarg>typename... Args</templarg>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::ith&lt; I, Args... &gt;</type>
      <name>Arg</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1Ret__.html</anchorfile>
      <anchor>a015d8147f5b71b41ed8f287dcbacfbc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_</type>
      <name>Ret</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1Ret__.html</anchorfile>
      <anchor>a592dedc858fb669c543734237102f983</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::returns_void_impl</name>
    <filename>structtl_1_1detail_1_1returns__void__impl.html</filename>
    <templarg>class F</templarg>
    <templarg>class</templarg>
    <templarg>class... U</templarg>
  </compound>
  <compound kind="struct">
    <name>tl::detail::returns_void_impl&lt; F, void_t&lt; invoke_result_t&lt; F, U... &gt; &gt;, U... &gt;</name>
    <filename>structtl_1_1detail_1_1returns__void__impl_3_01F_00_01void__t_3_01invoke__result__t_3_01F_00_01U_d550cf27283c1c228efcceae556d7c6b.html</filename>
    <templarg>class F</templarg>
    <templarg>class... U</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RowColAccessImpl</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl.html</filename>
    <templarg>bool COLMAJOR</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RowColAccessImpl&lt; false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01false_01_4.html</filename>
    <member kind="typedef">
      <type>Eigen::Map&lt; const_if&lt; ptr_is_const&lt; decltype(VEG_DECLVAL(T &amp;&amp;).data())&gt;::value, OwnedColVector&lt; uncvref_t&lt; T &gt; &gt; &gt;, Eigen::Unaligned, Eigen::InnerStride&lt; uncvref_t&lt; T &gt;::OuterStrideAtCompileTime &gt; &gt;</type>
      <name>Col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01false_01_4.html</anchorfile>
      <anchor>aec0af192fcf5abc284232c0d4d9e45fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; const_if&lt; ptr_is_const&lt; decltype(VEG_DECLVAL(T &amp;&amp;).data())&gt;::value, OwnedRowVector&lt; uncvref_t&lt; T &gt; &gt; &gt;, Eigen::Unaligned, Eigen::InnerStride&lt; uncvref_t&lt; T &gt;::InnerStrideAtCompileTime &gt; &gt;</type>
      <name>Row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01false_01_4.html</anchorfile>
      <anchor>a7cf58cf28fe8ab7d60389e6a2b1a41c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01false_01_4.html</anchorfile>
      <anchor>a05e7fb8398fe8e4dab3b440691dc3b1a</anchor>
      <arglist>(T &amp;&amp;mat, isize col_idx) noexcept -&gt; Col&lt; T &gt;</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01false_01_4.html</anchorfile>
      <anchor>a7d1a37243733fbe35e9f0e739f0ef984</anchor>
      <arglist>(T &amp;&amp;mat, isize row_idx) noexcept -&gt; Row&lt; T &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::RowColAccessImpl&lt; true &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01true_01_4.html</filename>
    <member kind="typedef">
      <type>Eigen::Map&lt; const_if&lt; ptr_is_const&lt; decltype(VEG_DECLVAL(T &amp;&amp;).data())&gt;::value, OwnedColVector&lt; uncvref_t&lt; T &gt; &gt; &gt;, Eigen::Unaligned, Eigen::InnerStride&lt; uncvref_t&lt; T &gt;::InnerStrideAtCompileTime &gt; &gt;</type>
      <name>Col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01true_01_4.html</anchorfile>
      <anchor>a99fb22816c1b051110f95f4c2fa20061</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; const_if&lt; ptr_is_const&lt; decltype(VEG_DECLVAL(T &amp;&amp;).data())&gt;::value, OwnedRowVector&lt; uncvref_t&lt; T &gt; &gt; &gt;, Eigen::Unaligned, Eigen::InnerStride&lt; uncvref_t&lt; T &gt;::OuterStrideAtCompileTime &gt; &gt;</type>
      <name>Row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01true_01_4.html</anchorfile>
      <anchor>ad6434263f10ccfdd1588d7c3ba00e905</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01true_01_4.html</anchorfile>
      <anchor>a001d0afe08e3ae1a9c42ef0deb7b6c51</anchor>
      <arglist>(T &amp;&amp;mat, isize col_idx) noexcept -&gt; Col&lt; T &gt;</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1RowColAccessImpl_3_01true_01_4.html</anchorfile>
      <anchor>a20dc0ac0c0930038c52433c9830af3e2</anchor>
      <arglist>(T &amp;&amp;mat, isize row_idx) noexcept -&gt; Row&lt; T &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::preconditioner::RuizEquilibration</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>RuizEquilibration</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a556f55d5e72ee69e8edd042a8aba959c</anchor>
      <arglist>(isize dim_, isize n_eq_, isize n_in_, bool box_constraints, T epsilon_=T(1e-3), i64 max_iter_=10, Symmetry sym_=Symmetry::general, std::ostream *logger=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>aaa623cd4f16afb2ad8b0439082a36d58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_qp_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>af432a92d3280c296e128ba505d1c0175</anchor>
      <arglist>(QpViewBoxMut&lt; T &gt; qp, bool execute_preconditioner, bool preconditioning_for_infeasible_problems, const isize max_iter, const T epsilon, const HessianType &amp;HessianType, const bool box_constraints, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a5ae695bbf5fb3c646ed1a033ba24165c</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a8f21c2566ccd41015d7b3a515d3f8836</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>adb881a2cbb3d9422a4058fe308f1063d</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>acc3ccb7b1e231b48df049930d11d5043</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a139f67ba5d4c7946299dd5eeed033b0b</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>aa6bc2a668f8e8d5cc77504a73173e3ce</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_box_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>af1920f7b17b41943d1ca6ed7eaf607b4</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_box_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a3db70fb0c3646d1ce60140de7a06164d</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a7202b477a6cf0364b564e628ec231973</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a42a5bb68657a020d35cc87f4866f6eaf</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a95c4ec1393dba562252ef0f8f3834f2f</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a29051b5c8d29b2292c0a35ea7442c1fc</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_eq) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>ad63c2430267d115fc63c1b14e57f29ac</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_in) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_box_primal_residual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>aef163501116fda614104865c5d3e36ac</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_in) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>ab35fb77c8a721aa0f3922e6a648d2b2b</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a110a3d4b7879ec24fdd387fb2a210572</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_box_primal_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a8b90e6e16463bb83be4b500fe493d181</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a7949cc992d8d255022ad5eb3067f8c5b</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_eq) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a54d8d728b96913acdb63e2d1d112a0fe</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_in) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_box_primal_residual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>af7479b33b35f44b5344bb697e9a8786b</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_in) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>ab16a2d8f080740b3f2f62b6e08346fac</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>scale_qp_in_place_req</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a1f60bd67dd103752839cfa09d660b8a9</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt; tag, isize n, isize n_eq, isize n_in, bool box_constraints) -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>delta</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>aa9e9affe92df67262c9f8a58eb857f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>c</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>ad85f0188ef158eee29ce08304712d516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>dim</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a0f4eccd23f8167000c3ffe04a652706f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>ace40da6c467dd92cc5816d8c7d43857f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a41364a4baf3666d89655e739960577ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>epsilon</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>aa298aa59d9e6b56fafd1127c428df444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>i64</type>
      <name>max_iter</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a0cf2769231486325b268585a4aa070f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Symmetry</type>
      <name>sym</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>af7d470a6b11d88797843e0211a16a221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream *</type>
      <name>logger_ptr</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a6ead4383799958f626a2e9ab15b6946d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::preconditioner::RuizEquilibration</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="function">
      <type></type>
      <name>RuizEquilibration</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>aa3bbbc418fb37707537f9d602b83ef54</anchor>
      <arglist>(isize n_, isize n_eq_in, T epsilon_=T(1e-3), i64 max_iter_=10, Symmetry sym_=Symmetry::UPPER, std::ostream *logger=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_qp_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>af188e8e735b0c47cc3919d8b021fca30</anchor>
      <arglist>(QpViewMut&lt; T, I &gt; qp, bool execute_preconditioner, bool preconditioning_for_infeasible_problems, const isize max_iter, const T epsilon, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a5e674d6488016849618199f3f3bec7dd</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a22078d16a69844aae4074bb43575be59</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a642c5986b1afe592d9d864a076998a1b</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a04be726eef7db75e0f4a9a0fd1557015</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a8e1eae02bf93fd924cc82578855fb241</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>aa99bf97e6fb094d6c9241556e65677b9</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>addd18383c4d147d96a6e67da6ad0bc7e</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a3025cfaabdfea845b1a1dca366d4bbae</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>af33a7680c6ac5bf040958b48b3492ad4</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a4667753185fc108de0a4c071084e39b9</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_eq) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_primal_residual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>ae84158cc146d95f09b59353f0758966d</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_in) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_dual_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a2f60df9a67155603d795c69810c12005</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a3c0de8d26cc7b374e768c106e42e950f</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>adbd4ae454910bada130c6a1c8243550d</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_eq) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_primal_residual_in_place_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a0bac3d52dd69075364517f7190bacf23</anchor>
      <arglist>(VectorViewMut&lt; T &gt; primal_in) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unscale_dual_residual_in_place</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a2d8cc48628e988eaaf3406c19bc12a4c</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dual) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>scale_qp_in_place_req</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>ab4dbfc2856aa3eda8c45579105851582</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt; tag, isize n, isize n_eq, isize n_in) -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>delta</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>adc86ab7beab1dd2a3bcbca76bdd6fe0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>n</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>ad074d6d6dc1a111011058705e58f0b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>c</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a3caf36645e0ae702dc7596af10f0a4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>epsilon</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>ab1fbac8d89e1fe08564b831084d348fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>i64</type>
      <name>max_iter</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>a98475b0820c6fa930647f1146c321e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Symmetry</type>
      <name>sym</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>aa455a986368e857349f88ab08c6e3dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream *</type>
      <name>logger_ptr</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1RuizEquilibration.html</anchorfile>
      <anchor>aa552ee03b87511a06b2b7ff103e95583</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::Settings</name>
    <filename>structproxsuite_1_1proxqp_1_1Settings.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>Settings</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a863fba31ec65f4d6dfa900f18b4f8de1</anchor>
      <arglist>(DenseBackend dense_backend=DenseBackend::PrimalDualLDLT, T default_mu_eq=1.E-3, T default_mu_in=1.E-1, T alpha_bcl=0.1, T beta_bcl=0.9, T refactor_dual_feasibility_threshold=1e-2, T refactor_rho_threshold=1e-7, T mu_min_eq=1e-9, T mu_min_in=1e-8, T mu_max_eq_inv=1e9, T mu_max_in_inv=1e8, T mu_update_factor=0.1, T mu_update_inv_factor=10, T cold_reset_mu_eq=1./1.1, T cold_reset_mu_in=1./1.1, T cold_reset_mu_eq_inv=1.1, T cold_reset_mu_in_inv=1.1, T eps_abs=1.e-5, T eps_rel=0, isize max_iter=10000, isize max_iter_in=1500, isize safe_guard=1.E4, isize nb_iterative_refinement=10, T eps_refact=1.e-6, bool verbose=false, InitialGuessStatus initial_guess=InitialGuessStatus::EQUALITY_CONSTRAINED_INITIAL_GUESS, bool update_preconditioner=false, bool compute_preconditioner=true, bool compute_timings=false, bool check_duality_gap=false, T eps_duality_gap_abs=1.e-4, T eps_duality_gap_rel=0, isize preconditioner_max_iter=10, T preconditioner_accuracy=1.e-3, T eps_primal_inf=1.E-4, T eps_dual_inf=1.E-4, bool bcl_update=true, MeritFunctionType merit_function_type=MeritFunctionType::GPDAL, T alpha_gpdal=0.95, SparseBackend sparse_backend=SparseBackend::Automatic, bool primal_infeasibility_solving=false, isize frequence_infeasibility_check=1, T default_H_eigenvalue_estimate=0.)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>default_rho</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>abb76c84c6272aa074543ffb7c966d6c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>default_mu_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a3b964f117a16005d4b3c6b48179db16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>default_mu_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a3dfcdf85c73dfb841e6f509e481ee8b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>alpha_bcl</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a3dffdd487b107b6d08f57dfea1d5d871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>beta_bcl</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>af3ab3bd10e449f60b8e0c60c636363b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>refactor_dual_feasibility_threshold</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>afdb9d491ac29a8a7503a385c791a5c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>refactor_rho_threshold</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>aa6c24a82f3dc405552ed7a243c75e24f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_min_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a5b89004a27b65af57dda8530e3fe1b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_min_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a8feaf39a9749620a4bea7ddccc7cfe2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_max_eq_inv</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>ab5a200e1d6b6c1661e1d5b9619743d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_max_in_inv</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>aca7fd621a270e700134cca193a13f014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_update_factor</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>abcc768ec868ef4e85c9c7c96644c146b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mu_update_inv_factor</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a06b089b1f6df4de7a52c4c6222f6f78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>cold_reset_mu_eq</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a2817946ef5785036019bf462d4815dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>cold_reset_mu_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>aefd23c21f9e8d6e7ea3c327476f2c0a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>cold_reset_mu_eq_inv</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a1b440eeef649107a87fed97838812e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>cold_reset_mu_in_inv</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a6978be850a43560ad143623b2d7a3436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>eps_abs</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a624b45826fe104e586c58290f7cf424c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>eps_rel</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a22e40696e71c11d41f0b08ba55f09bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>max_iter</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a03139cb8fd8e02c4746943126d622101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>max_iter_in</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>ae610ae912fb5277ae46f0e7acdba21a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>safe_guard</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a47cafb3180c6604d04f8eae8c9c0c654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nb_iterative_refinement</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a65499e85dedd33b94ad33ee8b90ed612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>eps_refact</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a6100d1843aa26123a83f7b9b731c3a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a63b7d94ce07a31da6d5165e4564fa1bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InitialGuessStatus</type>
      <name>initial_guess</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>acabc33da38f1d3400dec16653f6453e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>update_preconditioner</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a54c8b3f19bcab9fdf7feeafb05ec5061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>compute_preconditioner</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>ae123f020e871c433542531dc08eb7744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>compute_timings</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a3b25078879ec2229c575df3043b295bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>check_duality_gap</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a4dd2f356585303f82961f3572cfe71c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>eps_duality_gap_abs</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>ae1f2e3183c5728a32cf1e7058d144d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>eps_duality_gap_rel</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a67c61d3a99b92799f3fa66f286a57817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>preconditioner_max_iter</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a724066db6e7ae44b95eb603c72f17ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>preconditioner_accuracy</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>acc106f3d790b5ed5855c9340a5f3f779</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>eps_primal_inf</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a549e9bca8d337e409ec4f15751480b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>eps_dual_inf</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a8b11a745706778cfb57273d00e02391d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bcl_update</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a175999aba3e97149fe7cc5aedb48f262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MeritFunctionType</type>
      <name>merit_function_type</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a07c273af5cc236360ec40cf27950474f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>alpha_gpdal</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a581173d5249a30e419b40c0a4828b643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparseBackend</type>
      <name>sparse_backend</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a0b4234ae406cb59a4ccf70fb8d6af1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>primal_infeasibility_solving</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a50bf93df04a4bb32e17e4754f3fb0525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>frequence_infeasibility_check</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>abfacb34c8a7af08b9ad35eb83f20e1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>default_H_eigenvalue_estimate</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Settings.html</anchorfile>
      <anchor>a3f3baccba053cad3c66f1ac392a34f80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::SetZeroImpl</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1SetZeroImpl.html</filename>
    <templarg>typename T</templarg>
    <templarg>bool</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1SetZeroImpl.html</anchorfile>
      <anchor>a3e0529ff64e1b8459010bae360f57861</anchor>
      <arglist>(T *dest, usize n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::SetZeroImpl&lt; T, true &gt;</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1SetZeroImpl_3_01T_00_01true_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1SetZeroImpl_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a43c86c71b9380c2ec94553ba485dc2da</anchor>
      <arglist>(T *dest, usize n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1SetZeroImpl.html</anchorfile>
      <anchor>a3e0529ff64e1b8459010bae360f57861</anchor>
      <arglist>(T *dest, usize n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::util::nb::sign_extend</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1sign__extend.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1sign__extend.html</anchorfile>
      <anchor>a658be90ce8601ad30237a91ff9cd1e89</anchor>
      <arglist>(I a) const noexcept -&gt; usize</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::dense::_detail::SimdAlignedSystemAlloc</name>
    <filename>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc.html</filename>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator==</name>
      <anchorfile>structproxsuite_1_1linalg_1_1dense_1_1__detail_1_1SimdAlignedSystemAlloc.html</anchorfile>
      <anchor>a91f190d29e73d50117471972d929da5d</anchor>
      <arglist>(SimdAlignedSystemAlloc, SimdAlignedSystemAlloc) noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::SimpleITuple</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1SimpleITuple.html</filename>
    <templarg>typename Seq</templarg>
    <templarg>typename... Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::SimpleITuple&lt; _meta::integer_sequence&lt; usize, Is... &gt;, Ts... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1SimpleITuple_3_01__meta_1_1integer__sequence_3_03280e6cc7eeb52352ef307fb2696e6bf.html</filename>
    <templarg>usize... Is</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::_detail::SimpleLeaf&lt; Is, Ts &gt;</base>
    <member kind="function">
      <type>constexpr</type>
      <name>SimpleITuple</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1SimpleITuple_3_01__meta_1_1integer__sequence_3_03280e6cc7eeb52352ef307fb2696e6bf.html</anchorfile>
      <anchor>a0be85670611e9dcc519fc78a03089d9a</anchor>
      <arglist>(Ts... args) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::SimpleLeaf</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1SimpleLeaf.html</filename>
    <templarg>usize I</templarg>
    <templarg>typename T</templarg>
    <member kind="variable">
      <type>T</type>
      <name>inner</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1SimpleLeaf.html</anchorfile>
      <anchor>af9f26ef7904625a0c84dca578e8277f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::Slice</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1Slice.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::_detail::_slice::adl::AdlBase</base>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Slice</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Slice.html</anchorfile>
      <anchor>a7609141ecabdd991fe4ab021e1b6c496</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Slice</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Slice.html</anchorfile>
      <anchor>a095866009ea10c20fdc3c217df0284f0</anchor>
      <arglist>(Unsafe, FromRawParts, T const *data_, isize count) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Slice.html</anchorfile>
      <anchor>a6744013c69be81c604b7d01997f9dc37</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; T const *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>len</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Slice.html</anchorfile>
      <anchor>a24fd713b0e4be804921db2ba7a06b31c</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Slice.html</anchorfile>
      <anchor>aaee31dc977844f483ecdf09f16d913eb</anchor>
      <arglist>(isize idx) const VEG_NOEXCEPT -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Slice.html</anchorfile>
      <anchor>a67bd50d0561ba74e027e22004d9f8fc2</anchor>
      <arglist>(Unsafe, isize idx) const VEG_NOEXCEPT -&gt; Ref&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>split_at</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Slice.html</anchorfile>
      <anchor>ab47a068f49d2542edee729aed075e76e</anchor>
      <arglist>(isize idx) const VEG_NOEXCEPT -&gt; Tuple&lt; Slice&lt; T &gt;, Slice&lt; T &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>as_bytes</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1Slice.html</anchorfile>
      <anchor>ae724b601c5e5659e5a96e6a8022977cd</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; Slice&lt; unsigned char &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Slice</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Slice.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::_detail::_slice::adl::AdlBase</base>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Slice</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Slice.html</anchorfile>
      <anchor>a7609141ecabdd991fe4ab021e1b6c496</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Slice</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Slice.html</anchorfile>
      <anchor>a095866009ea10c20fdc3c217df0284f0</anchor>
      <arglist>(Unsafe, FromRawParts, T const *data_, isize count) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Slice.html</anchorfile>
      <anchor>a6744013c69be81c604b7d01997f9dc37</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; T const *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>len</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Slice.html</anchorfile>
      <anchor>a24fd713b0e4be804921db2ba7a06b31c</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Slice.html</anchorfile>
      <anchor>aaee31dc977844f483ecdf09f16d913eb</anchor>
      <arglist>(isize idx) const VEG_NOEXCEPT -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Slice.html</anchorfile>
      <anchor>a67bd50d0561ba74e027e22004d9f8fc2</anchor>
      <arglist>(Unsafe, isize idx) const VEG_NOEXCEPT -&gt; Ref&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>split_at</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Slice.html</anchorfile>
      <anchor>ab47a068f49d2542edee729aed075e76e</anchor>
      <arglist>(isize idx) const VEG_NOEXCEPT -&gt; Tuple&lt; Slice&lt; T &gt;, Slice&lt; T &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>as_bytes</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Slice.html</anchorfile>
      <anchor>ae724b601c5e5659e5a96e6a8022977cd</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; Slice&lt; unsigned char &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::SliceMut</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1SliceMut.html</filename>
    <templarg>typename T</templarg>
    <base protection="private">proxsuite::linalg::veg::Slice&lt; T &gt;</base>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>SliceMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SliceMut.html</anchorfile>
      <anchor>a56f22cbdd29e119273623e9c4d11e5a9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>SliceMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SliceMut.html</anchorfile>
      <anchor>aeaa9e48c21c3703d0826865753174dbb</anchor>
      <arglist>(Unsafe, FromRawParts, T const *data_, isize count) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SliceMut.html</anchorfile>
      <anchor>a86156bb2d77ad736f51fbc4df13bdebf</anchor>
      <arglist>() const noexcept -&gt; Slice&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SliceMut.html</anchorfile>
      <anchor>a93cd90ec853ea0de1970b243ba9b9ecf</anchor>
      <arglist>(constexpr) auto operator[](isize idx) VEG_NOEXCEPT -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SliceMut.html</anchorfile>
      <anchor>a5db39402d5d0feef608cad2a42f8b927</anchor>
      <arglist>(constexpr) auto ptr_mut() VEG_NOEXCEPT -&gt; T *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SliceMut.html</anchorfile>
      <anchor>a83f40a9c1a62a3b436d9a5b91c98999d</anchor>
      <arglist>(constexpr) auto split_at_mut(isize idx) VEG_NOEXCEPT -&gt; Tuple&lt; SliceMut&lt; T &gt;, SliceMut&lt; T &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>get_mut_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SliceMut.html</anchorfile>
      <anchor>a0f4c7609016bdb1946a001694e3e69f8</anchor>
      <arglist>(Unsafe, isize idx) VEG_NOEXCEPT -&gt; RefMut&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>as_mut_bytes</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SliceMut.html</anchorfile>
      <anchor>a01e000420439c0a7e72286c384440e9d</anchor>
      <arglist>() VEG_NOEXCEPT -&gt; SliceMut&lt; unsigned char &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::SliceMut</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1SliceMut.html</filename>
    <templarg>typename T</templarg>
    <base protection="private">proxsuite::linalg::veg::Slice&lt; T &gt;</base>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>SliceMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1SliceMut.html</anchorfile>
      <anchor>a56f22cbdd29e119273623e9c4d11e5a9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>SliceMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1SliceMut.html</anchorfile>
      <anchor>aeaa9e48c21c3703d0826865753174dbb</anchor>
      <arglist>(Unsafe, FromRawParts, T const *data_, isize count) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1SliceMut.html</anchorfile>
      <anchor>a86156bb2d77ad736f51fbc4df13bdebf</anchor>
      <arglist>() const noexcept -&gt; Slice&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1SliceMut.html</anchorfile>
      <anchor>a93cd90ec853ea0de1970b243ba9b9ecf</anchor>
      <arglist>(constexpr) auto operator[](isize idx) VEG_NOEXCEPT -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1SliceMut.html</anchorfile>
      <anchor>a5db39402d5d0feef608cad2a42f8b927</anchor>
      <arglist>(constexpr) auto ptr_mut() VEG_NOEXCEPT -&gt; T *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>get_mut_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1SliceMut.html</anchorfile>
      <anchor>a0f4c7609016bdb1946a001694e3e69f8</anchor>
      <arglist>(Unsafe, isize idx) VEG_NOEXCEPT -&gt; RefMut&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>as_mut_bytes</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1SliceMut.html</anchorfile>
      <anchor>a01e000420439c0a7e72286c384440e9d</anchor>
      <arglist>() VEG_NOEXCEPT -&gt; SliceMut&lt; unsigned char &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1SliceMut.html</anchorfile>
      <anchor>a83f40a9c1a62a3b436d9a5b91c98999d</anchor>
      <arglist>(constexpr) auto split_at_mut(isize idx) VEG_NOEXCEPT -&gt; Tuple&lt; SliceMut&lt; T &gt;, SliceMut&lt; T &gt; &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::SparseModel</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</filename>
    <templarg>typename _Scalar</templarg>
    <member kind="enumvalue">
      <name>layout</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>a96bb300f2ea7faebe1c1c93d5bc45516a37f61476900d91d9d02bfce4c45bafdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>aa6de84e3851ff6adf5558f264ac45ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Eigen::Dynamic, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>adf0d0a4f8e8d5474910ff47b0e5dc4df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>layout</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>a96bb300f2ea7faebe1c1c93d5bc45516a37f61476900d91d9d02bfce4c45bafdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseModel</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>a37146513178bfaa843c99e65bc912951</anchor>
      <arglist>(const Eigen::SparseMatrix&lt; Scalar, 1 &gt; &amp;H, const Eigen::MatrixBase&lt; Vector_g &gt; &amp;g, const Eigen::SparseMatrix&lt; Scalar, 1 &gt; &amp;A, const Eigen::MatrixBase&lt; Vector_b &gt; &amp;b, const Eigen::SparseMatrix&lt; Scalar, 1 &gt; &amp;C, const Eigen::MatrixBase&lt; Vector_u &gt; &amp;u, const Eigen::MatrixBase&lt; Vector_l &gt; &amp;l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_view</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>a1c54a2f64236634233128c67f5232686</anchor>
      <arglist>() -&gt; proxqp::dense::QpView&lt; Scalar &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_mut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>af7ebec058e33bdc71f8054df9fd3acce</anchor>
      <arglist>() -&gt; proxqp::dense::QpViewMut&lt; Scalar &gt;</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::SparseMatrix&lt; Scalar, 1 &gt;</type>
      <name>H</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>a66613eb6d918fb3a49d0fa05fd606869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>af9dfe51f57b411571ffaf4dda17f6f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::SparseMatrix&lt; Scalar, 1 &gt;</type>
      <name>A</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>a919f2bffd55a81fbaca494486d6ae1f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>a516b900ad0135214d3f9b327aba0e26b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::SparseMatrix&lt; Scalar, 1 &gt;</type>
      <name>C</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>a499b1e560d365e23919433996d3d9ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>u</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>aca49c9bb18bc65091e95a16cb2c7cc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>l</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1SparseModel.html</anchorfile>
      <anchor>aeed8a31478563712a1f9bb66538c0034</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::specialize_len</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1specialize__len.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; usize, 0 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::specialize_len&lt; F, F&lt; Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1specialize__len_3_01F_00_01F_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; usize, 0 &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; usize, sizeof...(Ts)&gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::specializes</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1specializes.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::specializes&lt; F, F&lt; Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1specializes_3_01F_00_01F_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; false &gt;</base>
    <base>proxsuite::linalg::veg::meta::constant&lt; bool, B &gt;&lt; true &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::nb::sqrt</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1nb_1_1sqrt.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1nb_1_1sqrt.html</anchorfile>
      <anchor>a1d5446ec4da9196b9af47fa98bcbaa8a</anchor>
      <arglist>(T x) const -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::StackAlloc</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1StackAlloc.html</filename>
    <templarg>usize MaxAlign</templarg>
    <base protection="private">proxsuite::linalg::veg::mem::BumpAlloc&lt; MaxAlign &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::dynstack::StackReq</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>alloc_req</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</anchorfile>
      <anchor>ace989b105284335922cc67746d93f6f8</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>with_len</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</anchorfile>
      <anchor>a959c6861823380dcfdb51e4ea1719184</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, isize len) noexcept -&gt; StackReq</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</anchorfile>
      <anchor>a89778de434560704b45146b9617696e5</anchor>
      <arglist>(constexpr) auto and_(Slice&lt; StackReq &gt; reqs) noexcept -&gt; StackReq</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</anchorfile>
      <anchor>af16878bedde0ed78a5ab70e40cc483ff</anchor>
      <arglist>(constexpr) auto or_(Slice&lt; StackReq &gt; reqs) noexcept -&gt; StackReq</arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>size_bytes</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</anchorfile>
      <anchor>af2fa898866b5558465ce58840efd25cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>align</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</anchorfile>
      <anchor>a978128ebd962ebca01a9012b4ad2716d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend auto</type>
      <name>operator==</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</anchorfile>
      <anchor>aee1bd04296c7dae9a709a044a60b8c88</anchor>
      <arglist>(StackReq a, StackReq b) noexcept -&gt; bool</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend auto</type>
      <name>operator&amp;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</anchorfile>
      <anchor>a1dbf3abadd43a1a1b351b28d2b821f9e</anchor>
      <arglist>(StackReq a, StackReq b) noexcept -&gt; StackReq</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend auto</type>
      <name>operator|</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1dynstack_1_1StackReq.html</anchorfile>
      <anchor>ab9d8730ff5fe0df3e98b6a086bf8dc1c</anchor>
      <arglist>(StackReq a, StackReq b) noexcept -&gt; StackReq</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::static_const</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1static__const.html</filename>
    <templarg>typename T</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr T</type>
      <name>value</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1static__const.html</anchorfile>
      <anchor>ad4dd05ceb3a9dfe766c0d4aa53de3440</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Str</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Str.html</filename>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>Str</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Str.html</anchorfile>
      <anchor>afe8e31a8b4a25ee436b57284a05a70df</anchor>
      <arglist>(Unsafe, FromRawParts, CharUnit const *ptr, isize len) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>as_slice</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Str.html</anchorfile>
      <anchor>a796a62c7efe73f4044e70f2fdb866fe2</anchor>
      <arglist>() const noexcept -&gt; Slice&lt; CharUnit &gt;</arglist>
    </member>
    <member kind="variable">
      <type>CharUnit const  *</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Str.html</anchorfile>
      <anchor>afce1dbff7a92ee90e120dbc8c6edb0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>len</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Str.html</anchorfile>
      <anchor>ad54033cea1ec68be5fcf6e680bef9b97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::StridedVectorView</name>
    <filename>structproxsuite_1_1proxqp_1_1StridedVectorView.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>StridedVectorView</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorView.html</anchorfile>
      <anchor>ae7aec170cad2b1cd691125fa0a051fe8</anchor>
      <arglist>(FromPtrSizeStride, T const *_data, isize _dim, isize _stride) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorView.html</anchorfile>
      <anchor>adaa5d2712d1bbcd9699c637462b077eb</anchor>
      <arglist>(typename Vec, requires(LDLT_CONCEPT(eigen_strided_vector_view&lt; Vec, T &gt;)), VEG_INLINE StridedVectorView,(, FromEigen),(vec, Vec const &amp;)) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorView.html</anchorfile>
      <anchor>aa111532415fac1540fb6655b73484f58</anchor>
      <arglist>(isize index) const noexcept -&gt; T const *</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorView.html</anchorfile>
      <anchor>a4448bd2ba8422a65b3fadf9baa925a33</anchor>
      <arglist>(isize index) const noexcept -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>segment</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorView.html</anchorfile>
      <anchor>a5331a7147ec1bcab7f5fba5cb31e1d8e</anchor>
      <arglist>(isize i, isize size) const noexcept -&gt; StridedVectorView</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorView.html</anchorfile>
      <anchor>ab6e08e64284c3f4dfe8c08ac03c085e9</anchor>
      <arglist>() const -&gt; detail::EigenVecMap&lt; T, Eigen::InnerStride&lt; Eigen::Dynamic &gt; &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorView.html</anchorfile>
      <anchor>a7c0b1ff57cb0f9bcd52c5aa3ed8801db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>dim</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorView.html</anchorfile>
      <anchor>acf8efb01030eb1574d50d362ed0a554f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>stride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorView.html</anchorfile>
      <anchor>af0522a5604e7c932da95c4b4ff9a5402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::StridedVectorViewMut</name>
    <filename>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>StridedVectorViewMut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>aca08e2614f4288b3e29b638dcb70f836</anchor>
      <arglist>(FromPtrSizeStride, T *_data, isize _dim, isize _stride) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>a4b2f3e2396a0d03bdbf08f13f0182ae6</anchor>
      <arglist>(typename Vec, requires(LDLT_CONCEPT(eigen_strided_vector_view_mut&lt; Vec, T &gt;)), VEG_INLINE StridedVectorViewMut,(, FromEigen),(vec, Vec &amp;&amp;)) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>a71eae98b1a86147c9c1c90f4538d2238</anchor>
      <arglist>() const noexcept -&gt; StridedVectorView&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>ac45febce90e76a0d11b179cd90afd2ce</anchor>
      <arglist>(isize index) const noexcept -&gt; T *</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>a8860df306aefa536d0d27ddbff680eca</anchor>
      <arglist>(isize index) const noexcept -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>segment</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>ae6aec25a36dea8b9f32d7ea4f16f87b1</anchor>
      <arglist>(isize i, isize size) const noexcept -&gt; StridedVectorViewMut</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>adbd1fcce7953befc5ed3f5b438accda6</anchor>
      <arglist>() const -&gt; detail::EigenVecMapMut&lt; T, Eigen::InnerStride&lt; Eigen::Dynamic &gt; &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>a30e6a43d9b132117c13ab46b10edf224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>dim</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>a3a333831197135fad819a9f608899e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>stride</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1StridedVectorViewMut.html</anchorfile>
      <anchor>ac1109efbcb1914c548551e13c8896609</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::StrLiteralConstant</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1StrLiteralConstant.html</filename>
    <templarg>CharUnit... Cs</templarg>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>as_slice</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1StrLiteralConstant.html</anchorfile>
      <anchor>ab9c20a50954657a62d44766e794e74d1</anchor>
      <arglist>() const noexcept -&gt; Slice&lt; CharUnit &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>as_str</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1StrLiteralConstant.html</anchorfile>
      <anchor>acc1579648ed2347c54f1c49bbd1a2db9</anchor>
      <arglist>() const noexcept -&gt; Str</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::SymbolicMatMut</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</filename>
    <templarg>typename I</templarg>
    <base>proxsuite::linalg::sparse::_detail::SymbolicMatMutInterface&lt; SymbolicMatMut&lt; isize &gt;, isize &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicMatMut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>a55412a617e56cfee2af88cc9d00de79a</anchor>
      <arglist>(FromRawParts, isize nrows, isize ncols, isize nnz, I *col_ptrs, I *nnz_per_col, I *row_indices)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>a26741d5ab74b6c9a95c4a3e402596870</anchor>
      <arglist>() const noexcept -&gt; SymbolicMatRef&lt; I &gt;</arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nrows</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>a266cdd53ce242165ed507e80b9d56f14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>ncols</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>a4c7d897c57a7e6b7a675dfb04ed9f8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nnz</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>a8a01cea4c5b8dd6f9861ae8d88bf599b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I *</type>
      <name>col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>ae65405bd394d3a0a6d305967961870a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I *</type>
      <name>nnz_per_col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>ae1a35c4a5776b61b6ef842117e3d0f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I *</type>
      <name>row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>a8d1132db6462bc13271f612c7d4796ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::SymbolicMatRefInterface&lt; SymbolicMatMut, I &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>ac0e8c9a9e2d41b8da3a83edba8ded9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::SymbolicMatMutInterface&lt; SymbolicMatMut, I &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatMut.html</anchorfile>
      <anchor>a4239a1c22710e833cd2408997e5bf810</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::_detail::SymbolicMatMutInterface</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatMutInterface.html</filename>
    <templarg>typename D</templarg>
    <templarg>typename I</templarg>
    <base>proxsuite::linalg::sparse::_detail::SymbolicMatRefInterface&lt; D, I &gt;</base>
    <member kind="function">
      <type>auto</type>
      <name>col_ptrs_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatMutInterface.html</anchorfile>
      <anchor>abfbed304cbf9c59b57aae4d277d46f9d</anchor>
      <arglist>() noexcept -&gt; I *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nnz_per_col_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatMutInterface.html</anchorfile>
      <anchor>a8c92e28b4bbbd1d5cef08f64c36ddd42</anchor>
      <arglist>() noexcept -&gt; I *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>row_indices_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatMutInterface.html</anchorfile>
      <anchor>a9dfbabdde341d910121ad73462ac7515</anchor>
      <arglist>() noexcept -&gt; I *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::SymbolicMatRef</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatRef.html</filename>
    <templarg>typename I</templarg>
    <base>proxsuite::linalg::sparse::_detail::SymbolicMatRefInterface&lt; SymbolicMatRef&lt; isize &gt;, isize &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicMatRef</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatRef.html</anchorfile>
      <anchor>a7b547f423fd8ad85df7249f2d281f50f</anchor>
      <arglist>(FromRawParts, isize nrows, isize ncols, isize nnz, I const *col_ptrs, I const *nnz_per_col, I const *row_indices)</arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nrows</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatRef.html</anchorfile>
      <anchor>a815989c149177ed8f8f6b1f1299a4937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>ncols</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatRef.html</anchorfile>
      <anchor>ac24fb0860296bcaf45afdeee8ad33e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nnz</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatRef.html</anchorfile>
      <anchor>aafad1b6c4bf2f2d708c0be6d386f4676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I const  *</type>
      <name>col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatRef.html</anchorfile>
      <anchor>a7a0becf6ef94c6b616e68e970bb023fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I const  *</type>
      <name>nnz_per_col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatRef.html</anchorfile>
      <anchor>adc034d5f7e7270cf97fe5501fceb2af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I const  *</type>
      <name>row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatRef.html</anchorfile>
      <anchor>a9e4ae7999b5b8be79117871206dd9695</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>_detail::SymbolicMatRefInterface&lt; SymbolicMatRef, I &gt;</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1SymbolicMatRef.html</anchorfile>
      <anchor>a15aea958c4755e474998a649467b02db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::_detail::SymbolicMatRefInterface</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</filename>
    <templarg>typename D</templarg>
    <templarg>typename I</templarg>
    <member kind="function">
      <type>auto</type>
      <name>nrows</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a50dd66335f43959c3215650acfdc1e81</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ncols</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a7999696cd8ef3492084a8529e9a473f8</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nnz</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a6e4b4658f83848030a1f2ec70a31e5e7</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>col_ptrs</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a2e21b3f4391f0e43b7a0b4eab5dddd65</anchor>
      <arglist>() const noexcept -&gt; I const *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nnz_per_col</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a948375a0f035cded86c2df8d05820ae5</anchor>
      <arglist>() const noexcept -&gt; I const *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>is_compressed</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a98603a95fed7ef9b202840eeb8a56d59</anchor>
      <arglist>() const noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>row_indices</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a5aaa246a6f616bc9cfcb33889bd3e88c</anchor>
      <arglist>() const noexcept -&gt; I const *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>col_start</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a1937a284f8f09d1262049143c003d0fa</anchor>
      <arglist>(usize j) const noexcept -&gt; usize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>col_start_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>ae7965aae9bdedbbcf7d3c6d01a807ddf</anchor>
      <arglist>(Unsafe, usize j) const noexcept -&gt; usize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>col_end</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a26481c17fd79c037cc8a34d246128147</anchor>
      <arglist>(usize j) const noexcept -&gt; usize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>col_end_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1__detail_1_1SymbolicMatRefInterface.html</anchorfile>
      <anchor>a7871723724a139a53ea92c68fce44d30</anchor>
      <arglist>(Unsafe, usize j) const noexcept -&gt; usize</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::mem::SystemAlloc</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1SystemAlloc.html</filename>
    <member kind="friend">
      <type>constexpr friend auto</type>
      <name>operator==</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1mem_1_1SystemAlloc.html</anchorfile>
      <anchor>ac836c1d01c931f5112b3dbc2ca8743e6</anchor>
      <arglist>(SystemAlloc, SystemAlloc) noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::swap_adl_tests::tag</name>
    <filename>structtl_1_1detail_1_1swap__adl__tests_1_1tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::Timer</name>
    <filename>structproxsuite_1_1proxqp_1_1Timer.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>af60b8fcdfe79fcaedaea9a516f51031a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CPUTimes</type>
      <name>elapsed</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>a546f5dae8a8c4861c5b278c6f419ec4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>a02c648a8299ac45b8c2a1fbbe2534c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>ad51c2e48f1a498b2b50c4eeea2f6adcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>a6c6527d187aa16d4f3cd20b4e097a287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_stopped</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>a72510313df78ed1a0a4d9f616e406cc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CPUTimes</type>
      <name>m_times</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>aa10f9c6772d0a89869d18744966d4889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_is_stopped</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>ae8dec5c94f54e654f85a6018b3736f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::chrono::time_point&lt; std::chrono::steady_clock &gt;</type>
      <name>m_start</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>a6de3cc647f2e5d4d71038f5b8b0a023b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::chrono::time_point&lt; std::chrono::steady_clock &gt;</type>
      <name>m_end</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1Timer.html</anchorfile>
      <anchor>a52092ba3fd1961f16fb195e06eceedae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Tuple</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Tuple.html</filename>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::tuple::IndexedTuple&lt; meta::make_index_sequence&lt; sizeof...(Ts)&gt;, Ts... &gt;</base>
    <member kind="typedef">
      <type>tuple::IndexedTuple&lt; meta::make_index_sequence&lt; sizeof...(Ts)&gt;, Ts... &gt;</type>
      <name>Indexed</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Tuple.html</anchorfile>
      <anchor>ac7798f6f66e0330f4b4132e7ef6f249e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_EXPLICIT_COPY</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Tuple.html</anchorfile>
      <anchor>a2d1343dae25cf739cd07cccaa9f3d3ee</anchor>
      <arglist>(Tuple)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::Tuple</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1Tuple.html</filename>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::tuple::IndexedTuple&lt; meta::make_index_sequence&lt; sizeof...(Ts)&gt;, Ts... &gt;</base>
    <member kind="typedef">
      <type>tuple::IndexedTuple&lt; meta::make_index_sequence&lt; sizeof...(Ts)&gt;, Ts... &gt;</type>
      <name>Indexed</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1Tuple.html</anchorfile>
      <anchor>ac7798f6f66e0330f4b4132e7ef6f249e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_EXPLICIT_COPY</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1Tuple.html</anchorfile>
      <anchor>a2d1343dae25cf739cd07cccaa9f3d3ee</anchor>
      <arglist>(Tuple)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; I, proxsuite::linalg::veg::Tuple&lt; Ts... &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01I_00_01proxsuite_1_1linalg_1_1veg_1_1Tuple_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>proxsuite::linalg::veg::usize I</templarg>
    <templarg>typename... Ts</templarg>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::ith&lt; I, Ts... &gt;</type>
      <name>type</name>
      <anchorfile>structstd_1_1tuple__element_3_01I_00_01proxsuite_1_1linalg_1_1veg_1_1Tuple_3_01Ts_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>addf87c1bc1173ab862c1a7c0594dddba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; proxsuite::linalg::veg::Tuple&lt; Ts... &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01proxsuite_1_1linalg_1_1veg_1_1Tuple_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>typename... Ts</templarg>
    <base>proxsuite::linalg::veg::meta::constant&lt; proxsuite::linalg::veg::usize, sizeof...(Ts)&gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::meta_::TupleBaseInfoImpl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1TupleBaseInfoImpl.html</filename>
    <templarg>typename... Ts</templarg>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::ith&lt; I, Ts... &gt;</type>
      <name>ith</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1TupleBaseInfoImpl.html</anchorfile>
      <anchor>a3637537d6463ebaa460de05e041fc849</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::type_sequence&lt; Ts... &gt;</type>
      <name>seq</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1TupleBaseInfoImpl.html</anchorfile>
      <anchor>acad069b9f6aa5c06ea4195d45a58f039</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::Tuple&lt; Ts... &gt;</type>
      <name>Tuple</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1TupleBaseInfoImpl.html</anchorfile>
      <anchor>ab5dd4dd22bca0e175640a09e64b007fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::tuple:: IndexedTuple&lt; meta::make_index_sequence&lt; sizeof...(Ts)&gt;, Ts... &gt;</type>
      <name>IndexedTuple</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1TupleBaseInfoImpl.html</anchorfile>
      <anchor>a5390cb87d127e809ff5bf187a1389dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_tuple</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1TupleBaseInfoImpl.html</anchorfile>
      <anchor>aeb7437003368d47438b58205026d3625</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr usize</type>
      <name>size</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta___1_1TupleBaseInfoImpl.html</anchorfile>
      <anchor>ab949cc0dd8493aea56980b0de7123cbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::TupleLeaf</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeaf.html</filename>
    <templarg>usize I</templarg>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::tuple::TupleLeafImpl&lt; T, bool &gt;</base>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::TupleLeafImpl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl.html</filename>
    <templarg>typename T</templarg>
    <templarg>bool</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::TupleLeafImpl&lt; T, false &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl_3_01T_00_01false_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>TupleLeafImpl</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>af2ff65a11ef963d00e8a4e2e4ef44c1c</anchor>
      <arglist>(InPlace&lt; void &gt;, Fn fn) VEG_NOEXCEPT_LIKE(VEG_FWD(fn)())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TupleLeafImpl</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>aeda59f058ca9f94e6d79c3de5b80eddf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>leaf_get</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a97cf3b5f1d1595d2e3014112fbbc5665</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; T &amp;</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>leaf</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a8aeeb95da4e8dafed4c2a306d5c92ad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::TupleLeafImpl&lt; T, true &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl_3_01T_00_01true_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE constexpr</type>
      <name>TupleLeafImpl</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a9fa70cbb60377155cfad734bdbdb507a</anchor>
      <arglist>(InPlace&lt; void &gt;, Fn fn) VEG_NOEXCEPT_LIKE(VEG_FWD(fn)())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TupleLeafImpl</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a834b0ffdea0a642e0709803e6f438942</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>leaf_get</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1TupleLeafImpl_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>afdec0b14c89899d096d8a09b1d45d112</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; T &amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::tuplify</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1tuplify.html</filename>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1tuplify.html</anchorfile>
      <anchor>a935cadc529630478102c77c28582b631</anchor>
      <arglist>(Ts... args) const VEG_NOEXCEPT -&gt; proxsuite::linalg::veg::Tuple&lt; Ts... &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::type_identity</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1type__identity.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1type__identity.html</anchorfile>
      <anchor>a5cb2f257631df99bc12345fff79ce515</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::type_sequence</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1type__sequence.html</filename>
    <templarg>typename... Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::uncvlref</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1uncvlref.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T &amp; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1uncvlref_3_01T_01_6_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1uncvlref_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a1c09b7cc3846ba0e4c6d296607307427</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T const &amp; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1uncvlref_3_01T_01const_01_6_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1uncvlref_3_01T_01const_01_6_01_4.html</anchorfile>
      <anchor>a144d8be0572843ec74e1e19cdd5f00ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T volatile &amp; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1uncvlref_3_01T_01volatile_01_6_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1uncvlref_3_01T_01volatile_01_6_01_4.html</anchorfile>
      <anchor>aaa5729fadfc3ecfb7b2aaab0c2a153f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T volatile const &amp; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1uncvlref_3_01T_01volatile_01const_01_6_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1uncvlref_3_01T_01volatile_01const_01_6_01_4.html</anchorfile>
      <anchor>a4b42d193c120724e069a047a594cfb70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::unlref</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1unlref.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1unlref.html</anchorfile>
      <anchor>ab9ea3132dfb21b0affd0ec7fa444b8f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::detail::unlref&lt; T &amp; &gt;</name>
    <filename>structproxsuite_1_1proxqp_1_1detail_1_1unlref_3_01T_01_6_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1unlref_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a4d49524ee7aba78a1f2d2f611e10b22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Type</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1detail_1_1unlref.html</anchorfile>
      <anchor>ab9ea3132dfb21b0affd0ec7fa444b8f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::unpack</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1unpack.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1unpack.html</anchorfile>
      <anchor>ab299f9f964cf6fa37ebc6bccc9e0517a</anchor>
      <arglist>((typename Fn, typename... Ts, usize... Is), requires(VEG_CONCEPT(fn_once&lt; Fn, proxsuite::linalg::veg::meta::invoke_result_t&lt; Fn, Ts &amp;&amp;... &gt;, Ts &amp;&amp;... &gt;)), VEG_INLINE constexpr auto operator(),(args, IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ts... &gt; &amp;&amp;),(fn, Fn)) const VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_fn_once&lt; Fn</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::nb::unreachable</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1nb_1_1unreachable.html</filename>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1nb_1_1unreachable.html</anchorfile>
      <anchor>a72c8acdeaa09190bc7a1200747257af9</anchor>
      <arglist>() const VEG_NOEXCEPT</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::meta::nb::unreachable_if</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1nb_1_1unreachable__if.html</filename>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1meta_1_1nb_1_1unreachable__if.html</anchorfile>
      <anchor>a0ffbeb6e17b857d5b3628293e55805e5</anchor>
      <arglist>(bool Cond) const VEG_NOEXCEPT -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::unref</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1unref.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::unref&lt; T &amp; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1unref_3_01T_01_6_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1unref_3_01T_01_6_01_4.html</anchorfile>
      <anchor>af6abb2420df4a14a1fca50bee504488f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::nb::unused</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1unused.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1nb_1_1unused.html</anchorfile>
      <anchor>a9ab7c1b8fffd95be26c2de7b9c5e7432</anchor>
      <arglist>(Ts const &amp;...) const VEG_NOEXCEPT</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::Vec</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1Vec.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename A</templarg>
    <templarg>mem::DtorAvailable Dtor</templarg>
    <templarg>mem::CopyAvailable Copy</templarg>
    <base protection="private">proxsuite::linalg::veg::_detail::_vector::adl::AdlBase</base>
    <base>proxsuite::linalg::veg::_detail::_collections::VecImpl&lt; T, A, Dtor, Copy &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Vec.html</anchorfile>
      <anchor>aa89db496b4eaed1f495b22d43500c790</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_EXPLICIT_COPY</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1Vec.html</anchorfile>
      <anchor>abd2227c74c16288a0da762b989666564</anchor>
      <arglist>(Vec)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_vector::VecAlloc</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1VecAlloc.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename A</templarg>
    <base>proxsuite::linalg::veg::Tuple&lt; A, RawVectorMoveRaii&lt; T &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>VecAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1VecAlloc.html</anchorfile>
      <anchor>ad5ab55860edacabdd24a1cda51e7a09f</anchor>
      <arglist>(VecAlloc const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VecAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1VecAlloc.html</anchorfile>
      <anchor>aa171ebe9ebbd8c3d0d1f57ec99adff69</anchor>
      <arglist>(VecAlloc &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1VecAlloc.html</anchorfile>
      <anchor>a3d917f55ce352af8bb08fae0bb81782b</anchor>
      <arglist>(VecAlloc const &amp;) -&gt; VecAlloc &amp;=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1VecAlloc.html</anchorfile>
      <anchor>a528a3127d7986c3f934891a38644f661</anchor>
      <arglist>(VecAlloc &amp;&amp;) -&gt; VecAlloc &amp;=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>~VecAlloc</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1VecAlloc.html</anchorfile>
      <anchor>a5e13e35cd19c624ba85e87e45192c45d</anchor>
      <arglist>() VEG_NOEXCEPT_IF(VEG_CONCEPT(alloc</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_collections::VecImpl</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename A</templarg>
    <templarg>mem::DtorAvailable Dtor</templarg>
    <templarg>mem::CopyAvailable Copy</templarg>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>ae672c5a4836c5dd3b15f715daeeccfba</anchor>
      <arglist>(constexpr) auto alloc_ref() const VEG_NOEXCEPT -&gt; Ref&lt; A &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a842cea6ce658dd0b76750b5008f229b0</anchor>
      <arglist>(constexpr) auto raw_ref() const VEG_NOEXCEPT -&gt; Ref&lt; vector::RawVector&lt; T &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a6fe9b25a73b452534ae93354ae645f85</anchor>
      <arglist>(constexpr) auto alloc_mut(Unsafe) VEG_NOEXCEPT -&gt; RefMut&lt; A &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE</type>
      <name>VEG_CPP14</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>aa3aae1b5d5dca843fb8c0764a45a62f8</anchor>
      <arglist>(constexpr) auto raw_mut(Unsafe) VEG_NOEXCEPT -&gt; RefMut&lt; vector::RawVector&lt; T &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>~VecImpl</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a14b840ccea371ef49cd22d4be2fe5ceb</anchor>
      <arglist>() VEG_NOEXCEPT_IF(Dtor</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>VecImpl</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a4e18ab17340122e53ea3e8fe9b1ea494</anchor>
      <arglist>(Unsafe, FromRawParts, vector::RawVector&lt; T &gt; rawvec, A alloc) VEG_NOEXCEPT</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>VecImpl</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a510b969deb0796a66d2aacd7b9bb1a26</anchor>
      <arglist>(VecImpl &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a89901a8226296033187161d853781471</anchor>
      <arglist>(VecImpl &amp;&amp;rhs) -&gt; VecImpl &amp;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VecImpl</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>aad35316f8ec1cc676de0c19a1fa9c749</anchor>
      <arglist>(VecImpl const &amp;rhs) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_copyable&lt; A &gt;) &amp;&amp;VEG_CONCEPT(alloc</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>aa96a32a5cf5a194f3c516242473ac583</anchor>
      <arglist>(VecImpl const &amp;rhs) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_copy_assignable&lt; A &gt;) &amp;&amp;VEG_CONCEPT(alloc</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>reserve_exact</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>af57f89a22c47c90304ebadd45baf9708</anchor>
      <arglist>(isize new_cap)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>reserve</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>adf5f4edab8a2cc3215e4e14914b875ea</anchor>
      <arglist>(isize new_cap)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>pop_several_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a3a0b24e68989d7459cda9af30b6d1001</anchor>
      <arglist>(Unsafe unsafe, isize n)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>pop_several</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a9c446be95ced0e3777c66ad84de43fde</anchor>
      <arglist>(isize n)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>pop_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>ade68f445cb9e0f28ed0c6f04c1fc731a</anchor>
      <arglist>(Unsafe) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_movable&lt; T &gt;)) -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>pop_mid_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a199586803142ab956d8c278bfcde5149</anchor>
      <arglist>(Unsafe, isize i) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_movable&lt; T &gt;)) -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>pop</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a0c08a84c6c97ce0eb86716452ad0544b</anchor>
      <arglist>() VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_movable&lt; T &gt;)) -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>pop_mid</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>ae8c2bb39a1b803ebfb2595d47a9a2434</anchor>
      <arglist>(isize i) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_movable&lt; T &gt;)) -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>clear</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>af5a121d1356aea20241524a7aed0f842</anchor>
      <arglist>() VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_destructible&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>aa33167d703ee8efbbdc677c461617086</anchor>
      <arglist>(typename U=T, requires(VEG_CONCEPT(constructible&lt; U &gt;)), void resize,(n, isize)) VEG_NOEXCEPT_IF(VEG_CONCEPT(alloc</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a1022642fcb0a1f76861d445439a667a9</anchor>
      <arglist>(typename U=T, requires(VEG_CONCEPT(constructible&lt; U &gt;)), void resize_for_overwrite,(n, isize)) VEG_NOEXCEPT_IF(VEG_CONCEPT(alloc</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a3e8406461ec6454b735f9d693c2b46dd</anchor>
      <arglist>(typename Fn, requires(VEG_CONCEPT(fn_once&lt; Fn, T &gt;)), VEG_INLINE void push_mid_with,(fn, Fn),(i, isize)) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_fn_once&lt; Fn</arglist>
    </member>
    <member kind="function">
      <type>T &amp;&amp;</type>
      <name>VEG_CONCEPT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a8fb0a9a4846b06c96958b5f6de33e9aa</anchor>
      <arglist>(alloc::nothrow_alloc&lt; A &gt;))</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>push_mid</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a5ec068c84134ef6bc8b8d82cf2884465</anchor>
      <arglist>(T value, isize i) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_movable&lt; T &gt;) &amp;&amp;VEG_CONCEPT(alloc</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>adf6c70a26682c05a620eeb6d12c48552</anchor>
      <arglist>(typename Fn, requires(VEG_CONCEPT(fn_once&lt; Fn, T &gt;)), VEG_INLINE void push_with_unchecked,(, Unsafe),(fn, Fn)) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_fn_once&lt; Fn</arglist>
    </member>
    <member kind="function">
      <type>T &amp;&amp;</type>
      <name>VEG_CONCEPT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a8fb0a9a4846b06c96958b5f6de33e9aa</anchor>
      <arglist>(alloc::nothrow_alloc&lt; A &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>af2b8bfbea58bbc792701a962701e3434</anchor>
      <arglist>(typename Fn, requires(VEG_CONCEPT(fn_once&lt; Fn, T &gt;)), VEG_INLINE void push_with,(fn, Fn)) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_fn_once&lt; Fn</arglist>
    </member>
    <member kind="function">
      <type>T &amp;&amp;</type>
      <name>VEG_CONCEPT</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a8fb0a9a4846b06c96958b5f6de33e9aa</anchor>
      <arglist>(alloc::nothrow_alloc&lt; A &gt;))</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>push</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>ae0acbfb510aeb72ae368d644ce0b483b</anchor>
      <arglist>(T value) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_movable&lt; T &gt;) &amp;&amp;VEG_CONCEPT(alloc</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>push_unchecked</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a5e59f9acae3b0c8ae5371aecf6b83813</anchor>
      <arglist>(Unsafe, T value)</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>as_ref</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>acde3e13e7a9155d9410abea74c4117e0</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; Slice&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>as_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a7e9fa8c6fbb14eb4ab185c9e8a683eba</anchor>
      <arglist>() VEG_NOEXCEPT -&gt; SliceMut&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a83550938ea13b4057e1b9bbcf76814e2</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; T const *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>ptr_mut</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a557ec40e2197336e518325da80e31048</anchor>
      <arglist>() VEG_NOEXCEPT -&gt; T *</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>len</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>ace717dc0bd9c459b2e081ae545921bac</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>capacity</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a285f252346d45b88a1f413b645fdb31f</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>byte_capacity</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a8cc614e748b42a4e920717d4a0065423</anchor>
      <arglist>() const VEG_NOEXCEPT -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a01f7e070e957e4e8d1f0e9a80ea5ba1f</anchor>
      <arglist>(isize i) const VEG_NOEXCEPT -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>operator[]</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections_1_1VecImpl.html</anchorfile>
      <anchor>a7bfafb92e5a1f5a531596fc227446483</anchor>
      <arglist>(isize i) VEG_NOEXCEPT -&gt; T &amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::VecRef</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="function">
      <type></type>
      <name>VecRef</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>a30191958d05a5ef2bfc9688aba4cc43f</anchor>
      <arglist>(FromRawParts, isize nrows, isize nnz, I const *row_indices, T const *values)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nrows</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>ad35b0a5ebba5893b1639ea086b8f19a8</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ncols</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>ae90b78f47c0fa6eca38949b332b102c0</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nnz</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>aafe65518e7ce4bee2ca3c8a4d05cd1a6</anchor>
      <arglist>() const noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>row_indices</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>a1003ec9020a6b16aaa0ee89e4095ec36</anchor>
      <arglist>() const noexcept -&gt; I const *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>values</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>ac7e2dbaea52b42a29ddcdb9ba164e620</anchor>
      <arglist>() const noexcept -&gt; T const *</arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nrows</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>acdc2806d94caf9029690ffd6f6f48f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>nnz</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>af1b54dde74638a9fecd5492adc7713b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I const  *</type>
      <name>row</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>aeab5a66c1c07c547c6ff727fa95e107e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>val</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1VecRef.html</anchorfile>
      <anchor>af8a12d7b21e903ec6c47cc913681ae82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::VectorView</name>
    <filename>structproxsuite_1_1proxqp_1_1VectorView.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>VectorView</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorView.html</anchorfile>
      <anchor>a34fa7bfdce92ea20d6bfa78531e253c8</anchor>
      <arglist>(FromPtrSize, T const *_data, isize _dim) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorView.html</anchorfile>
      <anchor>af080341b9bda800a82b3f493375e9924</anchor>
      <arglist>(typename Vec, requires(LDLT_CONCEPT(eigen_vector_view&lt; Vec, T &gt;)), VEG_INLINE VectorView,(, FromEigen),(vec, Vec const &amp;)) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorView.html</anchorfile>
      <anchor>a2f1522f058c105745554997fc7f22935</anchor>
      <arglist>(isize index) const noexcept -&gt; T const *</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorView.html</anchorfile>
      <anchor>aef49a731b6fd8baa86a537931641218c</anchor>
      <arglist>(isize index) const noexcept -&gt; T const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>segment</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorView.html</anchorfile>
      <anchor>a6609751c1e1e7edfdd3768bd637e1f7c</anchor>
      <arglist>(isize i, isize size) const noexcept -&gt; VectorView</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorView.html</anchorfile>
      <anchor>aafed4a5472da0cc5cd71d6128eb6c776</anchor>
      <arglist>() const -&gt; detail::VecMap&lt; T &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T const  *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorView.html</anchorfile>
      <anchor>a3f21bb68fa9c0ed78648adb1e0956e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>dim</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorView.html</anchorfile>
      <anchor>a420f6f2474cf75b564cbb56e8acbdcc2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::VectorViewMut</name>
    <filename>structproxsuite_1_1proxqp_1_1VectorViewMut.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE</type>
      <name>VectorViewMut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorViewMut.html</anchorfile>
      <anchor>aed5f6828dd6c7cce2043a56c424eb26c</anchor>
      <arglist>(FromPtrSize, T *_data, isize _dim) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorViewMut.html</anchorfile>
      <anchor>a268011d1062106a0148e3c57d1c2dd1a</anchor>
      <arglist>(typename Vec, requires(LDLT_CONCEPT(eigen_vector_view_mut&lt; Vec, T &gt;)), VEG_INLINE VectorViewMut,(, FromEigen),(vec, Vec &amp;&amp;)) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>as_const</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorViewMut.html</anchorfile>
      <anchor>ad50cd43d6ec6058cf934c5aea6c22aba</anchor>
      <arglist>() const noexcept -&gt; VectorView&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>ptr</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorViewMut.html</anchorfile>
      <anchor>a60f9e9b6f188c1b2a837cc88970c7753</anchor>
      <arglist>(isize index) const noexcept -&gt; T *</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorViewMut.html</anchorfile>
      <anchor>a3c08c307dd0e4bbd4d75cd662b66d99b</anchor>
      <arglist>(isize index) const noexcept -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>segment</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorViewMut.html</anchorfile>
      <anchor>a03d2bddcf9a30b1caac1a9aa25a424d9</anchor>
      <arglist>(isize i, isize size) const noexcept -&gt; VectorViewMut</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>to_eigen</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorViewMut.html</anchorfile>
      <anchor>a5ab4cdcc6c0e1bb052c5c407ebdad485</anchor>
      <arglist>() const -&gt; detail::VecMapMut&lt; T &gt;</arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>data</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorViewMut.html</anchorfile>
      <anchor>a2798f9fe383518adcb2121e76336b4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>dim</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1VectorViewMut.html</anchorfile>
      <anchor>a3b604d9a5a408eb131e0c2b8fb9642bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tl::detail::voider</name>
    <filename>structtl_1_1detail_1_1voider.html</filename>
    <templarg>class...</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>type</name>
      <anchorfile>structtl_1_1detail_1_1voider.html</anchorfile>
      <anchor>a5adc39f2d7f4a3702c587457b544e656</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::with</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1with.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1with.html</anchorfile>
      <anchor>ac4aaddc4b1450d596098b3500fa396a4</anchor>
      <arglist>(typename... Fns, requires(VEG_ALL_OF(VEG_CONCEPT(fn_once&lt; Fns, proxsuite::linalg::veg::meta::invoke_result_t&lt; Fns &gt; &gt;))), VEG_NODISCARD VEG_INLINE constexpr auto operator(),(... args, Fns)) const VEG_NOEXCEPT_IF(VEG_ALL_OF(VEG_CONCEPT(nothrow_fn_once&lt; Fns</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::WithArg</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1WithArg.html</filename>
    <templarg>typename Fn</templarg>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1WithArg.html</anchorfile>
      <anchor>a59c56c694c87a1bdb4edbf20d5eb8aef</anchor>
      <arglist>() const &amp;&amp;-&gt; decltype(VEG_FWD(fn)(VEG_FWD(arg)))</arglist>
    </member>
    <member kind="variable">
      <type>Fn &amp;&amp;</type>
      <name>fn</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1WithArg.html</anchorfile>
      <anchor>a3bab827b74661a86c84852dcf8f617cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T &amp;&amp;</type>
      <name>arg</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1WithArg.html</anchorfile>
      <anchor>abc475d5f48753ebe1808b132623e73ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::dense::Workspace</name>
    <filename>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>Workspace</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ad8c6c0b1b70ad929795f351a1f3e1c20</anchor>
      <arglist>(isize dim=0, isize n_eq=0, isize n_in=0, bool box_constraints=false, DenseBackend dense_backend=DenseBackend::PrimalDualLDLT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ab8b34efef0e359c7d867e5ea11ba1a5f</anchor>
      <arglist>(const bool box_constraints)</arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::dense::Ldlt&lt; T &gt;</type>
      <name>ldl</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>af61a6653a2c62b11e0f01764f6473698</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; unsigned char &gt;</type>
      <name>ldl_stack</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a5ddceb4c94dacc041c66d18bb6de7b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Timer&lt; T &gt;</type>
      <name>timer</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ab1ce4ea7e4b9bae17eb58edd74c582a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat&lt; T &gt;</type>
      <name>H_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a8d17594b71ea99aa2dc55e7818e0fa87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>g_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a4a459b882d77c1afcca28fbc02725cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat&lt; T &gt;</type>
      <name>A_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ae72229ff8337f85bd9a366073175477a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat&lt; T &gt;</type>
      <name>C_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a0546e01708cbe85b71ffddbaac073909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>b_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>aafaff32333bc5819bc86c294c98f22e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>u_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ab44b548a535c379cfc3c08bc37e355a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>l_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>af3744760051ab05d059f32e639fd83b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>u_box_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a02769514424cc049c70c0386d0d5f6bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>l_box_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ad8aa53aa1d93a9bab841e6c00857c19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>i_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a781977912ee7a6514c3431534f4e7ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>x_prev</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>afe3fa7d57577ed3087798f25477a501e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>y_prev</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a0d0a027b13f07441c4a61295dada18ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>z_prev</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a3b972a17d766851a8268ed361051e20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat&lt; T &gt;</type>
      <name>kkt</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ad26dd41b50bfc17961a697f5316b146e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VecISize</type>
      <name>current_bijection_map</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>af57a1110a045b5af8a01777629bf23fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VecISize</type>
      <name>new_bijection_map</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a402c58f2bdb007e05974b50a649c3b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VecBool</type>
      <name>active_set_up</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a2d8f03d7105fc191f58536bf6f45bd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VecBool</type>
      <name>active_set_low</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>aa93fc5b5b9bd627c4c2779ff2e671963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VecBool</type>
      <name>active_inequalities</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a2d396ca96eb4693b7e17f00685e5e739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>Hdx</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ad2f6ff5610abb6a9396162c27cf81b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>Cdx</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a9e60129e8834b1b5c55561aef161c287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>Adx</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>abdefff30e0e5d34052eebe7e13892d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>active_part_z</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>acc5085e0df4be7845ff45b370087d994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; T &gt;</type>
      <name>alphas</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>adf205babecedcfb99bb7c67199baf054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>dw_aug</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a07509c18e63d8678bc4de21ece885924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>rhs</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a779e5419aff74845fbb2b97ab7acc847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>err</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>aed2a9e83eaa34c7825c918a218c6db5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dual_feasibility_rhs_2</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a45b0149fedc02b162ab623893ec90e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>correction_guess_rhs_g</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a985ad08c37032cdc5568a78891f287cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>correction_guess_rhs_b</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a654e18f6004426edd8d3c6870d51264c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>alpha</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a6bffb8d8ca5d2a4257dc07595a0cc20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>dual_residual_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ad7f7e95afd0fd922646b954b9c526d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>primal_residual_in_scaled_up</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a0c00ddaf2e72c65adbc380f79c2b7eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>primal_residual_in_scaled_up_plus_alphaCdx</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ae98a980ffb90157b5249cae8675dffef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>primal_residual_in_scaled_low_plus_alphaCdx</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a392169321495159f00d8236a9e883198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec&lt; T &gt;</type>
      <name>CTz</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a7fcc4866db9dd4c138bbe652cc44c563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>constraints_changed</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a6c6f8ecca99fecb4b7b5befb833ed6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a0a0744ac552fca61f9c3d4537fc27628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>refactorize</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a5e546e2d0f89e8b84230f1ebdebf4663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>proximal_parameter_update</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>adaf56f89b650c779d5c187a36ed21007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_initialized</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>ac18109c9cac042da9c3d0ffa46a6e69a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sparse::isize</type>
      <name>n_c</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1dense_1_1Workspace.html</anchorfile>
      <anchor>a6ac3f61e9d25649bb6e7bfe15b9343c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::proxqp::sparse::Workspace</name>
    <filename>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename I</templarg>
    <member kind="function">
      <type>void</type>
      <name>setup_symbolic_factorizaton</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>aaf9b62c1770610f1c3f8dfbb5e4e25e1</anchor>
      <arglist>(Model&lt; T, I &gt; &amp;data, proxsuite::linalg::sparse::SymbolicMatRef&lt; I &gt; H, proxsuite::linalg::sparse::SymbolicMatRef&lt; I &gt; AT, proxsuite::linalg::sparse::SymbolicMatRef&lt; I &gt; CT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_impl</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a4530d8840c1df5198dcde751efc96aa4</anchor>
      <arglist>(const QpView&lt; T, I &gt; qp, Model&lt; T, I &gt; &amp;data, const Settings&lt; T &gt; &amp;settings, bool execute_or_not, P &amp;precond, proxsuite::linalg::veg::dynstack::StackReq precond_req)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Workspace</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>ade9600665a757dad519a111944f5258f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ldl_col_ptrs</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>ab43c53d9268564e206073c557afaf9c3</anchor>
      <arglist>() const -&gt; I const *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ldl_col_ptrs_mut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a4e6207cfe583c78d3dbdb0018966e344</anchor>
      <arglist>() -&gt; I *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>stack_mut</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a96c33b265169b21f65d73f7efb002150</anchor>
      <arglist>() -&gt; proxsuite::linalg::veg::dynstack::DynStackMut</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dirty</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a104382c1f61593d3c001962a50f3258b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; proxsuite::linalg::veg::mem::byte &gt;</type>
      <name>storage</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>ac91d3e884be411da6f8f1bfb84ccc331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ldlt&lt; T, I &gt;</type>
      <name>ldl</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>adb9b9ea1c2a9af8dcf26f1960ebcde39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>do_ldlt</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a1dd695a04f24d72611b97344074e0220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>do_symbolic_fact</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a9afb61f4750dfb3f0525e634609104e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
      <name>g_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a54688b63ef5a24cb218ce95908ee1d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
      <name>b_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a209edb418be75ec089c0bdbf435afbbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
      <name>l_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a54381b97c5b38a49b9057e4918328c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
      <name>u_scaled</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a0c98b0f0e0b2fceac87453e51e63a310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; I &gt;</type>
      <name>kkt_nnz_counts</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a576727019e421e0c9f2b80fe4c59e6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; detail::AugmentedKkt&lt; T, I &gt; &gt;</type>
      <name>matrix_free_kkt</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a166e1490ae20060d887199b8cb602142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; Eigen::MINRES&lt; detail::AugmentedKkt&lt; T, I &gt;, Eigen::Upper|Eigen::Lower, Eigen::IdentityPreconditioner &gt; &gt;</type>
      <name>matrix_free_solver</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a51beeba70ec7c25adb8b9f470af8818e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a9619a0157d1fbc48529e5d725f3048d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>proximal_parameter_update</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a0b20013e4cdb913d792cb6263ddf2b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_initialized</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a82cd559a2dfbc28b7aedcca0982038a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct proxsuite::proxqp::sparse::Workspace::@264003372134257347371071110143372335131167035304</type>
      <name>internal</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>ac8ac2654472a61b575a161ed1be9be49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VecBool</type>
      <name>active_set_up</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a8159321ebeb1ee61aa1da4cf5e11f213</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VecBool</type>
      <name>active_set_low</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a86f790ec38245b76c8799586904fe0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>proxsuite::linalg::veg::Vec&lt; bool &gt;</type>
      <name>active_inequalities</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>a1afdbd0142e3ad5d76b083aea80d9dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>isize</type>
      <name>lnnz</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>aa495dcf754832565a824b8ba9e8f8b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Timer&lt; T &gt;</type>
      <name>timer</name>
      <anchorfile>structproxsuite_1_1proxqp_1_1sparse_1_1Workspace.html</anchorfile>
      <anchor>aede260522ff910b4d0f46b1de531215c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::Wrapper</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1Wrapper.html</filename>
    <templarg>typename T</templarg>
    <member kind="variable">
      <type>T</type>
      <name>inner</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1Wrapper.html</anchorfile>
      <anchor>ab9e1fbe11d33221c82d3e73b5da2a8d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::wrapper</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1wrapper.html</filename>
    <templarg>typename T</templarg>
    <base>proxsuite::linalg::veg::_detail::_meta::wrapper_base</base>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>test</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1wrapper.html</anchorfile>
      <anchor>a21738d090f784c6ce214f6bd56373983</anchor>
      <arglist>(wrapper&lt; T &gt; *) -&gt; meta::true_type</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>test</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1wrapper.html</anchorfile>
      <anchor>ac0208693b63ffcef39b61cb243d5324e</anchor>
      <arglist>(...) -&gt; meta::false_type</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::wrapper_base</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1wrapper__base.html</filename>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>test</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1wrapper__base.html</anchorfile>
      <anchor>ac0208693b63ffcef39b61cb243d5324e</anchor>
      <arglist>(...) -&gt; meta::false_type</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::util::nb::wrapping_dec</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1wrapping__dec.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1wrapping__dec.html</anchorfile>
      <anchor>abcbc80c4eaa8f3175ab7dcbac8527213</anchor>
      <arglist>(RefMut&lt; I &gt; a) const noexcept -&gt; I</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::util::nb::wrapping_inc</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1wrapping__inc.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1wrapping__inc.html</anchorfile>
      <anchor>ad8f37df5d0276fb7542e14b33c074b3f</anchor>
      <arglist>(RefMut&lt; I &gt; a) const noexcept -&gt; I</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::util::nb::wrapping_plus</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1wrapping__plus.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1wrapping__plus.html</anchorfile>
      <anchor>ae5f9176731d95b61c192e91e62750323</anchor>
      <arglist>(I a, I b) const noexcept -&gt; I</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::sparse::util::nb::zero_extend</name>
    <filename>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1zero__extend.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb_1_1zero__extend.html</anchorfile>
      <anchor>a1e3f0ada85a5c791255bb2d8f144f950</anchor>
      <arglist>(I a) const noexcept -&gt; usize</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_dynstack::zero_init_fn</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1zero__init__fn.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>make</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack_1_1zero__init__fn.html</anchorfile>
      <anchor>aba7a46237233ef980aaa41bd525fbda4</anchor>
      <arglist>(void *ptr, isize len) -&gt; T *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::tuple::nb::zip</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1zip.html</filename>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::type_sequence_zip&lt; Tuple, Tuples... &gt;</type>
      <name>PreZip</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1zip.html</anchorfile>
      <anchor>a208322489f3eee1fd9ad9377fd9e647e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta:: detected_t&lt; PreZip, typename meta::TupleBaseInfo&lt; Tuples &gt;::Tuple... &gt;</type>
      <name>Zip</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1zip.html</anchorfile>
      <anchor>a5fea76af3e5e1c54a269f82c434374ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TEMPLATE</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb_1_1zip.html</anchorfile>
      <anchor>a48cd6caad12b18f13bc48b9a22d39118</anchor>
      <arglist>((typename... Tuples), requires(VEG_ALL_OF(VEG_CONCEPT(tuple::tuple&lt; Tuples &gt;)) &amp;&amp;VEG_CONCEPT(all_same&lt; tuple::meta::tuple_size&lt; Tuples &gt;... &gt;)), VEG_NODISCARD VEG_INLINE constexpr auto operator(),(... tups, Tuples)) const VEG_NOEXCEPT -&gt; Zip&lt; Tuples... &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::zip_type_seq</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq.html</filename>
    <templarg>typename Valid</templarg>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Seqs</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::zip_type_seq2</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq2.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Seqs</templarg>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::zip_type_seq2&lt; F, F&lt; Ts... &gt;, F&lt; Zipped... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq2_3_01F_00_01F_3_01Ts_8_296bf3865960d353995853a151ca4dd5.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <templarg>typename... Zipped</templarg>
    <member kind="typedef">
      <type>F&lt; typename concat_type_seq&lt; true_type, F, F&lt; Ts &gt;, Zipped &gt;::type... &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq2_3_01F_00_01F_3_01Ts_8_296bf3865960d353995853a151ca4dd5.html</anchorfile>
      <anchor>a946b5ca1227f3de01a57a0049d213582</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::zip_type_seq&lt; meta::true_type, F &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq_3_01meta_1_1true__type_00_01F_01_4.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <member kind="typedef">
      <type>F&lt;&gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq_3_01meta_1_1true__type_00_01F_01_4.html</anchorfile>
      <anchor>a0e1a0676e40930bedcde29fe493a4ec9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::zip_type_seq&lt; meta::true_type, F, F&lt; Ts... &gt; &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq_3_01meta_1_1true__type_bc53d50aa780af6967fc8cf1bc924bde.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <member kind="typedef">
      <type>F&lt; F&lt; Ts &gt;... &gt;</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq_3_01meta_1_1true__type_bc53d50aa780af6967fc8cf1bc924bde.html</anchorfile>
      <anchor>a2906ac136421eb89b15791e8fb02340b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>proxsuite::linalg::veg::_detail::_meta::zip_type_seq&lt; meta::true_type, F, F&lt; Ts... &gt;, Seq, Seqs... &gt;</name>
    <filename>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq_3_01meta_1_1true__type_07eff65470006726a7233b4b1d7a63dc.html</filename>
    <templarg>template&lt; typename... &gt; class F</templarg>
    <templarg>typename... Ts</templarg>
    <templarg>typename Seq</templarg>
    <templarg>typename... Seqs</templarg>
    <member kind="typedef">
      <type>typename zip_type_seq2&lt; F, F&lt; Ts... &gt;, typename zip_type_seq&lt; meta::true_type, F, Seq, Seqs... &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1zip__type__seq_3_01meta_1_1true__type_07eff65470006726a7233b4b1d7a63dc.html</anchorfile>
      <anchor>a410427f283de7633c9e59779d970090e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cereal</name>
    <filename>namespacecereal.html</filename>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>a6f76caa86750a5977d09ed9be9002f8f</anchor>
      <arglist>(Archive &amp;ar, Eigen::PlainObjectBase&lt; Derived &gt; const &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>abbb2f2cde410169833660e1e40566aea</anchor>
      <arglist>(Archive &amp;ar, Eigen::PlainObjectBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>a28374f668ceb2173341cf1e8d21c19ea</anchor>
      <arglist>(Archive &amp;ar, Eigen::SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; const &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>a62e015f672bd973831d97fe12abc179b</anchor>
      <arglist>(Archive &amp;ar, Eigen::SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>aae8f00a3364cc7946faf780f2a73467f</anchor>
      <arglist>(Archive &amp;archive, proxsuite::proxqp::dense::Model&lt; T &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>acbc5b726fe0b175cb0a154d60a930279</anchor>
      <arglist>(Archive &amp;archive, proxsuite::proxqp::Info&lt; T &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>a312b8abfd7c5abd89eff238a21a14eb8</anchor>
      <arglist>(Archive &amp;archive, proxsuite::proxqp::Results&lt; T &gt; &amp;results)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>ad411a082ec69d7438b45031b13751452</anchor>
      <arglist>(Archive &amp;ar, proxsuite::linalg::veg::Vec&lt; bool &gt; const &amp;vec_bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>ae3f26b10273bd395c63cda9af72db86b</anchor>
      <arglist>(Archive &amp;ar, proxsuite::linalg::veg::Vec&lt; bool &gt; &amp;vec_bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>a880de50b31d4daa10e3be32241c22417</anchor>
      <arglist>(Archive &amp;archive, proxsuite::proxqp::dense::preconditioner::RuizEquilibration&lt; T &gt; &amp;ruiz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>a69b9d325eaf4ffbb0d5462de35ab84f3</anchor>
      <arglist>(Archive &amp;archive, proxsuite::proxqp::Settings&lt; T &gt; &amp;settings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>ac511ce3713d1e34e9f86e6074432f03b</anchor>
      <arglist>(Archive &amp;archive, proxsuite::proxqp::dense::Workspace&lt; T &gt; &amp;work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>af20f684a3c124cd1d231a9db46cf00e9</anchor>
      <arglist>(Archive &amp;ar, proxsuite::linalg::veg::Vec&lt; T &gt; const &amp;vec_T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>a322d030fe225468388d680a36d2ae187</anchor>
      <arglist>(Archive &amp;ar, proxsuite::linalg::veg::Vec&lt; T &gt; &amp;vec_T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>namespacecereal.html</anchorfile>
      <anchor>a2b910474a4da856ce5b425767f1c9e04</anchor>
      <arglist>(Archive &amp;archive, proxsuite::proxqp::dense::QP&lt; T &gt; &amp;qp)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>namespaceEigen.html</filename>
  </compound>
  <compound kind="namespace">
    <name>proxsuite</name>
    <filename>namespaceproxsuite.html</filename>
    <namespace>proxsuite::detail</namespace>
    <namespace>proxsuite::helpers</namespace>
    <namespace>proxsuite::linalg</namespace>
    <namespace>proxsuite::proxqp</namespace>
    <namespace>proxsuite::serialization</namespace>
    <namespace>proxsuite::torch</namespace>
    <member kind="typedef">
      <type>tl::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespaceproxsuite.html</anchorfile>
      <anchor>a9a2f1998e71d4453a2221d00787cec30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>tl::nullopt_t</type>
      <name>nullopt_t</name>
      <anchorfile>namespaceproxsuite.html</anchorfile>
      <anchor>a97ad5c36883b6a90f90d56e79b1d3bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_omp_options</name>
      <anchorfile>namespaceproxsuite.html</anchorfile>
      <anchor>a6675e7ed2e2d28549b6113fc240d026d</anchor>
      <arglist>(const size_t num_threads=(size_t) omp_get_max_threads())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>load_main_module</name>
      <anchorfile>namespaceproxsuite.html</anchorfile>
      <anchor>ad7a183460f3d87281ed7ba7946473f36</anchor>
      <arglist>(globals)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr nullopt_t</type>
      <name>nullopt</name>
      <anchorfile>namespaceproxsuite.html</anchorfile>
      <anchor>a2031f223e16b21ebc8f804797aa4a635</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>machine</name>
      <anchorfile>namespaceproxsuite.html</anchorfile>
      <anchor>a9c5e0d1b94d86c10b98e6a880aa504b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>has_vectorization_instructions</name>
      <anchorfile>namespaceproxsuite.html</anchorfile>
      <anchor>ab18b857df1b6aba1ccd087bcdc7eec21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>globals</name>
      <anchorfile>namespaceproxsuite.html</anchorfile>
      <anchor>a1e9c9fba6ea38b663ce843493952a5fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::detail</name>
    <filename>namespaceproxsuite_1_1detail.html</filename>
    <class kind="struct">proxsuite::detail::nullopt_instance</class>
    <member kind="variable">
      <type>const T</type>
      <name>nullopt_instance&lt; T &gt;::instance</name>
      <anchorfile>namespaceproxsuite_1_1detail.html</anchorfile>
      <anchor>ae93ca4d25fadc88f324933504848f830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::helpers</name>
    <filename>namespaceproxsuite_1_1helpers.html</filename>
    <class kind="struct">proxsuite::helpers::infinite_bound</class>
    <class kind="struct">proxsuite::helpers::InstructionSet</class>
    <member kind="function">
      <type>auto</type>
      <name>at_most</name>
      <anchorfile>namespaceproxsuite_1_1helpers.html</anchorfile>
      <anchor>a81683551c89b385e60e8fd5a506ce127</anchor>
      <arglist>(T const &amp;expr, const Scalar value) PROXSUITE_DEDUCE_RET((expr.array()&lt; value).select(expr</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>at_least</name>
      <anchorfile>namespaceproxsuite_1_1helpers.html</anchorfile>
      <anchor>a67d00d650a55b2443681bfca72f12b86</anchor>
      <arglist>(T const &amp;expr, const Scalar value) PROXSUITE_DEDUCE_RET((expr.array() &gt; value).select(expr</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>positive_part</name>
      <anchorfile>namespaceproxsuite_1_1helpers.html</anchorfile>
      <anchor>a3faae71fad6f45f688688dd282ccf78b</anchor>
      <arglist>(T const &amp;expr) PROXSUITE_DEDUCE_RET((expr.array() &gt; 0).select(expr</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>negative_part</name>
      <anchorfile>namespaceproxsuite_1_1helpers.html</anchorfile>
      <anchor>a8252ca5df165a457499dd65f0bd89e65</anchor>
      <arglist>(T const &amp;expr) PROXSUITE_DEDUCE_RET((expr.array()&lt; 0).select(expr</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>select</name>
      <anchorfile>namespaceproxsuite_1_1helpers.html</anchorfile>
      <anchor>a1190ffb2c78b5792fa681ee952cf70f1</anchor>
      <arglist>(Condition const &amp;condition, T const &amp;expr, const Scalar value) PROXSUITE_DEDUCE_RET((condition).select(expr</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printVersion</name>
      <anchorfile>namespaceproxsuite_1_1helpers.html</anchorfile>
      <anchor>a61c43faaa5f4151f1d3787d58aa74a4c</anchor>
      <arglist>(const std::string &amp;delimiter=&quot;.&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkVersionAtLeast</name>
      <anchorfile>namespaceproxsuite_1_1helpers.html</anchorfile>
      <anchor>a371a48139dc77f260fc23054f4a434a2</anchor>
      <arglist>(signed int major_version, signed int minor_version, signed int patch_version)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg</name>
    <filename>namespaceproxsuite_1_1linalg.html</filename>
    <namespace>proxsuite::linalg::dense</namespace>
    <namespace>proxsuite::linalg::sparse</namespace>
    <namespace>proxsuite::linalg::veg</namespace>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::dense</name>
    <filename>namespaceproxsuite_1_1linalg_1_1dense.html</filename>
    <namespace>proxsuite::linalg::dense::_detail</namespace>
    <namespace>proxsuite::linalg::dense::util</namespace>
    <class kind="struct">proxsuite::linalg::dense::Ldlt</class>
    <member kind="typedef">
      <type>float</type>
      <name>f32</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a055427638dc256cd845746f174cbb747</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>f64</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a4e4aeb2d8b04223d3ac46652f12ad186</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>i32</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>aeb213edf712377cb573b1ff372bcee20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_detail::_meta::make_signed&lt; usize &gt;::Type</type>
      <name>isize</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>af13f536f55f7e3a7af1d0e6cf9ac3c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>u32</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>aee32ae81452cbe40dc6aeb76103314fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(sizeof(0))</type>
      <name>usize</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a1d967c038db74b6696a5a46e4576a085</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>temp_mat_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a492f939daf7eeeaea62d1b6d0ed450eb</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, isize rows, isize cols) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>temp_vec_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a3c3e2bc488f86326cc0a5184faa9ab11</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, isize rows) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>factorize_unblocked_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a8f6d360def165967c54b66b99b9b3752</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, isize n) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>factorize_blocked_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a7a4e0f7de99ea5ce57aeedabdee8f334</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt; tag, isize n, isize block_size) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>factorize_recursive_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a086c0466c284a944cbfe5c8e6ccfcb47</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt; tag, isize n) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize_unblocked</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>ad17ed8cad677d4752acc0dd1a3e6e730</anchor>
      <arglist>(Mat &amp;&amp;mat, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize_blocked</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>ac53435dad11b86de2432b253649cf4b3</anchor>
      <arglist>(Mat &amp;&amp;mat, isize block_size, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize_recursive</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>add756dd21a327bb8efd6986614bdaadc</anchor>
      <arglist>(Mat &amp;&amp;mat, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>factorize_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>aeee9df371ebf19ffb5b43ddb17298144</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt; tag, isize n) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>ac7404d34fc922fab0f942fa36d85b7e1</anchor>
      <arglist>(Mat &amp;&amp;mat, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ldlt_delete_rows_and_cols_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>ade5108c002b38c38c384885deca39351</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, isize n, isize r) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ldlt_delete_rows_and_cols_sort_indices</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a38cdfd0861ff06f028b58ac151324dcb</anchor>
      <arglist>(Mat &amp;&amp;ld, isize *indices, isize r, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ldlt_insert_rows_and_cols_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a0a2b7362a118f8ac2eafc6471555d195</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt; tag, isize n, isize r) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ldlt_insert_rows_and_cols</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a460ed925fe95dd0fc7396478e5c6772a</anchor>
      <arglist>(Mat &amp;&amp;ld, isize pos, A_1 const &amp;a_1, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a46a769334f2c00931df89f2610e3e60c</anchor>
      <arglist>(Mat const &amp;mat, Rhs &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rank_1_update_clobber_w</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>af0375664e4f1fb9f914b8415632bfc93</anchor>
      <arglist>(LD &amp;&amp;ld, W &amp;&amp;w, proxsuite::linalg::veg::DoNotDeduce&lt; T &gt; alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rank_r_update_clobber_inputs</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense.html</anchorfile>
      <anchor>a548bce6b19ae6b0859ff655fdbccd546</anchor>
      <arglist>(LD &amp;&amp;ld, W &amp;&amp;w, A &amp;&amp;alpha)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::dense::_detail</name>
    <filename>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</filename>
    <namespace>proxsuite::linalg::dense::_detail::_simd</namespace>
    <namespace>proxsuite::linalg::dense::_detail::nb</namespace>
    <class kind="struct">proxsuite::linalg::dense::_detail::ConstantR</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::ElemAddrImpl</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::ElemAddrImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::ElemAddrImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::IndicesR</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::NoCopy</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankRUpdateLoopImpl</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankRUpdateLoopImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankRUpdateLoopImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankUpdateLoadPMu</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankUpdateLoadW</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankUpdateStoreW</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RankUpdateUpdateWAndL</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RowColAccessImpl</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RowColAccessImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::RowColAccessImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::SimdAlignedSystemAlloc</class>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::if_t&lt; COND, T const, T &gt;</type>
      <name>const_if</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a78bbfac7f9202f5ea6a6e772cc616086</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::bool_constant&lt; VEG_CONCEPT( const_type&lt; proxsuite::linalg::veg::meta::unptr_t&lt; T &gt; &gt;)&gt;</type>
      <name>ptr_is_const</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>ac481288e4d1818c994226681ce81da42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::bool_constant&lt; false &gt;</type>
      <name>should_vectorize</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>ada90d1de6a48267dfc9b840930f2f0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; typename T::Scalar, Eigen::Dynamic, Eigen::Dynamic, bool(T::IsRowMajor) ? Eigen::RowMajor :Eigen::ColMajor &gt;</type>
      <name>OwnedMatrix</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a0744a25b009a23314a4f342f9b3c2c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; typename T::Scalar, T::RowsAtCompileTime, T::ColsAtCompileTime, bool(T::IsRowMajor) ? Eigen::RowMajor :Eigen::ColMajor &gt;</type>
      <name>OwnedAll</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>ac427a2feb8bfdc3dac01e44002443608</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; typename T::Scalar, Eigen::Dynamic, T::ColsAtCompileTime, bool(T::IsRowMajor) ? Eigen::RowMajor :Eigen::ColMajor &gt;</type>
      <name>OwnedRows</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a64f7ed126b437a3a89c8f407aabcf055</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; typename T::Scalar, T::RowsAtCompileTime, Eigen::Dynamic, bool(T::IsRowMajor) ? Eigen::RowMajor :Eigen::ColMajor &gt;</type>
      <name>OwnedCols</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a56b2deadefa35b391b3d4d4c7b6e8148</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; typename T::Scalar, Eigen::Dynamic, 1, Eigen::ColMajor &gt;</type>
      <name>OwnedColVector</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a3df6dc774e3f731413703faa9c34c9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; typename T::Scalar, 1, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>OwnedRowVector</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>ab7365f10cf9547b13faee4aa318d10c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Stride&lt; T::OuterStrideAtCompileTime, T::InnerStrideAtCompileTime &gt;</type>
      <name>StrideOf</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a731b397357162b59528557405181ff74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::constant&lt; isize, 32 &gt;</type>
      <name>factorize_recursive_threshold</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a6d073858edf29b3d81024691487cf952</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>round_up</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a15ee53412f959087434fb1879a1f2b05</anchor>
      <arglist>(T a, T b) noexcept -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>adjusted_stride</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a3477d5e91e141686c97ff221418ccb34</anchor>
      <arglist>(isize n) noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>align</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>af15c9cabec2a5bedbbfc018075000ad2</anchor>
      <arglist>() noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a07359dcf9deac5b726985c3a151f13e1</anchor>
      <arglist>(min2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a88c06081b33b9c6e8610da70e7157d47</anchor>
      <arglist>(max2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_zero</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a28717cff5d1a31fbe73d76844d051556</anchor>
      <arglist>(T *dest, usize n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noalias_mul_add_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a3459c72a7c8aff24bde95581d9ea7e7e</anchor>
      <arglist>(Dst dst, Lhs lhs, Rhs rhs, T factor)</arglist>
    </member>
    <member kind="function">
      <type>VEG_NO_INLINE void</type>
      <name>compute_permutation_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>af891aca62190337bf81fa66c79211c0a</anchor>
      <arglist>(isize *perm_indices, isize *perm_inv_indices, isize n, T const *diagonal_data, isize stride)</arglist>
    </member>
    <member kind="function">
      <type>VEG_NO_INLINE void</type>
      <name>compute_permutation</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a2ef802a1895b2e3cc7ceb31e159d6c66</anchor>
      <arglist>(isize *perm_indices, isize *perm_inv_indices, Diag const &amp;diagonal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_permutation_tri_lower</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a18dbc5bc26e80a36e8aee897ea5a3026</anchor>
      <arglist>(Mat &amp;&amp;mat, Work &amp;&amp;work, isize const *perm_indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize_unblocked_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a4acb697a68fa7011faa1d8cffd20e33d</anchor>
      <arglist>(Mat mat, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize_blocked_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>aaf334bedbf00e980ee71d9484c3d4dae</anchor>
      <arglist>(Mat mat, isize block_size, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize_recursive_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>afa051189b55cbcc172eb9b0f6e98ba26</anchor>
      <arglist>(Mat mat, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_rows_and_cols_triangular_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a401f2c8777fe579e06dc53f4cb8b08c9</anchor>
      <arglist>(Mat mat, isize const *indices, isize r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_rows_and_cols_triangular</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a60f8d808abf72d6b99d2ae7a35aec932</anchor>
      <arglist>(Mat &amp;&amp;mat, isize const *indices, isize r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ldlt_delete_rows_and_cols_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a5c34eefcbbe71afc0791b74ef6d807d1</anchor>
      <arglist>(Mat ld, isize *indices, isize r, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ldlt_insert_rows_and_cols_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>af835537990398a809fec4755c1f9d1e8</anchor>
      <arglist>(Mat ld, isize pos, A_1 a_1, proxsuite::linalg::veg::dynstack::DynStackMut stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a70d4ab527eea6d08f3e9287d2cdea634</anchor>
      <arglist>(Mat ld, Rhs rhs)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>bytes_to_prev_aligned</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a27ce2fcf959b7d44c239915ed3b807ca</anchor>
      <arglist>(void *ptr, usize align) noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>bytes_to_next_aligned</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a3849fc81ccd396e87e35c8d38bad8ab1</anchor>
      <arglist>(void *ptr, usize align) noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>unroll_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>a02be4cab2b27f5a3880db53552016539</anchor>
      <arglist>(proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Fn fn)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>unroll</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>af07fde70b76c3d084cdd283e8c5f5865</anchor>
      <arglist>(Fn fn)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>rank_r_update_inner_loop_iter</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>aad51c7e743578540b234e7e78faedae7</anchor>
      <arglist>(_simd::Pack&lt; T, N &gt; const *p_p, _simd::Pack&lt; T, N &gt; const *p_mu, T *inout_l, T *pw, isize w_stride)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>rank_r_update_inner_loop</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>ac3536c48317b9b83717d8e6fa8dbd5f1</anchor>
      <arglist>(isize n, T *inout_l, T *pw, isize w_stride, T const *p, T const *mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rank_r_update_clobber_w_impl</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail.html</anchorfile>
      <anchor>ab91142b2926a36262b63de3b76ecd30e</anchor>
      <arglist>(LD ld, T *pw, isize w_stride, T *palpha, Fn r_fn)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::dense::_detail::_simd</name>
    <filename>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd.html</filename>
    <class kind="struct">proxsuite::linalg::dense::_detail::_simd::NativePackInfo</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::_simd::Pack</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::_simd::Pack&lt; T, 1 &gt;</class>
    <member kind="typedef">
      <type>typename NativePackInfo&lt; T &gt;::Type</type>
      <name>NativePack</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail_1_1__simd.html</anchorfile>
      <anchor>a249d9169c634743726d453a323cdbad6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::dense::_detail::nb</name>
    <filename>namespaceproxsuite_1_1linalg_1_1dense_1_1__detail_1_1nb.html</filename>
    <class kind="struct">proxsuite::linalg::dense::_detail::nb::max2</class>
    <class kind="struct">proxsuite::linalg::dense::_detail::nb::min2</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::dense::util</name>
    <filename>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>elem_addr</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>ad38dfdb71e8a96d8da23bdbdc69bf877</anchor>
      <arglist>(T *ptr, isize row, isize col, isize outer_stride, isize inner_stride) noexcept -&gt; T *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>matrix_elem_addr</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>a05ec6f335e0d6d3e068d6ced361726ad</anchor>
      <arglist>(Mat &amp;&amp;mat, isize row, isize col) noexcept -&gt; decltype(mat.data())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>col</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>ae69f57a4e2b1278dae407cc9b0cc36c7</anchor>
      <arglist>(T &amp;&amp;mat, isize col_idx) noexcept -&gt; typename _detail::RowColAccessImpl&lt; !bool(proxsuite::linalg::veg::uncvref_t&lt; T &gt;::IsRowMajor)&gt;::template Col&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>row</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>a9a3377b147dd666fdfe25ba5f19bbe8a</anchor>
      <arglist>(T &amp;&amp;mat, isize row_idx) noexcept -&gt; typename _detail::RowColAccessImpl&lt; !bool(proxsuite::linalg::veg::uncvref_t&lt; T &gt;::IsRowMajor)&gt;::template Row&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>trans</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>a3d1cac3596eac8be227bf7533852a767</anchor>
      <arglist>(Mat &amp;&amp;mat) noexcept -&gt; Eigen::Map&lt; _detail::const_if&lt; _detail::ptr_is_const&lt; decltype(mat.data())&gt;::value, Eigen::Matrix&lt; typename proxsuite::linalg::veg::uncvref_t&lt; Mat &gt;::Scalar, proxsuite::linalg::veg::uncvref_t&lt; Mat &gt;::ColsAtCompileTime, proxsuite::linalg::veg::uncvref_t&lt; Mat &gt;::RowsAtCompileTime, bool(proxsuite::linalg::veg::uncvref_t&lt; Mat &gt;::IsRowMajor) ? Eigen::ColMajor :Eigen::RowMajor &gt; &gt;, Eigen::Unaligned, _detail::StrideOf&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>diagonal</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>a81e48a2ddf808918c9a0da7690a691ad</anchor>
      <arglist>(Mat &amp;&amp;mat) noexcept -&gt; Eigen::Map&lt; _detail::const_if&lt; _detail::ptr_is_const&lt; decltype(mat.data())&gt;::value, Eigen::Matrix&lt; typename proxsuite::linalg::veg::uncvref_t&lt; Mat &gt;::Scalar, Eigen::Dynamic, 1, Eigen::ColMajor &gt; &gt;, Eigen::Unaligned, Eigen::InnerStride&lt; Eigen::Dynamic &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>submatrix</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>ac2b58d01a8be13bd65a09a54ec584809</anchor>
      <arglist>(Mat &amp;&amp;mat, isize row_start, isize col_start, isize nrows, isize ncols) noexcept -&gt; Eigen::Map&lt; _detail::const_if&lt; _detail::ptr_is_const&lt; decltype(mat.data())&gt;::value, _detail::OwnedMatrix&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;, Eigen::Unaligned, _detail::StrideOf&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_view</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>ae1d76cb88f38be13d7396be4b4f9026a</anchor>
      <arglist>(Mat &amp;&amp;mat) noexcept -&gt; Eigen::Map&lt; _detail::const_if&lt; _detail::ptr_is_const&lt; decltype(mat.data())&gt;::value, _detail::OwnedAll&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;, Eigen::Unaligned, _detail::StrideOf&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_view_dyn_rows</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>a5b6d4203af05bec67c7b667083e4b270</anchor>
      <arglist>(Mat &amp;&amp;mat) noexcept -&gt; Eigen::Map&lt; _detail::const_if&lt; _detail::ptr_is_const&lt; decltype(mat.data())&gt;::value, _detail::OwnedRows&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;, Eigen::Unaligned, _detail::StrideOf&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_view_dyn_cols</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>afc85de75a5a3af2f4ca2d0ef42914984</anchor>
      <arglist>(Mat &amp;&amp;mat) noexcept -&gt; Eigen::Map&lt; _detail::const_if&lt; _detail::ptr_is_const&lt; decltype(mat.data())&gt;::value, _detail::OwnedCols&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;, Eigen::Unaligned, _detail::StrideOf&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_view_dyn</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>ad782227202bf40379e525903c2bbfa79</anchor>
      <arglist>(Mat &amp;&amp;mat) noexcept -&gt; Eigen::Map&lt; _detail::const_if&lt; _detail::ptr_is_const&lt; decltype(mat.data())&gt;::value, _detail::OwnedMatrix&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;, Eigen::Unaligned, _detail::StrideOf&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>subrows</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>ab01a41cd85dee2881a3942e78aa17ab2</anchor>
      <arglist>(Mat &amp;&amp;mat, isize row_start, isize nrows) noexcept -&gt; Eigen::Map&lt; _detail::const_if&lt; _detail::ptr_is_const&lt; decltype(mat.data())&gt;::value, _detail::OwnedRows&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;, Eigen::Unaligned, _detail::StrideOf&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>subcols</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>a71f8eb7499783879c88883d77c8e1d01</anchor>
      <arglist>(Mat &amp;&amp;mat, isize col_start, isize ncols) noexcept -&gt; Eigen::Map&lt; _detail::const_if&lt; _detail::ptr_is_const&lt; decltype(mat.data())&gt;::value, _detail::OwnedCols&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;, Eigen::Unaligned, _detail::StrideOf&lt; proxsuite::linalg::veg::uncvref_t&lt; Mat &gt; &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noalias_mul_add</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1dense_1_1util.html</anchorfile>
      <anchor>a443bda61fc4bce60db0d51e08101e83f</anchor>
      <arglist>(Dst &amp;&amp;dst, Lhs const &amp;lhs, Rhs const &amp;rhs, T factor)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::sparse</name>
    <filename>namespaceproxsuite_1_1linalg_1_1sparse.html</filename>
    <namespace>proxsuite::linalg::sparse::_detail</namespace>
    <namespace>proxsuite::linalg::sparse::concepts</namespace>
    <namespace>proxsuite::linalg::sparse::tags</namespace>
    <namespace>proxsuite::linalg::sparse::util</namespace>
    <class kind="struct">proxsuite::linalg::sparse::DenseVecMut</class>
    <class kind="struct">proxsuite::linalg::sparse::DenseVecRef</class>
    <class kind="struct">proxsuite::linalg::sparse::DynStackMut</class>
    <class kind="struct">proxsuite::linalg::sparse::MatMut</class>
    <class kind="struct">proxsuite::linalg::sparse::MatRef</class>
    <class kind="struct">proxsuite::linalg::sparse::Ref</class>
    <class kind="struct">proxsuite::linalg::sparse::RefMut</class>
    <class kind="struct">proxsuite::linalg::sparse::Slice</class>
    <class kind="struct">proxsuite::linalg::sparse::SliceMut</class>
    <class kind="struct">proxsuite::linalg::sparse::SymbolicMatMut</class>
    <class kind="struct">proxsuite::linalg::sparse::SymbolicMatRef</class>
    <class kind="struct">proxsuite::linalg::sparse::VecRef</class>
    <member kind="typedef">
      <type>_detail::_meta::make_signed&lt; usize &gt;::Type</type>
      <name>isize</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>af13f536f55f7e3a7af1d0e6cf9ac3c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(sizeof(0))</type>
      <name>usize</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a1d967c038db74b6696a5a46e4576a085</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Ordering</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a9f5e6365e7297cc9234dcad50b0cfdeb</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1sparse.html" anchor="a9f5e6365e7297cc9234dcad50b0cfdeba8f4ef05b543fb6157b374099100574b3">natural</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1sparse.html" anchor="a9f5e6365e7297cc9234dcad50b0cfdebacd913c0c9146210c22b89867f6d0888e">user_provided</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1sparse.html" anchor="a9f5e6365e7297cc9234dcad50b0cfdeba5dc984e2aef527ea2daaeffe646a6a52">amd</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1sparse.html" anchor="a9f5e6365e7297cc9234dcad50b0cfdebad927000fd863b08d2426cbf3fc66bd56">ENUM_END</enumvalue>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transpose_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a46930253c21f36aa4408e9fd4ed7ec15</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt;, isize nrows) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transpose</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a5201ef5d166801f82156a31b0412a210</anchor>
      <arglist>(MatMut&lt; T, I &gt; at, MatRef&lt; T, I &gt; a, DynStackMut stack) noexcept(VEG_CONCEPT(nothrow_copyable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transpose_symbolic_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a9b73cba07e8d665703351e1cbe92cdaf</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt;, isize nrows) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transpose_symbolic</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a93801eca63b70622efe8dc76f9976a5c</anchor>
      <arglist>(SymbolicMatMut&lt; I &gt; at, SymbolicMatRef&lt; I &gt; a, DynStackMut stack) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dense_lsolve</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>ade7a0584d40d9c09866dbc702d7daa87</anchor>
      <arglist>(DenseVecMut&lt; T &gt; x, MatRef&lt; T, I &gt; l) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dense_ltsolve</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>ab2dfa80993000595b5884932e0d6fd5b</anchor>
      <arglist>(DenseVecMut&lt; T &gt; x, MatRef&lt; T, I &gt; l) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>etree_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>ad916a603bb532b4a7daa252947d10d0d</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt;, isize n) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>etree</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a783d6e238f8198f764afc57fa983386a</anchor>
      <arglist>(I *parent, SymbolicMatRef&lt; I &gt; a, DynStackMut stack) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>postorder_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a2decd4a5b49420305c67ddbcd58a1546</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt;, isize n) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a32b319d99cd0ab8811852dc2acf97f60</anchor>
      <arglist>(I *post, I const *parent, isize n, DynStackMut stack) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>column_counts_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>aea0f2da7241fff9dc7f47441c64353db</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt; tag, isize n, isize nnz) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>column_counts</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>ab6e95e2b44526483f5b430b8d73af348</anchor>
      <arglist>(I *counts, SymbolicMatRef&lt; I &gt; a, I const *parent, I const *post, DynStackMut stack) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>amd_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a15eed1a8b0f7db913114ebfe4b846362</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt;, isize, isize nnz) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>amd</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a0024f28f9d5d5a15f6bee0e82c3b12dd</anchor>
      <arglist>(I *perm, SymbolicMatRef&lt; I &gt; mat, DynStackMut stack) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>factorize_symbolic_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a8cd64d9f572e0253119faa67d7ab27ff</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt; tag, isize n, isize nnz, Ordering o) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize_symbolic_non_zeros</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a079c432623d4703acb642fd32fd87b36</anchor>
      <arglist>(I *nnz_per_col, I *etree, I *perm_inv, I const *perm, SymbolicMatRef&lt; I &gt; a, DynStackMut stack) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize_symbolic_col_counts</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a8eba89accaa2c9fc2cbfd5dd3b9de9e1</anchor>
      <arglist>(I *col_ptrs, I *etree, I *perm_inv, I const *perm, SymbolicMatRef&lt; I &gt; a, DynStackMut stack) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>factorize_numeric_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>aa5c77bb325f72c8a569aa67e55e57af5</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, proxsuite::linalg::veg::Tag&lt; I &gt;, isize n, isize a_nnz, Ordering o) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize_numeric</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a14f4e0ed39e4203021ea7073e4d9bfb0</anchor>
      <arglist>(T *values, I *row_indices, proxsuite::linalg::veg::DoNotDeduce&lt; T const * &gt; diag_to_add, proxsuite::linalg::veg::DoNotDeduce&lt; I const * &gt; perm, I const *col_ptrs, I const *etree, I const *perm_inv, MatRef&lt; T, I &gt; a, DynStackMut stack) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>delete_row_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a0bcf63f74a17d017941e590c50b858e4</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, proxsuite::linalg::veg::Tag&lt; I &gt;, isize n, isize max_nnz) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>delete_row</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a2ab83e4b23b7a3fb5664df53c430e9ca</anchor>
      <arglist>(MatMut&lt; T, I &gt; ld, I *etree, I const *perm_inv, isize pos, DynStackMut stack) noexcept(false) -&gt; MatMut&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>add_row_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>ac959d85677fcab27b1afaa10cc3abc46</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, proxsuite::linalg::veg::Tag&lt; I &gt;, isize n, bool id_perm, isize nnz, isize max_nnz) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>add_row</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a82050235c2a096a1dea4cad699a4e8b0</anchor>
      <arglist>(MatMut&lt; T, I &gt; ld, I *etree, I const *perm_inv, isize pos, VecRef&lt; T, I &gt; new_col, proxsuite::linalg::veg::DoNotDeduce&lt; T &gt; diag_element, DynStackMut stack) noexcept(false) -&gt; MatMut&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>merge_second_col_into_first_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>afbb7ec2320c38f0d188f9f9d8f1ac44d</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt;, isize second_size) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>merge_second_col_into_first</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>a4803b9c2fde5dbef56c606a3a8acf100</anchor>
      <arglist>(I *difference, T *first_values, I *first_ptr, PROXSUITE_MAYBE_UNUSED isize first_full_len, isize first_initial_len, Slice&lt; I &gt; second, proxsuite::linalg::veg::DoNotDeduce&lt; I &gt; ignore_threshold_inclusive, bool move_values, DynStackMut stack) noexcept(false) -&gt; proxsuite::linalg::veg::Tuple&lt; SliceMut&lt; T &gt;, SliceMut&lt; I &gt;, SliceMut&lt; I &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>rank1_update_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>aad2f3a35d7814875aa62f2dc9a4cb6cd</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; T &gt;, proxsuite::linalg::veg::Tag&lt; I &gt;, isize n, bool id_perm, isize col_nnz) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>rank1_update</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse.html</anchorfile>
      <anchor>ad3b82600836aa726fc9c8f3744264829</anchor>
      <arglist>(MatMut&lt; T, I &gt; ld, I *etree, I const *perm_inv, VecRef&lt; T, I &gt; w, proxsuite::linalg::veg::DoNotDeduce&lt; T &gt; alpha, DynStackMut stack) noexcept(false) -&gt; MatMut&lt; T, I &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::sparse::_detail</name>
    <filename>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</filename>
    <class kind="struct">proxsuite::linalg::sparse::_detail::SymbolicMatMutInterface</class>
    <class kind="struct">proxsuite::linalg::sparse::_detail::SymbolicMatRefInterface</class>
    <member kind="function">
      <type>auto</type>
      <name>ereach_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>ac3aff33150ed55c05a113b18ee24e9d7</anchor>
      <arglist>(isize k) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE auto</type>
      <name>ereach</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>a9d569bd5f8ed517063a797c8021495b5</anchor>
      <arglist>(usize &amp;count, I *s, SymbolicMatRef&lt; I &gt; a, I const *parent, isize k, bool *pmarked) noexcept -&gt; I *</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>postorder_depth_first_search</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>a1f0b573c4f1f76cfb74331b58120d5af</anchor>
      <arglist>(I *post, usize root, usize start_index, I *pstack, I *pfirst_child, I *pnext_child) noexcept -&gt; usize</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>least_common_ancestor</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>a84e7c4cea461749e6d8d6023319f9887</anchor>
      <arglist>(usize i, usize j, I const *pfirst, I *pmax_first, I *pprev_leaf, I *pancestor) noexcept -&gt; I</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_perm</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>a53053f3e030bf40ec7be8dd423ca0592</anchor>
      <arglist>(I *perm_inv, I const *perm, isize n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>symmetric_permute_symbolic_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>af5d132bf736529873b8ad0349f193ff4</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt;, isize n) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>symmetric_permute_req</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>a88ce2ea48e0e22dc7bf536a803c87c88</anchor>
      <arglist>(proxsuite::linalg::veg::Tag&lt; I &gt;, isize n) noexcept -&gt; proxsuite::linalg::veg::dynstack::StackReq</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symmetric_permute_common</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>a72a7bfb0a27d4d386c4ebb8013667487</anchor>
      <arglist>(usize n, I const *pperm_inv, SymbolicMatRef&lt; I &gt; old_a, I *pnew_ap, I *pcol_counts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symmetric_permute_symbolic</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>aeb961587223b88a952ffab34dbb678b1</anchor>
      <arglist>(SymbolicMatMut&lt; I &gt; new_a, SymbolicMatRef&lt; I &gt; old_a, I const *perm_inv, DynStackMut stack) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symmetric_permute</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1__detail.html</anchorfile>
      <anchor>a6383eb48f84d52f626251a06ea5182c0</anchor>
      <arglist>(MatMut&lt; T, I &gt; new_a, MatRef&lt; T, I &gt; old_a, I const *perm_inv, DynStackMut stack) noexcept(VEG_CONCEPT(nothrow_copyable&lt; T &gt;))</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::sparse::concepts</name>
    <filename>namespaceproxsuite_1_1linalg_1_1sparse_1_1concepts.html</filename>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::sparse::tags</name>
    <filename>namespaceproxsuite_1_1linalg_1_1sparse_1_1tags.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1tags.html</anchorfile>
      <anchor>ae9a1f14680d6c23304abaa86bc75822c</anchor>
      <arglist>(from_eigen, FromEigen)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::sparse::util</name>
    <filename>namespaceproxsuite_1_1linalg_1_1sparse_1_1util.html</filename>
    <namespace>proxsuite::linalg::sparse::util::nb</namespace>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1util.html</anchorfile>
      <anchor>a1fa3710da51e7005829120f31d7f6e32</anchor>
      <arglist>(wrapping_plus)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1util.html</anchorfile>
      <anchor>a03b17c7a67b3243bf599d47027d7436d</anchor>
      <arglist>(checked_non_negative_plus)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1util.html</anchorfile>
      <anchor>a81ad07cd0d9d9d0bc6fc563bc9cf994f</anchor>
      <arglist>(wrapping_inc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1util.html</anchorfile>
      <anchor>a23fccf14ccc02b22481101d8daeb417e</anchor>
      <arglist>(wrapping_dec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1util.html</anchorfile>
      <anchor>a63d8bcd1808682328a289acdadc9738c</anchor>
      <arglist>(sign_extend)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1sparse_1_1util.html</anchorfile>
      <anchor>a61c392155b8d1906f190818291990b52</anchor>
      <arglist>(zero_extend)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::sparse::util::nb</name>
    <filename>namespaceproxsuite_1_1linalg_1_1sparse_1_1util_1_1nb.html</filename>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::checked_non_negative_plus</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::sign_extend</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::wrapping_dec</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::wrapping_inc</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::wrapping_plus</class>
    <class kind="struct">proxsuite::linalg::sparse::util::nb::zero_extend</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg.html</filename>
    <namespace>proxsuite::linalg::veg::_detail</namespace>
    <namespace>proxsuite::linalg::veg::alignment</namespace>
    <namespace>proxsuite::linalg::veg::array</namespace>
    <namespace>proxsuite::linalg::veg::cmp</namespace>
    <namespace>proxsuite::linalg::veg::collections</namespace>
    <namespace>proxsuite::linalg::veg::concepts</namespace>
    <namespace>proxsuite::linalg::veg::cpo</namespace>
    <namespace>proxsuite::linalg::veg::dynstack</namespace>
    <namespace>proxsuite::linalg::veg::literals</namespace>
    <namespace>proxsuite::linalg::veg::mem</namespace>
    <namespace>proxsuite::linalg::veg::meta</namespace>
    <namespace>proxsuite::linalg::veg::nb</namespace>
    <namespace>proxsuite::linalg::veg::tags</namespace>
    <namespace>proxsuite::linalg::veg::tuple</namespace>
    <namespace>proxsuite::linalg::veg::vector</namespace>
    <class kind="struct">proxsuite::linalg::veg::Array</class>
    <class kind="struct">proxsuite::linalg::veg::Boolean</class>
    <class kind="struct">proxsuite::linalg::veg::Boolean&lt; maybe &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::Defer</class>
    <class kind="struct">proxsuite::linalg::veg::Dyn</class>
    <class kind="struct">proxsuite::linalg::veg::Fix</class>
    <class kind="struct">proxsuite::linalg::veg::incomplete_t</class>
    <class kind="struct">proxsuite::linalg::veg::InPlace</class>
    <class kind="struct">proxsuite::linalg::veg::InPlace&lt; void &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::Ref</class>
    <class kind="struct">proxsuite::linalg::veg::RefMut</class>
    <class kind="struct">proxsuite::linalg::veg::Slice</class>
    <class kind="struct">proxsuite::linalg::veg::SliceMut</class>
    <class kind="struct">proxsuite::linalg::veg::Str</class>
    <class kind="struct">proxsuite::linalg::veg::StrLiteralConstant</class>
    <class kind="struct">proxsuite::linalg::veg::Tuple</class>
    <class kind="struct">proxsuite::linalg::veg::Vec</class>
    <member kind="typedef">
      <type>meta::constant&lt; Ternary, Ternary::no &gt;</type>
      <name>no_c</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>aa1d810209e3421e55715e58cf5904b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::constant&lt; Ternary, Ternary::maybe &gt;</type>
      <name>maybe_c</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a4e57d5df5234cc99c81a3ca12652fe05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::constant&lt; Ternary, Ternary::yes &gt;</type>
      <name>yes_c</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a843d271bba7b1ff1eb9014b1a1c1aa22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::pack_idx_elem&lt; T &gt;::template Type&lt; Ts... &gt;</type>
      <name>position_of</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a2ea7227181ea0626843ae6c2c369f24f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::pack_ith_elem&lt; I &gt;::template Type&lt; Ts... &gt;</type>
      <name>ith</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a68a2a804132a3a99c98bd51cb24c77b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(sizeof(0))</type>
      <name>usize</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a1d967c038db74b6696a5a46e4576a085</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_detail::_meta::make_signed&lt; usize &gt;::Type</type>
      <name>isize</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>af13f536f55f7e3a7af1d0e6cf9ac3c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int64_t</type>
      <name>i64</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a37918b296afbf07fd39cfb6381e2de4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>u64</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>aeb8f03d5ae98ce38dff0169b7a8da956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>i32</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>aeb213edf712377cb573b1ff372bcee20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>u32</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>aee32ae81452cbe40dc6aeb76103314fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>i16</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>ab1ad556a66ee075494d03371fff9f31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>u16</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a370f80ef58cb89dcc1078d483f3549e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>u8</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>adde8f0a94f05a5d5915635545af75c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int8_t</type>
      <name>i8</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>ad5f06c8986b82261d82c331b0d3f36ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T[N]</type>
      <name>CArray</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a7d1c909dfaaa8fcc076ee2cd6fb2c663</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(VEG_DECLVAL(T)[Fix&lt; isize{ I }&gt;{}])</type>
      <name>inner_ith</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>adfa1ae229312957015831f067a514c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::type_identity_t&lt; T &gt;</type>
      <name>DoNotDeduce</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a22035cef1b81986fadc6b272831ee525</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_meta::uncvlref&lt; T &amp; &gt;::type</type>
      <name>uncvref_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a1b2f60ba178c1d447b46635667d026e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Ternary</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>af5f706d5243de4b05849c24aaa6a5a66</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="af5f706d5243de4b05849c24aaa6a5a66a7fa3b767c460b54a2be4d49030b349c7">no</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="af5f706d5243de4b05849c24aaa6a5a66a7e7aac930123145f5f0af775ca3e1c58">maybe</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="af5f706d5243de4b05849c24aaa6a5a66aa6105c0a611b41b08f1209506350279e">yes</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CharUnit</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>aae522d4ba2f2382dbadd8b7b7cadcc43</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a6506ae39fdca9845e3a6de3865183e57">SPACE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a7a839798acc3929f5de2caf19905af09">EXCLAMATION_MARK</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ae1a1532270bcf7e9a5661f1ea9520807">DOUBLE_QUOTE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a34f55eca38e0605a84f169ff61a2a396">NUMBER</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a85f2a6cf62f04038213a310660925b9c">DOLLAR</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a6865d19576ae60f95fd4e61333404352">PERCENT</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a45ee338d502ff3cc6741dbf80f83fd25">AMPERSAND</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a75b07b16b29f72cd83e783a270b5da81">SINGLE_QUOTE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ae0a616c2eaef696c2ee124284d22587d">LEFT_PARENTHESIS</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ad51e71c1ca614f33be209ccf5c82f8f7">RIGHT_PARENTHESIS</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a71ad0fa6a6a3e480ec3446bce7073e63">ASTERISK</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a883acd43c77567e1c3baced84ccf6ed7">PLUS</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a4d9b3e9fc12849d060371eb65154c751">COMMA</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43affc0d9b54a1fe677c4c9e6b050e67c81">MINUS</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ade58a28573783fe95304a260ccd90362">PERIOD</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a646da671ca01bb5d84dbb5fb2238dc8e">SLASH</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a529e9e0beb5f85d1f132917c1a09860c">ZERO</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43abc21e6484530fc9d0313cb816b733396">ONE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a0f82d86afa0f5dc965c5c15aca58dcfb">TWO</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a413af0de1f97a2155acf2b8b26ab36e2">THREE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a341fee9692a2ed8f09906d40d23fb1f9">FOUR</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a180bb5e381e316e2246b88c92770ee75">FIVE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a48041ef8474caedcbcf2fe8996056b7f">SIX</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43aebcf71d9bbc715c43f24a10cce77dab4">SEVEN</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a960df6d77e65cd185ca4f3501db634eb">EIGHT</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a73995fb90f0ebefe78b90731e67789cd">NINE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43af65f22e75defc168edfc6444e6aaf4f8">COLON</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43abaaceccc27b1d4e0968c999583f97de5">SEMICOLON</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43aa327176a0a845c117bdfadec134a95e9">LESS_THAN</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43afc62bb0bf4a1cb7b376ab04e9e2ff5d4">EQUALITY_SIGN</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a1625ef4fe09f68fa20d3ff6e02cd5c8e">GREATER_THAN</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a705ec5e7f39c0733aeed9e24e90d2ede">QUESTION_MARK</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43adc34ccb5f0baef64839da68c7b78580b">AT_SIGN</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43aba48b9dfe5aab528ca3d04bb0bfde43b">UPPERCASE_A</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a6a299b823a5aaa9f791f0cfe23f35389">UPPERCASE_B</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43adb5b10de3aff47d0252e0f38bbc5c654">UPPERCASE_C</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a387f7a0d94067d30eae0c848480b37e9">UPPERCASE_D</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ab736c00bb44fe7188d305cb2f3c72279">UPPERCASE_E</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a075fb303d6a1c21bb416ac6525709e32">UPPERCASE_F</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a286a51cdd8e0a34b1d18d67fcfe135fd">UPPERCASE_G</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ad9c4f6aa5ef6b7f17438688d32f909f5">UPPERCASE_H</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43abd7779465a9d0bb992ef8c5838afc333">UPPERCASE_I</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ac279a999704a7cdb67e57962b91a0fe6">UPPERCASE_J</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a5e414ff0ace9cce70962434e15ac87ea">UPPERCASE_K</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a9e29c80312c305cc79877abf4268a6c9">UPPERCASE_L</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a7c14e64eb9e3c3ba28c914f7cd5479ee">UPPERCASE_M</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ad1120936f54c6e5ac71cdd967d5a4973">UPPERCASE_N</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ad36289f09b7a2d950f65c66c5999ab3c">UPPERCASE_O</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ad9c4f03b8286bc276b938497acbecaf3">UPPERCASE_P</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a0bd99aa523920cb51e43bff4b384e6bf">UPPERCASE_Q</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a3bc74283aba4f2b374c1a0f1ea4aac08">UPPERCASE_R</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43aff0a071d6a6aa003e103780e3d158c98">UPPERCASE_S</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a6a14b211f1b7d21f3747685524f27e7c">UPPERCASE_T</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43afd967d717eb4566c666002c0ee65221e">UPPERCASE_U</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43af6ff09366e756ff2d91d4146e53233c7">UPPERCASE_V</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43afa5867cb0e2e627dc2e3e1c96368e288">UPPERCASE_W</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ab6cd9586c127bac056248aeb4ed34b3c">UPPERCASE_X</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a2fe1f27ff30056a54edb72f8f2f7e6f7">UPPERCASE_Y</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a81c4a8ed6f5f26b47430768b2868e395">UPPERCASE_Z</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a5f4cd225e68554990ea2a3ee92ce5c82">LEFT_SQUARE_BRACKET</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43aecb4a6f3440c2ed0dff59f17375a27c0">BACKSLASH</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ac3171c80da15bc00106afa75baa9aa2c">RIGHT_SQUARE_BRACKET</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a3fa4f0392be4af9d316dc092f60ff3ca">CARET</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a0454988b6250b7e13d8e9222e118c127">GRAVE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43af7468b5e26a7bbd38da3d85cce3e6ada">LOWERCASE_A</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a3180060b42a751412d8c80ce8f1a36ee">LOWERCASE_B</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43acee2ad988a18d476194ef646dee49701">LOWERCASE_C</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ae0042877e71295ae4631c9e7fe461ec3">LOWERCASE_D</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a964b9732f18da6b01d894b699b7dc9ef">LOWERCASE_E</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43abeb2f1f24c849679435c23c4dee0df5a">LOWERCASE_F</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43af8ffec959a394f454c1fdb6508cbcb31">LOWERCASE_G</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a0ad953dbd4f92f9dab62f8e906db83b0">LOWERCASE_H</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a9236a9bcfc8f7c409f59618fddec1416">LOWERCASE_I</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a5ba53ea36e2f3c70ec9062f2ef71e069">LOWERCASE_J</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a1b56c1f00f793e4a40a27791a75f9348">LOWERCASE_K</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a220f8837ea100283a326a6052767cfde">LOWERCASE_L</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a31ec28a3c35350da08ca0f15926e74f8">LOWERCASE_M</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a1f9e6e28618109482eaf45bb6b1f194b">LOWERCASE_N</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a9af6db897c5c911ebebee70c8f8017b8">LOWERCASE_O</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ad103738936a35488bbed9d6017007a94">LOWERCASE_P</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ac43462472d2f3f61bad790a561fb4508">LOWERCASE_Q</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a81a8aee78a8073a0e0483b04a77782d8">LOWERCASE_R</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ad1a060288e1d7a2dcd24432f8621c967">LOWERCASE_S</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a4280f62a5225c344f085f2e2caacbc24">LOWERCASE_T</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43afecda797b8dd5b476ba52dd284896698">LOWERCASE_U</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a5b3c60bd5b8bd2e59020c2fdf9bb3cf0">LOWERCASE_V</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ac3fe4107f3981a0dd62fb2c17ee3fa6c">LOWERCASE_W</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ab6c7c3bc04e79631250bf235c8eadacc">LOWERCASE_X</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ab1bb3c9ac1aaa81c2a4bc4f7222947bb">LOWERCASE_Y</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43ac26853774873740fb506b92c3749e2f9">LOWERCASE_Z</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43aacf2e9f90691a2ae81ea399f966e69fd">LEFT_CURLY_BRACKET</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a7fd53dd44cc83e9989b885e2b7cee03d">VERTICAL_BAR</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a7534dcf3c7ba1b391dd0bfd12c8c79c0">RIGHT_CURLY_BRACKET</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg.html" anchor="aae522d4ba2f2382dbadd8b7b7cadcc43a56c6bab37a27b6b81a2dfcf5fac43329">TILDE</enumvalue>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>print_types_halt</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>aca337bef3983b0767f2842160206026f</anchor>
      <arglist>(Args &amp;&amp;...) -&gt; incomplete_t&lt; Types..., Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CPP14</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a81af152eb16629b9315bf2c459cf02f5</anchor>
      <arglist>(constexpr) void print_types(Args &amp;&amp;...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>aa6eb5a3c54ebb1a7e7aaf532bc2f4979</anchor>
      <arglist>(unused)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID_TEMPLATE</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a2e322d2917833471ef0a3845b516ae2e</anchor>
      <arglist>(typename To, narrow, To)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>ac6a1811605252621d6baeedefadafce5</anchor>
      <arglist>(clone)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>af21df53b2a62637af2ce88b86c680006</anchor>
      <arglist>(deref)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>aed3e2122f15ec162a3f112e1c56126a9</anchor>
      <arglist>(deref_mut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>aa4630fb36ef845947b8e96dbfb30e927</anchor>
      <arglist>(ref)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>af7a4cca1a5b0f291954fc5a3331b8639</anchor>
      <arglist>(mut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a42b94f558700079cdcbceca88ad52cda</anchor>
      <arglist>(init_list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CPP17</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a047542255f6abb2d35eb4bd4456f09d3</anchor>
      <arglist>(template&lt; typename Fn &gt; Defer(Fn) -&gt; Defer&lt; Fn &gt;;) namespace nb</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a6fc31c139f53d764a4baf7ac8dbcf058</anchor>
      <arglist>(defer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID_TEMPLATE</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>af00b11840815bdc9f5aeb348a90cfd0d</anchor>
      <arglist>(usize I, get, I)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>no</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a88d921b6dcd3a431f3d87116fd10987b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>maybe</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a5990d7b9760dd78ff15b42fae0f33317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>yes</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a8caf3e65dcf8d6c5b37b66119e7b5a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr CharUnit</type>
      <name>StrLiteralConstant&lt; Cs... &gt;::literal</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg.html</anchorfile>
      <anchor>a1287384e3260a0348745ff1d6df0406e</anchor>
      <arglist>[sizeof...(Cs)]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</filename>
    <namespace>proxsuite::linalg::veg::_detail::_collections</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_cpo</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_dynstack</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_mem</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_meta</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_slice</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_tuple</namespace>
    <namespace>proxsuite::linalg::veg::_detail::_vector</namespace>
    <namespace>proxsuite::linalg::veg::_detail::idx</namespace>
    <namespace>proxsuite::linalg::veg::_detail::meta_</namespace>
    <class kind="struct">proxsuite::linalg::veg::_detail::Array_</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Dyn, Dyn &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Dyn, Fix&lt; N &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Fix&lt; 0 &gt;, Dyn &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Fix&lt; N &gt;, Dyn &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::binary_traits&lt; Fix&lt; N &gt;, Fix&lt; M &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::char_seq</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::CopyFn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::DefaultFn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::EmptyI</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::Error</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::ExtractCharsImpl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::ExtractCharsImpl&lt; LiteralType, _meta::integer_sequence&lt; usize, Is... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::ExtractCharsImplExpr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::ExtractCharsImplExpr&lt; LiteralType, _meta::integer_sequence&lt; usize, Is... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::HollowIndexedTuple</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::HollowIndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::HollowLeaf</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::mem_ptr_type</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::mem_ptr_type&lt; Mem C::* &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::member_extract_access</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::MoveFn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoCopy</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoCopyAssign</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoCopyCtor</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoDefaultCtor</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoMove</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoMoveAssign</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::NoMoveCtor</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::pack_idx_elem</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::pack_ith_elem</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::SimpleITuple</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::SimpleITuple&lt; _meta::integer_sequence&lt; usize, Is... &gt;, Ts... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::SimpleLeaf</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::WithArg</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::Wrapper</class>
    <member kind="typedef">
      <type>auto(*)(char, Error) -&gt; u64</type>
      <name>parser</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a74dd24c8257daa9f3c6d432f242c825e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EmptyI&lt; 0 &gt;</type>
      <name>Empty</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a443afeb79d07a3ff51d660dda041d2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Empty[]</type>
      <name>EmptyArr</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a886fb67a04881a84a96686d356e68a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleITuple&lt; _meta::make_index_sequence&lt; sizeof...(Ts)&gt;, Ts... &gt;</type>
      <name>SimpleTuple</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a2fef663bb497afeb3b412f6353c0ab38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::uncvref_t&lt; decltype(u8&quot;&quot;[0])&gt;</type>
      <name>NativeChar8</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a09d158a9faf401bce28aff502b1dabf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse_digit_2</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a4379a979e0555a847e8c49c400d427c3</anchor>
      <arglist>(char c, Error e) VEG_NOEXCEPT -&gt; u64</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse_digit_8</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>aef9cc41dfe989f0044ef3ce2bd4eab1c</anchor>
      <arglist>(char c, Error e) VEG_NOEXCEPT -&gt; u64</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse_digit_10</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a210a902dc9cac6a2e08283a9222c8524</anchor>
      <arglist>(char c, Error e) VEG_NOEXCEPT -&gt; u64</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse_digit_16</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a25a6b47c050222f66410ca6fe78df260</anchor>
      <arglist>(char c, Error e) VEG_NOEXCEPT -&gt; u64</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse_digit</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>aa5eaeea2eb636d97905716044e1b76c7</anchor>
      <arglist>(u64 radix) VEG_NOEXCEPT -&gt; parser</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse_num</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a6163a39a4814295e9ef40fd0dd322c08</anchor>
      <arglist>(char const *str, u64 len, u64 radix, Error e) VEG_NOEXCEPT -&gt; u64</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse_int</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a3a9a77103d04ba9d99d9aeebefe65d04</anchor>
      <arglist>(char const *str, u64 len, Error e) VEG_NOEXCEPT -&gt; u64</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_type</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a88d9359f12ef8255b6c05beedf0e335e</anchor>
      <arglist>(HollowLeaf&lt; I, T &gt; const *) VEG_NOEXCEPT -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_idx</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>aca403eaef7594753be19b39a58bbf58a</anchor>
      <arglist>(HollowLeaf&lt; I, T &gt; const *) VEG_NOEXCEPT -&gt; meta::constant&lt; usize, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>make_simple_tuple</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>aea0d6fb28ed2b17b712ec8ca197ffcf1</anchor>
      <arglist>(Empty, Ts... args) noexcept -&gt; SimpleTuple&lt; Ts... &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>all_of_slice</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>adf61eeb93454b0cddeef41c89c0c1c92</anchor>
      <arglist>(bool const *arr, usize size) VEG_NOEXCEPT -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>all_of</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>aa2cc990a3b9dcd3f8f16766ee1f97d44</anchor>
      <arglist>(bool const (&amp;lst)[N]) VEG_NOEXCEPT -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>assert_complete</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>aba8ec45fe084af581302323fdb4dcf9d</anchor>
      <arglist>() noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>extract_chars</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>acfe763a5f047a3ace4a241156b2d34d2</anchor>
      <arglist>(LiteralType) -&gt; typename ExtractCharsImpl&lt; LiteralType, _meta::make_index_sequence&lt; LiteralType::Size::value &gt; &gt;::Type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>extract_chars_expr</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a5fb5a6501d8a5adb0ea7dde66493463d</anchor>
      <arglist>(LiteralType) -&gt; typename ExtractCharsImplExpr&lt; LiteralType, _meta::make_index_sequence&lt; LiteralType::Size::value &gt; &gt;::Type</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>aaaa018bfbd94923135b274f338d4015a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>align_next</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>afa031d184557e13c9bd99ac32a6fbb0f</anchor>
      <arglist>(isize alignment, isize size, void *&amp;ptr, isize &amp;space) VEG_ALWAYS_NOEXCEPT -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>HEDLEY_NEVER_INLINE void</type>
      <name>throw_bad_alloc</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>ae2a3ceecb798c800a2d7e5287a475619</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>min2</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>af940fcc2bb012995cda687d9143679df</anchor>
      <arglist>(T a, T b) noexcept -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>max2</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail.html</anchorfile>
      <anchor>a84ce8e66fe4afc85c765c7e7c688ae1b</anchor>
      <arglist>(T a, T b) noexcept -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_collections</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::AllocCleanup</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::Cleanup</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneFn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneFromImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneFromImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneImpl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::CloneImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::DestroyImpl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::DestroyImpl&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::DestroyImpl&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::relocate_pointer</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::relocate_pointer&lt; T, false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::relocate_pointer_trivial</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_collections::VecImpl</class>
    <member kind="function">
      <type>void</type>
      <name>backward_destroy</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections.html</anchorfile>
      <anchor>ac13e53128895c89e0fc037201f9025d2</anchor>
      <arglist>(RefMut&lt; A &gt; alloc, RefMut&lt; C &gt; cloner, T *ptr, T *ptr_end)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>vector_grow_compute</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections.html</anchorfile>
      <anchor>afa32fec60dca2551b8d0a2ecdacb6f42</anchor>
      <arglist>(usize current_cap) noexcept -&gt; usize</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>vector_grow_choose</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections.html</anchorfile>
      <anchor>a405021aa496356872ea476cd3d242802</anchor>
      <arglist>(usize current_cap, usize new_cap) noexcept -&gt; usize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>relocate</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections.html</anchorfile>
      <anchor>ad974291cc7f4acccae3ccbbdcbe15af1</anchor>
      <arglist>(void *out, void const *in, usize nbytes) noexcept -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>slice_clone</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections.html</anchorfile>
      <anchor>a0e7b07967551c1607dc8f3fb0a643d15</anchor>
      <arglist>(RefMut&lt; A &gt; alloc, RefMut&lt; C &gt; cloner, T *out, T *out_end, T const *in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>slice_clone_from</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections.html</anchorfile>
      <anchor>a770883d3696a2fbbeca6fc5b67afbec1</anchor>
      <arglist>(RefMut&lt; A &gt; alloc, RefMut&lt; C &gt; cloner, T *out, T *out_end, T const *in) VEG_NOEXCEPT_IF(true)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>relocate_backward</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections.html</anchorfile>
      <anchor>a4d8dfc85874d77e3ef32079c432d7d64</anchor>
      <arglist>(void *out, void const *in, usize nbytes) noexcept -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>clone_from</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__collections.html</anchorfile>
      <anchor>a7bffc5331e08d4b14fe10f06bd1fdbbe</anchor>
      <arglist>(RefMut&lt; A &gt; lhs_alloc, RefMut&lt; C &gt; cloner, vector::RawVector&lt; T &gt; &amp;lhs_raw, Ref&lt; A &gt; rhs_alloc, vector::RawVector&lt; T &gt; const rhs_raw) VEG_NOEXCEPT_IF(VEG_CONCEPT(nothrow_copy_assignable&lt; A &gt;) &amp;&amp;VEG_CONCEPT(alloc</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_cpo</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__cpo.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait_impl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_cpo::extract_members_deduce_trait_impl&lt; true, Trait, T &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_cpo::member_trait_and</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_cpo::member_trait_and&lt; Trait, SimpleITuple&lt; _meta::integer_sequence&lt; usize, Is... &gt;, Ts Bases::*... &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_dynstack</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::cleanup</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::default_init_fn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::DynAllocBase</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::DynStackArrayDtor</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::DynStackArrayDtor&lt; T, false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::no_init_fn</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_dynstack::zero_init_fn</class>
    <member kind="function">
      <type>constexpr auto</type>
      <name>max2</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack.html</anchorfile>
      <anchor>a6a12239db198b7340e1e7b9a08d5affa</anchor>
      <arglist>(isize a, isize b) noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>round_up_pow2</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__dynstack.html</anchorfile>
      <anchor>a50d87b85a866fe8f29db60c7da0e52d6</anchor>
      <arglist>(isize a, isize b) noexcept -&gt; isize</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_mem</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__mem.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::addr_impl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::adl_addr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::builtin_addr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::BumpAllocLayout</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::DeferUnreachable</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::has_adl_addr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::has_member_addr</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::ManagedAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_mem::member_addr</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_meta</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</filename>
    <namespace>proxsuite::linalg::veg::_detail::_meta::_detail</namespace>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detector</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detector&lt; meta::void_t&lt; Ftor&lt; Args... &gt; &gt;, Ftor, Args... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::adl_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::all_same_impl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::all_same_impl&lt; meta::index_sequence&lt; Is... &gt;, discard_1st&lt; decltype(Is), T &gt;... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::all_same_impl&lt; meta::index_sequence&lt;&gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::apply_type_seq</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::apply_type_seq&lt; F, meta::type_sequence&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::array_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::baseof_wrapper</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::concat_type_seq</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F, F&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F, F&lt; Ts... &gt;, F&lt; Us... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::concat_type_seq&lt; true_type, F, F&lt; Ts... &gt;, F&lt; Us... &gt;, F&lt; Vs... &gt;, Seqs... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::conditional_</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::conditional_&lt; false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::conditional_&lt; true &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::decay_helper</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::decay_helper&lt; Ret(Args...)&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::decay_helper&lt; T[N]&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::detector</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::enable_if</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::enable_if&lt; false, T &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::has_adl_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::has_array_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::has_member_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::integer_sequence</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_complete</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_complete&lt; T, bool_constant&lt; sizeof(T)==sizeof(T)&gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_const</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_const&lt; T const &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_fix</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_fix&lt; Fix&lt; N &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_lvalue_reference</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_lvalue_reference&lt; T &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_pointer</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_pointer&lt; T * &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_rvalue_reference</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::is_rvalue_reference&lt; T &amp;&amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned char &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned int &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned long &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned long long &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::make_signed&lt; unsigned short &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::member_get</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::none</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::none_found</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::specialize_len</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::specialize_len&lt; F, F&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::specializes</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::specializes&lt; F, F&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::type_sequence</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::uncvlref</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T const &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T volatile &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::uncvlref&lt; T volatile const &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::unref</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::unref&lt; T &amp; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::wrapper</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::wrapper_base</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq2</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq2&lt; F, F&lt; Ts... &gt;, F&lt; Zipped... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq&lt; meta::true_type, F &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq&lt; meta::true_type, F, F&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::zip_type_seq&lt; meta::true_type, F, F&lt; Ts... &gt;, Seq, Seqs... &gt;</class>
    <member kind="typedef">
      <type>V</type>
      <name>discard_1st</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>a49ba5e8b362ba41334804c8f2abe7c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_make_integer_sequence&lt; T, N &gt;::type</type>
      <name>make_integer_sequence</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>a354e1ab98bd3eb75d4958411a9720184</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>make_integer_sequence&lt; usize, N &gt;</type>
      <name>make_index_sequence</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>ae87fdbf0be2baf71bdec8d889a122f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(wrapper&lt; T &gt;::test(static_cast&lt; wrapper&lt; U &gt; * &gt;(nullptr)))</type>
      <name>is_same</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>aaa31737ca600226590dafebeab6d5a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detector&lt; _meta::none, Op, Args... &gt;::value_type</type>
      <name>is_detected</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>a629a7c9c71ba8a283dc4a077eb0dafe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(baseof_wrapper&lt; Base &gt;::test(static_cast&lt; Derived &gt;(nullptr)))</type>
      <name>is_base_of</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>a21437f178abf5a21ebdd2d70751277aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(VEG_DECLVAL(Fn &amp;&amp;)(VEG_DECLVAL(Args &amp;&amp;)...))</type>
      <name>call_expr</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>ab3bd560666569b6fd7437a69ede1266b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(VEG_DECLVAL(T &amp;&amp;).template get&lt; I::value &gt;())</type>
      <name>member_get_expr</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>a98a718aa23b02d3266271ef3023729a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(get&lt; I::value &gt;(VEG_DECLVAL(T &amp;&amp;)))</type>
      <name>adl_get_expr</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>ad23060cac456b78c5fc06d3dfa285282</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta.html</anchorfile>
      <anchor>a8ec8f0726a393417a1f414a8f59f9427</anchor>
      <arglist>()=delete</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_meta::_detail</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__meta_1_1__detail.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence&lt; T, 0 &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence&lt; T, 1 &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_make_integer_sequence&lt; T, N, false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_merge</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_merge&lt; integer_sequence&lt; T, Nums1... &gt;, integer_sequence&lt; T, Nums2... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_merge_p1</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_meta::_detail::_merge_p1&lt; integer_sequence&lt; T, Nums1... &gt;, integer_sequence&lt; T, Nums2... &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_slice</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__slice.html</filename>
    <namespace>proxsuite::linalg::veg::_detail::_slice::adl</namespace>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_slice::adl</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__slice_1_1adl.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::_slice::adl::AdlBase</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_tuple</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__tuple.html</filename>
    <member kind="function" static="yes">
      <type>static VEG_INLINE constexpr auto</type>
      <name>tuple_fwd</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__tuple.html</anchorfile>
      <anchor>aa84baf23972f1d0a12aceb3cc473e72b</anchor>
      <arglist>(tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &amp;&amp;tup) VEG_NOEXCEPT -&gt; Tuple&lt; Ts &amp;&amp;... &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_vector</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector.html</filename>
    <namespace>proxsuite::linalg::veg::_detail::_vector::adl</namespace>
    <class kind="struct">proxsuite::linalg::veg::_detail::_vector::RawVectorMoveRaii</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::_vector::VecAlloc</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::_vector::adl</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1__vector_1_1adl.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::_vector::adl::AdlBase</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::idx</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1idx.html</filename>
    <namespace>proxsuite::linalg::veg::_detail::idx::adl</namespace>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::idx::adl</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1idx_1_1adl.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::idx::adl::IdxBase</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::_detail::meta_</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1__detail_1_1meta__.html</filename>
    <class kind="struct">proxsuite::linalg::veg::_detail::meta_::IndexedToTuple</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::meta_::IndexedToTuple&lt; tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::meta_::is_tuple_helper</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::meta_::NonTupleBaseInfoImpl</class>
    <class kind="struct">proxsuite::linalg::veg::_detail::meta_::TupleBaseInfoImpl</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::alignment</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1alignment.html</filename>
    <namespace>proxsuite::linalg::veg::alignment::detail</namespace>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::alignment::detail</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1alignment_1_1detail.html</filename>
    <class kind="struct">proxsuite::linalg::veg::alignment::detail::alignment_of</class>
    <class kind="struct">proxsuite::linalg::veg::alignment::detail::min_size</class>
    <class kind="struct">proxsuite::linalg::veg::alignment::detail::offset_value</class>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_alignment</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1alignment_1_1detail.html</anchorfile>
      <anchor>ae009c4d27e4e6f0e264d6679f0d532fc</anchor>
      <arglist>(std::size_t value)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>align</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1alignment_1_1detail.html</anchorfile>
      <anchor>ac71aa52ea836d51602552f935e4631fe</anchor>
      <arglist>(std::size_t alignment, std::size_t size, void *&amp;ptr, std::size_t &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>aligned_alloc</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1alignment_1_1detail.html</anchorfile>
      <anchor>a6cb9ac31eb2af20837f74384ced7f610</anchor>
      <arglist>(std::size_t alignment, std::size_t size)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::array</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1array.html</filename>
    <class kind="struct">proxsuite::linalg::veg::array::Array</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::cmp</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1cmp.html</filename>
    <namespace>proxsuite::linalg::veg::cmp::mut</namespace>
    <namespace>proxsuite::linalg::veg::cmp::ref</namespace>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::cmp::mut</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1cmp_1_1mut.html</filename>
    <class kind="struct">proxsuite::linalg::veg::cmp::mut::RefMutBase</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::cmp::ref</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1cmp_1_1ref.html</filename>
    <class kind="struct">proxsuite::linalg::veg::cmp::ref::RefBase</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::collections</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1collections.html</filename>
    <class kind="struct">proxsuite::linalg::veg::collections::relocate_pointer</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::concepts</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</filename>
    <namespace>proxsuite::linalg::veg::concepts::alloc</namespace>
    <namespace>proxsuite::linalg::veg::concepts::aux</namespace>
    <namespace>proxsuite::linalg::veg::concepts::tuple</namespace>
    <class kind="struct">proxsuite::linalg::veg::concepts::conjunction</class>
    <class kind="struct">proxsuite::linalg::veg::concepts::disjunction</class>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>aa8ae42727a6eae6f8f04a5aa6a77308a</anchor>
      <arglist>(typename T, index, VEG_CONCEPT(same&lt; T, Dyn &gt;)||_detail::_meta::is_fix&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a0cc85ba664b238baea66d1d5e25c6aa3</anchor>
      <arglist>(typename... Ts, all_same, _detail::_meta::all_same_impl&lt; meta::make_index_sequence&lt; sizeof...(Ts)&gt;, Ts... &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_BUILTIN_OR_INTERNAL</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>afc66a8972f0f7deb8ab315469ef9aa9a</anchor>
      <arglist>((typename T, typename U), same, T, U)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a245b1cac7ba5ca18ac4a1607268c22d5</anchor>
      <arglist>((typename T, typename U), assignable, T, U)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a02de537557527e5ceac9d9ae493f453c</anchor>
      <arglist>((typename T, typename U), nothrow_assignable, T &amp;&amp;, U &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_TRAIT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>af0982ecfffecccb905d2038583572fbb</anchor>
      <arglist>(typename T, trivially_copy_assignable, is_trivially_assignable, T &amp;, T const &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_TRAIT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>ac07fc94a057f494ddb589c785847c614</anchor>
      <arglist>(typename T, trivially_move_assignable, is_trivially_assignable, T &amp;, T &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a46e2bfde90aafab0216360ef0bdf135c</anchor>
      <arglist>(typename T, move_assignable, VEG_CONCEPT(assignable&lt; T &amp;, T &amp;&amp; &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a3e050a0a525e97112c1857234a9485f5</anchor>
      <arglist>(typename T, nothrow_move_assignable, VEG_CONCEPT(nothrow_assignable&lt; T &amp;, T &amp;&amp; &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a49440ddb842415c8e7072bafdd2427f7</anchor>
      <arglist>(typename T, copy_assignable, VEG_CONCEPT(assignable&lt; T &amp;, T const &amp; &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a33f8539379f875b408b8df725a804a95</anchor>
      <arglist>(typename T, nothrow_copy_assignable, VEG_CONCEPT(nothrow_assignable&lt; T &amp;, T const &amp; &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a5130db9d2fa0ab59679710d72eba46cf</anchor>
      <arglist>(typename T, final,(sizeof(T)&lt; 0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a6da228f9d464389284b608daa4ea81c6</anchor>
      <arglist>(typename T, empty, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>aa7005855fc637f48cc83ce005772168c</anchor>
      <arglist>(typename T, nothrow_destructible, noexcept(static_cast&lt; T * &gt;(nullptr) -&gt;~T()))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>aeb6dbace9225774a8bda17ca829a30a2</anchor>
      <arglist>(typename T, trivially_destructible, std::is_trivially_destructible&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>aedeb7f6f6a6f0b5c0ccaafa739194106</anchor>
      <arglist>(typename T, trivially_copyable, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_TRAIT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>aa77679bf9647045562fd4773369ddea2</anchor>
      <arglist>(typename T, trivially_default_constructible, is_trivially_constructible, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_TRAIT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a1a64e72d43f55026f97de40369d90ffe</anchor>
      <arglist>(typename T, trivially_copy_constructible, is_trivially_constructible, T, T const &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_TRAIT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a2482eeae393d9b87bd7345eece07f3a4</anchor>
      <arglist>(typename T, trivially_move_constructible, is_trivially_constructible, T, T &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a22f8d01f754b1efa38a24283592ac24d</anchor>
      <arglist>((typename T, typename... Ts),(T, Ts...), inplace_constructible, new(static_cast&lt; void * &gt;(nullptr)) T(VEG_DECLVAL(Ts &amp;&amp;)...), true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a5066c7cc92257492f595acd9297c6c87</anchor>
      <arglist>((typename T, typename... Ts), constructible, T, Ts &amp;&amp;...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a434c88c74a616b7d7bfd4119cf096561</anchor>
      <arglist>((typename T, typename... Ts), nothrow_constructible, T, Ts &amp;&amp;...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a188e9a7e3cdfc56e7b34eb16fb433463</anchor>
      <arglist>((typename From, typename To), convertible, From &amp;&amp;, To)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a94ddb65f9eab8a026c6587fda73de8b7</anchor>
      <arglist>((typename T, typename U), implicitly_constructible, VEG_CONCEPT(convertible&lt; U &amp;&amp;, T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a93b5f92d7822a4425918ea0b7adb8ce7</anchor>
      <arglist>(typename T, movable, VEG_HAS_BUILTIN_OR(__is_constructiblex, __is_constructible(T, T &amp;&amp;),(VEG_CONCEPT(constructible&lt; T, T &amp;&amp; &gt;))))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a40de2717d6b6cd878bec57e07e9bce12</anchor>
      <arglist>(typename T, nothrow_movable, VEG_HAS_BUILTIN_OR(__is_nothrow_constructiblex, __is_nothrow_constructible(T, T &amp;&amp;),(VEG_CONCEPT(nothrow_constructible&lt; T, T &amp;&amp; &gt;))))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a0a8b44930e3abb506824f1ff024a550d</anchor>
      <arglist>(typename T, copyable, VEG_CONCEPT(constructible&lt; T, T const &amp; &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>adbce7b1e27dc3824360d938ac7372317</anchor>
      <arglist>(typename T, nothrow_copyable, VEG_CONCEPT(nothrow_constructible&lt; T, T const &amp; &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a3234f1d3633715280ba8bfcdd11e4b6e</anchor>
      <arglist>((template&lt; typename... &gt; class Op, typename... Args), detected, _detail::_meta::is_detected&lt; Op, Args... &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_BUILTIN_OR_INTERNAL</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>af6ffe179e6df294b5874c821c4e3d66e</anchor>
      <arglist>((typename T, typename U), base_of, T, U)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>ace77375b6dae14814cd12cd159401b5f</anchor>
      <arglist>(typename T, const_type, VEG_HAS_BUILTIN_OR(__is_const, __is_const(T),(_detail::_meta::is_const&lt; T &gt;::value)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a87561284afafc7543e663e7b2e532665</anchor>
      <arglist>(typename T, void_type, VEG_CONCEPT(same&lt; void const volatile, T const volatile &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>aec51cee2784a93fa551099f4a760dcae</anchor>
      <arglist>(typename T, pointer, _detail::_meta::is_pointer&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_BUILTIN_OR_INTERNAL</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a03e54fcc78c49670e3dcf2be5be63fe9</anchor>
      <arglist>(typename T, lvalue_reference, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_BUILTIN_OR_INTERNAL</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>ae57f2480f300bc291d80e37f5c487d1c</anchor>
      <arglist>(typename T, rvalue_reference, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a5772af47273945e381e75cd343178f72</anchor>
      <arglist>(typename T, reference,(VEG_CONCEPT(lvalue_reference&lt; T &gt;)||VEG_CONCEPT(rvalue_reference&lt; T &gt;)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a494eebeb9b1a867863dcc33ee64ea08c</anchor>
      <arglist>(typename T, complete, _detail::_meta::is_complete&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a4f6294d0026fd122dddc5ab8cfba22f3</anchor>
      <arglist>((typename Fn, typename Ret, typename... Args),(Fn, Ret, Args...), fn_once, VEG_DECLVAL(Fn &amp;&amp;)(VEG_DECLVAL(Args &amp;&amp;)...), VEG_CONCEPT(same&lt; ExprType, Ret &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a57eb06f7250ea62881641d20e441b1f1</anchor>
      <arglist>((typename Fn, typename Ret, typename... Args),(Fn, Ret, Args...), fn_mut, VEG_DECLVAL(Fn &amp;)(VEG_DECLVAL(Args &amp;&amp;)...), VEG_CONCEPT(same&lt; ExprType, Ret &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>ad9bbf84e46d0b0c8d61e7e32327c19ee</anchor>
      <arglist>((typename Fn, typename Ret, typename... Args),(Fn, Ret, Args...), fn, VEG_DECLVAL(Fn const &amp;)(VEG_DECLVAL(Args &amp;&amp;)...), VEG_CONCEPT(same&lt; ExprType, Ret &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a1d488938497b77c1df46ec0be387cda3</anchor>
      <arglist>(typename T, enum_type, VEG_HAS_BUILTIN_OR(__is_enum, __is_enum(T), std::is_enum&lt; T &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>abf216833b7892d386f0ffc92f552819e</anchor>
      <arglist>(typename T, integral, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_FROM_BUILTIN_OR_STD</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>af1467f3d3ab670addb7c9c4e45b2eba9</anchor>
      <arglist>(typename T, floating_point, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_DISJUNCTION</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>ad25024a59b6d700e7e029c8dd3272bdf</anchor>
      <arglist>(typename T, arithmetic,((, integral&lt; T &gt;),(, floating_point&lt; T &gt;)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_CONJUNCTION</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>afdc35d1bf91faae0d60865ef6f47de51</anchor>
      <arglist>(typename T, signed_integral,((, integral&lt; T &gt;),(aux::, no_wraps_around&lt; T &gt;)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_CONJUNCTION</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a02de51faa4827928a45111d32bc3fa87</anchor>
      <arglist>(typename T, unsigned_integral,((, integral&lt; T &gt;),(aux::, wraps_around&lt; T &gt;)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_CONJUNCTION</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a9de5b5c3581dec9a025c2702acb93fee</anchor>
      <arglist>((usize I, typename T), array_gettable,((aux::, bounded_array&lt; uncvref_t&lt; T &gt; &gt;),(aux::, less_than&lt; I, meta::array_extent&lt; uncvref_t&lt; T &gt; &gt;::value &gt;)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>a8c464a195514b1be55a9d5392e956401</anchor>
      <arglist>((usize I, typename T), member_gettable, VEG_CONCEPT(detected&lt; _detail::_meta::member_get_expr, meta::constant&lt; usize, I &gt;, T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>ac73528fd99757a33ed6a77d1260d0ab2</anchor>
      <arglist>((usize I, typename T), adl_gettable, VEG_CONCEPT(detected&lt; _detail::_meta::adl_get_expr, meta::constant&lt; usize, I &gt;, T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT_DISJUNCTION</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts.html</anchorfile>
      <anchor>af66ba28b5584bf6783e75871523677f5</anchor>
      <arglist>((usize I, typename T), gettable,((, array_gettable&lt; I, T &gt;),(, member_gettable&lt; I, T &gt;),(, adl_gettable&lt; I, T &gt;)))</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::concepts::alloc</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1alloc.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1alloc.html</anchorfile>
      <anchor>a639f637bb5915164f0c870d6bc9ec93a</anchor>
      <arglist>((typename A),(A), dealloc, mem::Alloc&lt; A &gt;::dealloc(VEG_DECLVAL(RefMut&lt; A &gt;), VEG_DECLVAL(void *), VEG_DECLVAL(mem::Layout)), true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1alloc.html</anchorfile>
      <anchor>a2bd9b7bdfefd7964473d91356c3fc2ca</anchor>
      <arglist>((typename A),(A), alloc, mem::Alloc&lt; A &gt;::alloc(VEG_DECLVAL(RefMut&lt; A &gt;), VEG_DECLVAL(mem::Layout)), VEG_CONCEPT(same&lt; ExprType, mem::AllocBlock &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1alloc.html</anchorfile>
      <anchor>a3a9a6478f0067f085c961c25a915fb10</anchor>
      <arglist>((typename A),(A), owns_alloc, mem::Alloc&lt; A &gt;::owns(VEG_DECLVAL(Ref&lt; A &gt;), VEG_DECLVAL(mem::Layout)), VEG_CONCEPT(same&lt; ExprType, bool &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1alloc.html</anchorfile>
      <anchor>a70faedf17ae0fb3157bea3a1d7bb5e8e</anchor>
      <arglist>((typename A),(A), grow, mem::Alloc&lt; A &gt;::grow(VEG_DECLVAL(RefMut&lt; A &gt;), VEG_DECLVAL(void *), VEG_DECLVAL(mem::Layout), VEG_DECLVAL(usize), VEG_DECLVAL(mem::RelocFn)), VEG_CONCEPT(same&lt; ExprType, mem::AllocBlock &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1alloc.html</anchorfile>
      <anchor>a8ff706cffabd0c8545345e6a316ba03b</anchor>
      <arglist>((typename A),(A), shrink, mem::Alloc&lt; A &gt;::shrink(VEG_DECLVAL(RefMut&lt; A &gt;), VEG_DECLVAL(void *), VEG_DECLVAL(mem::Layout), VEG_DECLVAL(usize), VEG_DECLVAL(mem::RelocFn)), VEG_CONCEPT(same&lt; ExprType, mem::AllocBlock &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1alloc.html</anchorfile>
      <anchor>a93ada06c67ad04567b06f3418cb8fd92</anchor>
      <arglist>((typename C, typename T, typename A),(C, T, A), destroy, mem::Cloner&lt; C &gt;::destroy(VEG_DECLVAL(RefMut&lt; C &gt;), VEG_DECLVAL(T *), VEG_DECLVAL(RefMut&lt; A &gt;)), true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1alloc.html</anchorfile>
      <anchor>abffcff4330da58add96c60b5bfba8fea</anchor>
      <arglist>((typename C, typename T, typename A),(C, T, A), clone, mem::Cloner&lt; C &gt;::clone(VEG_DECLVAL(RefMut&lt; C &gt;), VEG_DECLVAL(Ref&lt; T &gt;), VEG_DECLVAL(RefMut&lt; A &gt;)), VEG_CONCEPT(same&lt; ExprType, T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_CONCEPT_EXPR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1alloc.html</anchorfile>
      <anchor>a3c8a6779ed77b59fdd4e77725dd5d66f</anchor>
      <arglist>((typename C, typename T, typename A),(C, T, A), clone_from, mem::Cloner&lt; C &gt;::clone_from(VEG_DECLVAL(RefMut&lt; C &gt;), VEG_DECLVAL(RefMut&lt; T &gt;), VEG_DECLVAL(Ref&lt; T &gt;), VEG_DECLVAL(RefMut&lt; A &gt;)), true)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::concepts::aux</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1aux.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1aux.html</anchorfile>
      <anchor>a98e470f425ebf5002b26155778cae5f6</anchor>
      <arglist>(typename T, no_wraps_around,(T(-1)&lt;=T(0)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1aux.html</anchorfile>
      <anchor>ac0bebc6c3d92089e0bd3904ec96210a1</anchor>
      <arglist>(typename T, wraps_around,(T(-1) &gt; T(0)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1aux.html</anchorfile>
      <anchor>a635d7b92eb93229c9325ef45ed2abf38</anchor>
      <arglist>((usize I, usize N), less_than,(I&lt; N))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1aux.html</anchorfile>
      <anchor>a6b5d3f5529533b36bc8d72a31336831e</anchor>
      <arglist>(typename T, bounded_array, meta::is_bounded_array&lt; T &gt;::value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::concepts::tuple</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1tuple.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1concepts_1_1tuple.html</anchorfile>
      <anchor>a5efe0dca92fc489ea6c21f29910c536f</anchor>
      <arglist>(typename T, tuple, proxsuite::linalg::veg::tuple::meta::is_tuple&lt; T &gt;::value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::cpo</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1cpo.html</filename>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; Slice&lt; T &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; tuple::Tuple&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_constructible&lt; Vec&lt; T, A &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_relocatable</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; tuple::Tuple&lt; Ts... &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::cpo::is_trivially_relocatable&lt; Vec&lt; T, A &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::dynstack</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1dynstack.html</filename>
    <class kind="struct">proxsuite::linalg::veg::dynstack::DynStackAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::dynstack::DynStackArray</class>
    <class kind="struct">proxsuite::linalg::veg::dynstack::DynStackMut</class>
    <class kind="struct">proxsuite::linalg::veg::dynstack::StackReq</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::literals</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1literals.html</filename>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator&quot;&quot;_v</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1literals.html</anchorfile>
      <anchor>a2eed6d9494eae5a4b02296b6d4745c24</anchor>
      <arglist>(unsigned long long n) VEG_NOEXCEPT -&gt; Dyn</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE constexpr auto</type>
      <name>operator&quot;&quot;_c</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1literals.html</anchorfile>
      <anchor>aace788d5a99480afb21f8d3f61332a79</anchor>
      <arglist>() VEG_NOEXCEPT</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::mem</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</filename>
    <namespace>proxsuite::linalg::veg::mem::nb</namespace>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; BumpAlloc&lt; MaxAlign &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; MonotonicAlloc&lt; MaxAlign &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; proxsuite::linalg::dense::_detail::SimdAlignedSystemAlloc &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; StackAlloc&lt; MaxAlign &gt; &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Alloc&lt; SystemAlloc &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::mem::AllocBlock</class>
    <class kind="struct">proxsuite::linalg::veg::mem::BumpAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Cloner</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Cloner&lt; DefaultCloner &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::mem::CopyAvailableFor</class>
    <class kind="struct">proxsuite::linalg::veg::mem::DefaultCloner</class>
    <class kind="struct">proxsuite::linalg::veg::mem::DtorAvailableFor</class>
    <class kind="struct">proxsuite::linalg::veg::mem::Layout</class>
    <class kind="struct">proxsuite::linalg::veg::mem::MonotonicAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::RelocFn</class>
    <class kind="struct">proxsuite::linalg::veg::mem::StackAlloc</class>
    <class kind="struct">proxsuite::linalg::veg::mem::SystemAlloc</class>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>byte</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>a0afd090596ec4be5e615062637f1eb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CopyAvailable</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>af70c8c9fe3409803cdf933f93271ce5f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html" anchor="af70c8c9fe3409803cdf933f93271ce5fa7fa3b767c460b54a2be4d49030b349c7">no</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html" anchor="af70c8c9fe3409803cdf933f93271ce5fac242c4b5c866c6f70c80f3d2bfc58505">yes_maythrow</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html" anchor="af70c8c9fe3409803cdf933f93271ce5fa9dd2c36cd495560b6ebf63262f1cb05d">yes_nothrow</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DtorAvailable</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>af1a489f3ac6116d0e943d3b56a62ae08</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html" anchor="af1a489f3ac6116d0e943d3b56a62ae08a7fa3b767c460b54a2be4d49030b349c7">no</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html" anchor="af1a489f3ac6116d0e943d3b56a62ae08ac242c4b5c866c6f70c80f3d2bfc58505">yes_maythrow</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html" anchor="af1a489f3ac6116d0e943d3b56a62ae08a9dd2c36cd495560b6ebf63262f1cb05d">yes_nothrow</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>a3b4f7b11222d8500a6bfefd906f3fcf2</anchor>
      <arglist>(addressof)</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE auto</type>
      <name>aligned_alloc</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>a9b8256c8a4a61a189d7122c24086f0cd</anchor>
      <arglist>(usize align, usize size) noexcept -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>VEG_INLINE void</type>
      <name>aligned_free</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>a7a0b4d58ec681120256e30bd22bc4190</anchor>
      <arglist>(usize, void *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_INLINE_VAR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>aa4d6a7062c45a9666d9bcb5feb6a5e55</anchor>
      <arglist>(system_alloc, SystemAlloc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_INLINE_VAR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>a1377bf0d5708c8c3925b78e55109dd2e</anchor>
      <arglist>(default_cloner, DefaultCloner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>a7ace685a8adaed6bb8598b5f548732f9</anchor>
      <arglist>(align_next)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>abebcb6a1b2a156b6028360f254ee6e93</anchor>
      <arglist>(align_prev)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>ae9de3fd8364806f1953ca5c6bc23af21</anchor>
      <arglist>(launder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>aa38115c83e115bacb717f737dc79031e</anchor>
      <arglist>(construct_at)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>af66c0dbd2aa88d3c47b35e7fa9b1f403</anchor>
      <arglist>(construct_with)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>a50c29e47370276cedadeeb02f5f6e339</anchor>
      <arglist>(destroy_at)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID_TEMPLATE</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>a7fdc03f8337f9906777a541465ad7805</anchor>
      <arglist>(typename To, bit_cast, To)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>memmove</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1mem.html</anchorfile>
      <anchor>aae872f8ff5772ee91305e119d3510dfe</anchor>
      <arglist>(void *dest, void const *src, usize nbytes) noexcept -&gt; void *</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::mem::nb</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1mem_1_1nb.html</filename>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::addressof</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::align_next</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::align_prev</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::bit_cast</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::construct_at</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::construct_with</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::destroy_at</class>
    <class kind="struct">proxsuite::linalg::veg::mem::nb::launder</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::meta</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</filename>
    <namespace>proxsuite::linalg::veg::meta::nb</namespace>
    <class kind="struct">proxsuite::linalg::veg::meta::and_test</class>
    <class kind="struct">proxsuite::linalg::veg::meta::and_test&lt; index_sequence&lt; Is... &gt;, indexed&lt; Is, true_type &gt;... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::apply_wrapper</class>
    <class kind="struct">proxsuite::linalg::veg::meta::array_extent</class>
    <class kind="struct">proxsuite::linalg::veg::meta::array_extent&lt; T[N]&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::conjunction</class>
    <class kind="struct">proxsuite::linalg::veg::meta::conjunction&lt; First, Preds... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::conjunction&lt;&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::constant</class>
    <class kind="struct">proxsuite::linalg::veg::meta::disjunction</class>
    <class kind="struct">proxsuite::linalg::veg::meta::disjunction&lt; First, Preds... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::disjunction&lt;&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::is_bounded_array</class>
    <class kind="struct">proxsuite::linalg::veg::meta::is_bounded_array&lt; T[N]&gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::meta_apply</class>
    <class kind="struct">proxsuite::linalg::veg::meta::or_test</class>
    <class kind="struct">proxsuite::linalg::veg::meta::or_test&lt; index_sequence&lt; Is... &gt;, indexed&lt; Is, false_type &gt;... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::meta::pack_size</class>
    <class kind="struct">proxsuite::linalg::veg::meta::static_const</class>
    <class kind="struct">proxsuite::linalg::veg::meta::type_identity</class>
    <member kind="typedef">
      <type>_detail::_meta::make_integer_sequence&lt; T, N &gt; *</type>
      <name>make_integer_sequence</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a62158bd41efda5228d45a202bfadcb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_detail::_meta::make_integer_sequence&lt; usize, N &gt; *</type>
      <name>make_index_sequence</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>aa40ca0b314d6a068f5127fb765820866</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_detail::_meta::integer_sequence&lt; T, Nums... &gt; *</type>
      <name>integer_sequence</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a38097f11a6bba7164818c24c0175ce3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integer_sequence&lt; usize, Nums... &gt;</type>
      <name>index_sequence</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>affa6f431c674ed9c85ab00fc62ed2074</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_detail::_meta::type_sequence&lt; Ts... &gt; *</type>
      <name>type_sequence</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a294fa89988d5c3542579c3833fd805a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>indexed</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a5f69e07278d11bc495adc5f570947481</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_meta::concat_type_seq&lt; bool_constant&lt; VEG_ALL_OF(_detail::_meta::specializes&lt; F, Seqs &gt;::value)&gt;, F, Seqs... &gt;::type</type>
      <name>type_sequence_cat</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>ac794631e0513baba8809fb47475912af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_meta::zip_type_seq&lt; meta::bool_constant&lt; VEG_ALL_OF(_detail::_meta::specializes&lt; F, Seqs &gt;::value) &amp;&amp; VEG_CONCEPT( all_same&lt; constant&lt; usize, _detail::_meta::specialize_len&lt; F, Seqs &gt;::value &gt;... &gt;)&gt;, F, Seqs... &gt;::type</type>
      <name>type_sequence_zip</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>aca4ef41c556b77026ca0a4d00dfe9e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_meta::apply_type_seq&lt; F, Seq &gt;::type</type>
      <name>type_sequence_apply</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a2e0ce20c0db8bcf32639ed7d3db14eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a55b7f0870410ab00eea5351a3655dc32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_detail::_meta::discard_1st&lt; typename _detail::_meta::enable_if&lt; B, void &gt;::type, T &gt;</type>
      <name>enable_if_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a3dcc8758bb5269ab32f32469008be9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_meta::uncvlref&lt; T &amp; &gt;::type</type>
      <name>uncvref_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a1b2f60ba178c1d447b46635667d026e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constant&lt; bool, B &gt;</type>
      <name>bool_constant</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>aa14fe494c9c7bfe2db0cdd0f9c353d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool_constant&lt; true &gt;</type>
      <name>true_type</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>ab7ebb87abb55fee668d70d50b49c0602</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool_constant&lt; false &gt;</type>
      <name>false_type</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>aaba161042f8c991f8f6d7c9e05be6ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename type_identity&lt; T &gt;::type</type>
      <name>type_identity_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a84d573c4322be992df23729e0e068dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_meta::conditional_&lt; B &gt;::template type&lt; T, F &gt;</type>
      <name>if_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a98c09e2be212a4a7ae720d3153743e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_meta::unref&lt; T &amp; &gt;::type</type>
      <name>unref_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a926be87ff0a3b14b118b77a2fd08e554</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_meta::is_pointer&lt; T &gt;::type</type>
      <name>unptr_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a5978f081a9beb9defa693dc73b31750c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename meta::if_t&lt; VEG_CONCEPT(detected&lt; Op, Args... &gt;), meta::meta_apply&lt; Op, Args... &gt;, meta::type_identity&lt; Default &gt; &gt;::type</type>
      <name>detected_or_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a4c722a3f8f75c5d06d0ccdf65c179801</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detected_or_t&lt; _detail::_meta::none, Op, Args... &gt;</type>
      <name>detected_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a367e270fa48eda19269b9e221e82c6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detected_or_t&lt; _detail::_meta::none, Op, Args... &gt;</type>
      <name>detected_return_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a19a914daf957cccb634d4fd3a19cc1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename _detail::_meta::decay_helper&lt; uncvref_t&lt; T &gt; &gt;::type</type>
      <name>decay_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a9bf60a05e62f0cd45ecdfc3b52db4e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>meta::detected_t&lt; _detail::_meta::call_expr, Fn &amp;&amp;, Args &amp;&amp;... &gt;</type>
      <name>invoke_result_t</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a5bad0b10fdd2a61141f7fe94c133f9e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>ae1ae57dbadac72cdf31d215512068a3b</anchor>
      <arglist>(is_consteval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a08180b70521e45e9de0f69c5f82fc10c</anchor>
      <arglist>(unreachable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>a1f4dfb77595cf9952eb4286e3b5da205</anchor>
      <arglist>(unreachable_if)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>static_const&lt; T &gt;::value</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>af06fc239dc11fc47fe5614e1db9965cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>constant&lt; T, Value &gt;::value</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1meta.html</anchorfile>
      <anchor>aa6f17a928b0156efa620539cde76436a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::meta::nb</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1meta_1_1nb.html</filename>
    <class kind="struct">proxsuite::linalg::veg::meta::nb::is_consteval</class>
    <class kind="struct">proxsuite::linalg::veg::meta::nb::unreachable</class>
    <class kind="struct">proxsuite::linalg::veg::meta::nb::unreachable_if</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::nb</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1nb.html</filename>
    <class kind="struct">proxsuite::linalg::veg::nb::clone</class>
    <class kind="struct">proxsuite::linalg::veg::nb::deref</class>
    <class kind="struct">proxsuite::linalg::veg::nb::deref_mut</class>
    <class kind="struct">proxsuite::linalg::veg::nb::get</class>
    <class kind="struct">proxsuite::linalg::veg::nb::init_list</class>
    <class kind="struct">proxsuite::linalg::veg::nb::mut</class>
    <class kind="struct">proxsuite::linalg::veg::nb::narrow</class>
    <class kind="struct">proxsuite::linalg::veg::nb::ref</class>
    <class kind="struct">proxsuite::linalg::veg::nb::unused</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::tags</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</filename>
    <class kind="struct">proxsuite::linalg::veg::tags::InPlace</class>
    <class kind="struct">proxsuite::linalg::veg::tags::InPlace&lt; void &gt;</class>
    <member kind="typedef">
      <type>tuple::nb::tuplify</type>
      <name>Tuplify</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>ac4998e081190bfae03fab3cb26b6cd14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>ae0aef2126d390b1dc24fd63158da892d</anchor>
      <arglist>(from_raw_parts, FromRawParts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>ac7572e4ada23ff20a4532503f3e6c9af</anchor>
      <arglist>(safe, Safe)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>a1f0aae5035cb83cbe401aa54cf518d2b</anchor>
      <arglist>(unsafe, Unsafe)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG_TEMPLATE</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>afd04b23d6ddcac457828dbe0d9b02f8e</anchor>
      <arglist>(typename T, tag, Tag, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>a58723b9f8703ce0c3b890dc846ce4918</anchor>
      <arglist>(as_ref, AsRef)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>ad4a0f5be30fd8286fe9c587a7ac522e3</anchor>
      <arglist>(as_mut, AsMut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>a383fdf3596b66d156f3520e5d112e602</anchor>
      <arglist>(from, From)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>aa2596d06d5ade62fd83236dca81b25b3</anchor>
      <arglist>(from_i, FromI)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>a495c0dfc6aa4a53e3469b8419d290194</anchor>
      <arglist>(as_ref_once, AsRefOnce)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>a92e007ddd5313a6030547a4cf196c984</anchor>
      <arglist>(from_alloc, FromAlloc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>aeb71e59e89f1d3d86219056576f8246a</anchor>
      <arglist>(from_alloc_and_value, FromAllocAndValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>ac42b4a3d7049474998866b053718e5c2</anchor>
      <arglist>(from_slice, FromSlice)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>adb1789a811e6a70204608ce851c2c3ce</anchor>
      <arglist>(from_slice_mut, FromSliceMut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_INLINE_VAR</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tags.html</anchorfile>
      <anchor>a9a37b147e4b92eb085fc93765b049024</anchor>
      <arglist>(inplace, InPlace&lt; void &gt;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::tuple</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</filename>
    <namespace>proxsuite::linalg::veg::tuple::meta</namespace>
    <namespace>proxsuite::linalg::veg::tuple::nb</namespace>
    <class kind="struct">proxsuite::linalg::veg::tuple::IndexedTuple</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::IndexedTuple&lt; meta::index_sequence&lt; Is... &gt;, Ts... &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::Tuple</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::TupleLeaf</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::TupleLeafImpl</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::TupleLeafImpl&lt; T, false &gt;</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::TupleLeafImpl&lt; T, true &gt;</class>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a80218e668f694e28ccf39256fb8e2d02</anchor>
      <arglist>(tuplify)</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a9f624410912accd0a3759db1da53dbd6</anchor>
      <arglist>(tuple::IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ts... &gt; const &amp;tup) VEG_NOEXCEPT -&gt; ith&lt; I, Ts... &gt; const &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>aed8d0f853363b761066d6e17d8470802</anchor>
      <arglist>(tuple::IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ts... &gt; &amp;tup) VEG_NOEXCEPT -&gt; ith&lt; I, Ts... &gt; &amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>ac36197a5a46706d73db7c8dc31748776</anchor>
      <arglist>(tuple::IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ts... &gt; const &amp;&amp;tup) VEG_NOEXCEPT -&gt; ith&lt; I, Ts... &gt; const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>VEG_NODISCARD VEG_INLINE constexpr auto</type>
      <name>get</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a327f7bba79a2ee77c890cc22cb002289</anchor>
      <arglist>(tuple::IndexedTuple&lt; proxsuite::linalg::veg::meta::index_sequence&lt; Is... &gt;, Ts... &gt; &amp;&amp;tup) VEG_NOEXCEPT -&gt; ith&lt; I, Ts... &gt; &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a6be6d68b35c9fab63b39b07dc5a96953</anchor>
      <arglist>(with)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a160214457522f13b6037fc0b557cd949</anchor>
      <arglist>(zip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a2a9e9a928f474a8b2aa111ae589a6b64</anchor>
      <arglist>(cat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a4100c9f19b0ee1ca4d17f65b61986900</anchor>
      <arglist>(unpack)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a2cab64459720436d0deef87d3d52e859</anchor>
      <arglist>(for_each)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a1cd1e032abcf2e22d562794263b9d6da</anchor>
      <arglist>(for_each_i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>aba9cf90f7ed95d368ab902c27f927d1c</anchor>
      <arglist>(map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>a61227bee0f1907e861d59c9a2cd976f3</anchor>
      <arglist>(map_i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple.html</anchorfile>
      <anchor>adc89098f999c090a556cd2f968beafa3</anchor>
      <arglist>(deref_assign)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::tuple::meta</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple_1_1meta.html</filename>
    <member kind="typedef">
      <type>decltype(_detail::meta_::is_tuple_helper::test(static_cast&lt; T * &gt;(nullptr)))</type>
      <name>TupleBaseInfo</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple_1_1meta.html</anchorfile>
      <anchor>a6efc6737d5e926a760a9b79aace1f7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::bool_constant&lt; TupleBaseInfo&lt; T &gt;::is_tuple &gt;</type>
      <name>is_tuple</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple_1_1meta.html</anchorfile>
      <anchor>ae8a13d70065a2a2985de4cc1ff62496d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::constant&lt; usize, TupleBaseInfo&lt; T &gt;::size &gt;</type>
      <name>tuple_size</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple_1_1meta.html</anchorfile>
      <anchor>a1a052c3120ddb5f9491cfa3692a6f58c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TupleBaseInfo&lt; T &gt;::template ith&lt; I &gt;</type>
      <name>tuple_element</name>
      <anchorfile>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple_1_1meta.html</anchorfile>
      <anchor>aabc1f83c93c373f37b73a7df621c24f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::tuple::nb</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1tuple_1_1nb.html</filename>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::cat</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::deref_assign</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::for_each</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::for_each_i</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::map</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::map_i</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::tuplify</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::unpack</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::with</class>
    <class kind="struct">proxsuite::linalg::veg::tuple::nb::zip</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::linalg::veg::vector</name>
    <filename>namespaceproxsuite_1_1linalg_1_1veg_1_1vector.html</filename>
    <class kind="struct">proxsuite::linalg::veg::vector::RawVector</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp</name>
    <filename>namespaceproxsuite_1_1proxqp.html</filename>
    <namespace>proxsuite::proxqp::concepts</namespace>
    <namespace>proxsuite::proxqp::dense</namespace>
    <namespace>proxsuite::proxqp::detail</namespace>
    <namespace>proxsuite::proxqp::eigen</namespace>
    <namespace>proxsuite::proxqp::sparse</namespace>
    <namespace>proxsuite::proxqp::tags</namespace>
    <namespace>proxsuite::proxqp::utils</namespace>
    <class kind="struct">proxsuite::proxqp::CPUTimes</class>
    <class kind="struct">proxsuite::proxqp::Info</class>
    <class kind="struct">proxsuite::proxqp::LdltView</class>
    <class kind="struct">proxsuite::proxqp::LdltViewMut</class>
    <class kind="struct">proxsuite::proxqp::MatrixView</class>
    <class kind="struct">proxsuite::proxqp::MatrixViewMut</class>
    <class kind="struct">proxsuite::proxqp::Results</class>
    <class kind="struct">proxsuite::proxqp::Settings</class>
    <class kind="struct">proxsuite::proxqp::StridedVectorView</class>
    <class kind="struct">proxsuite::proxqp::StridedVectorViewMut</class>
    <class kind="struct">proxsuite::proxqp::Timer</class>
    <class kind="struct">proxsuite::proxqp::VectorView</class>
    <class kind="struct">proxsuite::proxqp::VectorViewMut</class>
    <member kind="typedef">
      <type>decltype(sizeof(0))</type>
      <name>usize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a53463d21e0d053ef58f614a8ad0976d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>f32</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a8f892aa236c53245bf03af7397d2a44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>f64</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a8cd42e7e606b9cff85735e1d54933456</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::unlref&lt; T &amp; &gt;::Type</type>
      <name>unref</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>acebfec2b385313136bffea79600baf6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>i32</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>aeb213edf712377cb573b1ff372bcee20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int64_t</type>
      <name>i64</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a37918b296afbf07fd39cfb6381e2de4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_detail::_meta::make_signed&lt; usize &gt;::Type</type>
      <name>isize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>af13f536f55f7e3a7af1d0e6cf9ac3c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>u32</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>aee32ae81452cbe40dc6aeb76103314fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>u64</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>aeb8f03d5ae98ce38dff0169b7a8da956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(sizeof(0))</type>
      <name>usize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a1d967c038db74b6696a5a46e4576a085</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Symmetry</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a5fdd4d1d2e9a3b1632a028c7c23fb059</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a5fdd4d1d2e9a3b1632a028c7c23fb059a958153f1b8b96ec4c4eb2147429105d9">general</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a5fdd4d1d2e9a3b1632a028c7c23fb059a81e073b428b50247daba38531dcf412a">lower</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a5fdd4d1d2e9a3b1632a028c7c23fb059a0122b4c2c01ee1c698ecc309d2b8eb5a">upper</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Layout</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a95f1475e7d77f87895bccc2b3a790a90</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a95f1475e7d77f87895bccc2b3a790a90a792226b1a2c2e2df788701a896fc243c">colmajor</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a95f1475e7d77f87895bccc2b3a790a90a531f659b28e004031909860372c4f322">rowmajor</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SparseBackend</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>acab609dfd23d8843cdcfda5004246a1f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="acab609dfd23d8843cdcfda5004246a1fa086247a9b57fde6eefee2a0c4752242d">Automatic</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="acab609dfd23d8843cdcfda5004246a1fa84a54df9bcae79cadd31cac885d6ab7f">SparseCholesky</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="acab609dfd23d8843cdcfda5004246a1faf2674a258348188d6a3ee81d2669255a">MatrixFree</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DenseBackend</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a291802fc385dc44b8275a7ec91839d4d</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a291802fc385dc44b8275a7ec91839d4da086247a9b57fde6eefee2a0c4752242d">Automatic</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a291802fc385dc44b8275a7ec91839d4dab4f7bded840147d550a4d42bbe2d1d89">PrimalDualLDLT</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a291802fc385dc44b8275a7ec91839d4daa09d6cde8b8a15c43a4b4a5447840641">PrimalLDLT</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MeritFunctionType</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a4367b6d2473745a8f466ec8b57f6363d</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a4367b6d2473745a8f466ec8b57f6363da232489276f6b94e51a8299a12c400539">GPDAL</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a4367b6d2473745a8f466ec8b57f6363dabc555b66f928868587ca811e9f119770">PDAL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>HessianType</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a0b5db7c8d43571b6e8ddaeac316769af</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a0b5db7c8d43571b6e8ddaeac316769afad7ed4ee1df437474d005188535f74875">Zero</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a0b5db7c8d43571b6e8ddaeac316769afa9a71a13863c84ba34fc41595fc2ee0c6">Dense</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a0b5db7c8d43571b6e8ddaeac316769afa9ac677ee4eec25d9e59707a661d2c5e1">Diagonal</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EigenValueEstimateMethodOption</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a9a93feb350ddabd2909f0caec77b9e87</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a9a93feb350ddabd2909f0caec77b9e87ab7544e6733f34623b54866c88ac4b51b">PowerIteration</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a9a93feb350ddabd2909f0caec77b9e87a16584f845cb8e77c86e0e2390c932e5e">ExactMethod</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>QPSolverOutput</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>ae3b64c0293312c54fdfa991580ed70fd</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="ae3b64c0293312c54fdfa991580ed70fda7f65db49f362aac2e6fc599e7d79bc4b">PROXQP_SOLVED</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="ae3b64c0293312c54fdfa991580ed70fda650f851b65e064200e78619d9c0e6649">PROXQP_MAX_ITER_REACHED</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="ae3b64c0293312c54fdfa991580ed70fda66e00e0c26e39203330a20482a6e0bb8">PROXQP_PRIMAL_INFEASIBLE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="ae3b64c0293312c54fdfa991580ed70fda61374950fdc1df5f8230b7bc86f52b4c">PROXQP_SOLVED_CLOSEST_PRIMAL_FEASIBLE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="ae3b64c0293312c54fdfa991580ed70fda0b2b43352fa11bbd96bef01d07c3cbed">PROXQP_DUAL_INFEASIBLE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="ae3b64c0293312c54fdfa991580ed70fda911da665938abf5871d00e431bac179f">PROXQP_NOT_RUN</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InitialGuessStatus</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a415d3d2e727acf7261e7b3708abc1db3</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a415d3d2e727acf7261e7b3708abc1db3ab6b315d420f973b7c309d91b1dca4564">NO_INITIAL_GUESS</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a415d3d2e727acf7261e7b3708abc1db3a7c1916eead021556161e1f37e259239f">EQUALITY_CONSTRAINED_INITIAL_GUESS</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a415d3d2e727acf7261e7b3708abc1db3abdb27b408f4de0799ee8b974c43b32fa">WARM_START_WITH_PREVIOUS_RESULT</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a415d3d2e727acf7261e7b3708abc1db3abb458dc8ff433dbfea429407db677e5b">WARM_START</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="a415d3d2e727acf7261e7b3708abc1db3a4ec1f0b55193af85d7204a616c63ba4f">COLD_START_WITH_PREVIOUS_RESULT</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PreconditionerStatus</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>ae3aacefdb4b7177de8c2005bab169f08</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="ae3aacefdb4b7177de8c2005bab169f08a5d76688e2261e6805ee36ad961b3fa7a">EXECUTE</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="ae3aacefdb4b7177de8c2005bab169f08a60cba2874369bd3790e14ea5f8a7bc58">KEEP</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp.html" anchor="ae3aacefdb4b7177de8c2005bab169f08ad8156d3c6735d75d8a1b8dedd0e79c8b">IDENTITY</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>flip_layout</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a156b469b81b7afc70c5298f45c42ae74</anchor>
      <arglist>(Layout l) noexcept -&gt; Layout</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_eigen_layout</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>ab7db907d540087f2a2a273a0bcf1293c</anchor>
      <arglist>(Layout l) -&gt; int</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>from_eigen_layout</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a3df3ebdeafb369b68cf696acbf3fcce3</anchor>
      <arglist>(int l) -&gt; Layout</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a6f1e6eaa283cc4744a19e89f8fc3ff6a</anchor>
      <arglist>(const Info&lt; T &gt; &amp;info1, const Info&lt; T &gt; &amp;info2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a48b1f2d26c64b704a735546b5ecb2223</anchor>
      <arglist>(const Info&lt; T &gt; &amp;info1, const Info&lt; T &gt; &amp;info2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>aef5f1a2dc1c5e496ec723761acce93d7</anchor>
      <arglist>(const Results&lt; T &gt; &amp;results1, const Results&lt; T &gt; &amp;results2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>ab0f740bd1b6255bced827ff8a882b63a</anchor>
      <arglist>(const Results&lt; T &gt; &amp;results1, const Results&lt; T &gt; &amp;results2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a1df5f823a7615dfa6621ebc32a637502</anchor>
      <arglist>(std::ostream &amp;os, const SparseBackend &amp;sparse_backend)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>aab50b7b893891c8e0d7e6071c7c7c43f</anchor>
      <arglist>(std::ostream &amp;os, const DenseBackend &amp;dense_backend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a8d98a3e26cc65fc6f0847dd7b91f4672</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;settings1, const Settings&lt; T &gt; &amp;settings2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a22d2703815960b8774870ac2cad50bb3</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;settings1, const Settings&lt; T &gt; &amp;settings2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_line</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a6110ed9a1376cba698a791a111dcc5f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_header</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a759ab0dc0dadd15636f4b00436d684a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_preambule</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>af2a2c9e8126d293aed43788b41e8a7ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>constexpr Layout</type>
      <name>colmajor</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>a8b936834b32353b06a817efbef5c0ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Layout</type>
      <name>rowmajor</name>
      <anchorfile>namespaceproxsuite_1_1proxqp.html</anchorfile>
      <anchor>afd5d3db08e968f994e9834d1b3ba9e24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::concepts</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1concepts.html</filename>
    <namespace>proxsuite::proxqp::concepts::aux</namespace>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts.html</anchorfile>
      <anchor>a0df9146b780ed66a141627b606f57652</anchor>
      <arglist>(typename T, rvalue_ref, std::is_rvalue_reference&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts.html</anchorfile>
      <anchor>a20048dad536b8100acc8d5601936ceea</anchor>
      <arglist>(typename T, lvalue_ref, std::is_lvalue_reference&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts.html</anchorfile>
      <anchor>a143a57b86e23d08b9eea8d9e47ede498</anchor>
      <arglist>((template&lt; typename... &gt; class F, typename... Ts), detected, detail::DetectedImpl&lt; void, void, F, Ts... &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts.html</anchorfile>
      <anchor>a0c6ae9fc504e5bbf29bdb18c2cd2e8d7</anchor>
      <arglist>((typename Mat, typename T), eigen_view,(LDLT_CONCEPT(aux::matrix_base&lt; unref&lt; Mat &gt; &gt;) &amp;&amp;LDLT_CONCEPT(aux::has_data_expr&lt; Mat, T const &gt;)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts.html</anchorfile>
      <anchor>a2a21ed1f031f93e6ca72fb3df4cee041</anchor>
      <arglist>((typename Mat, typename T), eigen_view_mut,(LDLT_CONCEPT(aux::matrix_base&lt; unref&lt; Mat &gt; &gt;) &amp;&amp;LDLT_CONCEPT(aux::has_data_expr&lt; Mat, T &gt;) &amp;&amp;!LDLT_CONCEPT(aux::tmp_matrix&lt; Mat &gt;)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts.html</anchorfile>
      <anchor>a8198bc729a202e714cec5226eeef6085</anchor>
      <arglist>((typename Mat, typename T), eigen_strided_vector_view,(LDLT_CONCEPT(eigen_view&lt; Mat, T &gt;) &amp;&amp;(eigen::CompTimeCols&lt; unref&lt; Mat &gt; &gt;::value==1)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts.html</anchorfile>
      <anchor>a5bdd5c0a0e9bcff0be30627e97d2d244</anchor>
      <arglist>((typename Mat, typename T), eigen_strided_vector_view_mut,(LDLT_CONCEPT(eigen_view_mut&lt; Mat, T &gt;) &amp;&amp;(eigen::CompTimeCols&lt; unref&lt; Mat &gt; &gt;::value==1)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts.html</anchorfile>
      <anchor>af1ecb60f9b1db727474823e0f57894ab</anchor>
      <arglist>((typename Mat, typename T), eigen_vector_view,(LDLT_CONCEPT(eigen_strided_vector_view&lt; Mat, T &gt;) &amp;&amp;(eigen::CompTimeInnerStride&lt; unref&lt; Mat &gt; &gt;::value==1)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts.html</anchorfile>
      <anchor>adf5e77406e94aa4f6201554841964098</anchor>
      <arglist>((typename Mat, typename T), eigen_vector_view_mut,(LDLT_CONCEPT(eigen_strided_vector_view_mut&lt; Mat, T &gt;) &amp;&amp;(eigen::CompTimeInnerStride&lt; unref&lt; Mat &gt; &gt;::value==1)))</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::concepts::aux</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1concepts_1_1aux.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts_1_1aux.html</anchorfile>
      <anchor>ab8a307b91a7c8898b902dbb7a5c8737a</anchor>
      <arglist>((typename Mat, typename T), has_data_expr, LDLT_CONCEPT(detected&lt; detail::DataExpr, Mat, T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts_1_1aux.html</anchorfile>
      <anchor>ad403bb174c63cda31c414474871ee233</anchor>
      <arglist>((typename Mat), matrix_base, decltype(detail::is_eigen_matrix_base_impl(static_cast&lt; Mat * &gt;(nullptr)))::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts_1_1aux.html</anchorfile>
      <anchor>a9376493705671641474f3d36d27d882d</anchor>
      <arglist>((typename Mat), is_plain_object_base, decltype(detail::is_eigen_owning_matrix_base_impl(static_cast&lt; Mat * &gt;(nullptr)))::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_DEF_CONCEPT</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1concepts_1_1aux.html</anchorfile>
      <anchor>a02146b4bae9c918d3c007bb289950b10</anchor>
      <arglist>((typename Mat), tmp_matrix,(LDLT_CONCEPT(aux::is_plain_object_base&lt; unref&lt; Mat &gt; &gt;) &amp;&amp;!LDLT_CONCEPT(lvalue_ref&lt; Mat &gt;)))</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::dense</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1dense.html</filename>
    <namespace>proxsuite::proxqp::dense::detail</namespace>
    <namespace>proxsuite::proxqp::dense::linesearch</namespace>
    <namespace>proxsuite::proxqp::dense::nb</namespace>
    <namespace>proxsuite::proxqp::dense::preconditioner</namespace>
    <class kind="struct">proxsuite::proxqp::dense::BackwardData</class>
    <class kind="struct">proxsuite::proxqp::dense::BatchQP</class>
    <class kind="struct">proxsuite::proxqp::dense::EigenAllowAlloc</class>
    <class kind="struct">proxsuite::proxqp::dense::Model</class>
    <class kind="struct">proxsuite::proxqp::dense::QP</class>
    <class kind="struct">proxsuite::proxqp::dense::QpView</class>
    <class kind="struct">proxsuite::proxqp::dense::QpViewBox</class>
    <class kind="struct">proxsuite::proxqp::dense::QpViewBoxMut</class>
    <class kind="struct">proxsuite::proxqp::dense::QpViewMut</class>
    <class kind="struct">proxsuite::proxqp::dense::Workspace</class>
    <member kind="typedef">
      <type>Eigen::SparseMatrix&lt; T, 1 &gt;</type>
      <name>SparseMat</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a03410cb60a97291cdae498dd19acb26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, DYN, 1 &gt;</type>
      <name>Vec</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>accf7cf9dc4fa03c0260aebf96f193875</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Vec&lt; T &gt; const  &gt;</type>
      <name>VecRef</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ae8bc5590de3f29817b2f6f06d433e87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Vec&lt; T &gt; &gt;</type>
      <name>VecRefMut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a603784a04e9f9885d88b898fe88e843a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, DYN, DYN, l &gt;</type>
      <name>Mat</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>af13d7b939fcad4c391b28d2972e0d919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Mat&lt; T, l &gt; const  &gt;</type>
      <name>MatRef</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a4d837403fcf96329823e0c04836572c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Vec&lt; T &gt; const  &gt;</type>
      <name>VecMap</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a54eb9627dbdf18b819d17eeeb05aa19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Vec&lt; T &gt; &gt;</type>
      <name>VecMapMut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ac5d01fb563a4bd4b5a9d7d79648d41a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Mat&lt; T, l &gt; const  &gt;</type>
      <name>MatMap</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>addeb531dd5db81ce9bdb6e7c8c780ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Mat&lt; T, l &gt; &gt;</type>
      <name>MatMapMut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a97ba65e77f50e351fe2c0b3cb0155215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; isize, DYN, 1 &gt; const  &gt;</type>
      <name>VecMapISize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>aae71131dbb3f0a18e6df70f60ba01252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; isize, DYN, 1 &gt;</type>
      <name>VecISize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a4d73b9d414c8a1b006c70d9a2300a3e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; bool, DYN, 1 &gt; const  &gt;</type>
      <name>VecMapBool</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a271c52c2935810e15bbb3374e7071416</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; bool, DYN, 1 &gt;</type>
      <name>VecBool</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>acb264a0c71cc2ae30c0d6d62087aa4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_detail::_meta::make_signed&lt; usize &gt;::Type</type>
      <name>isize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>af13f536f55f7e3a7af1d0e6cf9ac3c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>layout</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ac0058321c86fd6d512867f88ed116fceac590cf494c279ae02c5a0843c0eecae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_backward</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>aa3d257d71f76cede22fe3d1914381d6f</anchor>
      <arglist>(dense::QP&lt; T &gt; &amp;solved_qp, VecRef&lt; T &gt; loss_derivative, T eps=1.E-4, T rho_new=1.E-6, T mu_new=1.E-6)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_backward_loss_ESG</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a894042e3a4def0b9aae08ef624a3b3b6</anchor>
      <arglist>(dense::QP&lt; T &gt; &amp;solved_qp, VecRef&lt; T &gt; loss_derivative)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>power_iteration</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ad5c28ec9d976b39fd3d6d7fcf9909bf6</anchor>
      <arglist>(const Eigen::MatrixBase&lt; MatIn &gt; &amp;H, const Eigen::MatrixBase&lt; VecIn1 &gt; &amp;dw, const Eigen::MatrixBase&lt; VecIn2 &gt; &amp;rhs, const Eigen::MatrixBase&lt; VecIn3 &gt; &amp;err_v, T power_iteration_accuracy, isize nb_power_iteration)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min_eigen_value_via_modified_power_iteration</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ad9faf1cfb88e97e5dae5698ddaa0d622</anchor>
      <arglist>(const Eigen::MatrixBase&lt; MatIn &gt; &amp;H, const Eigen::MatrixBase&lt; VecIn1 &gt; &amp;dw, const Eigen::MatrixBase&lt; VecIn2 &gt; &amp;rhs, const Eigen::MatrixBase&lt; VecIn3 &gt; &amp;err_v, T max_eigen_value, T power_iteration_accuracy, isize nb_power_iteration)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>estimate_minimal_eigen_value_of_symmetric_matrix</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a563e4c08493269225b551dce31f0d08d</anchor>
      <arglist>(const Eigen::MatrixBase&lt; MatIn &gt; &amp;H, EigenValueEstimateMethodOption estimate_method_option, T power_iteration_accuracy, isize nb_power_iteration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_default_rho_with_minimal_Hessian_eigen_value</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ac92ed10f043fb2b185cd6227346ff296</anchor>
      <arglist>(optional&lt; T &gt; manual_minimal_H_eigenvalue, Results&lt; T &gt; &amp;results, Settings&lt; T &gt; &amp;settings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_equality_constrained_initial_guess</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>adf3a062d72893c2cf51b500e69ab9a38</anchor>
      <arglist>(Workspace&lt; T &gt; &amp;qpwork, const Settings&lt; T &gt; &amp;qpsettings, const Model&lt; T &gt; &amp;qpmodel, const isize n_constraints, const DenseBackend &amp;dense_backend, const HessianType &amp;hessian_type, Results&lt; T &gt; &amp;qpresults)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_factorization</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a03fbf14661ed141b573975f9aa74cace</anchor>
      <arglist>(Workspace&lt; T &gt; &amp;qpwork, const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, const DenseBackend &amp;dense_backend, const HessianType &amp;hessian_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_equilibration</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a358d5e0ad95c84a1156f420c77fb1b99</anchor>
      <arglist>(Workspace&lt; T &gt; &amp;qpwork, const Settings&lt; T &gt; &amp;qpsettings, const bool box_constraints, const HessianType hessian_type, preconditioner::RuizEquilibration&lt; T &gt; &amp;ruiz, bool execute_preconditioner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initial_guess</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a13d57a50fa06a913d1ffd3c0213465c6</anchor>
      <arglist>(Workspace&lt; T &gt; &amp;qpwork, Settings&lt; T &gt; &amp;qpsettings, Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>addb1fc5d57d12c82a6379e91d82d34e4</anchor>
      <arglist>(optional&lt; MatRef&lt; T &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; MatRef&lt; T &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; MatRef&lt; T &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, optional&lt; VecRef&lt; T &gt; &gt; l_box, optional&lt; VecRef&lt; T &gt; &gt; u_box, Model&lt; T &gt; &amp;model, Workspace&lt; T &gt; &amp;work, const bool box_constraints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ad266a19acad69c62b371e638554728e6</anchor>
      <arglist>(optional&lt; MatRef&lt; T &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; MatRef&lt; T &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; MatRef&lt; T &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, optional&lt; VecRef&lt; T &gt; &gt; l_box, optional&lt; VecRef&lt; T &gt; &gt; u_box, Settings&lt; T &gt; &amp;qpsettings, Model&lt; T &gt; &amp;qpmodel, Workspace&lt; T &gt; &amp;qpwork, Results&lt; T &gt; &amp;qpresults, const bool box_constraints, preconditioner::RuizEquilibration&lt; T &gt; &amp;ruiz, PreconditionerStatus preconditioner_status, const HessianType hessian_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_proximal_parameters</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>abdf36ab6383e41d5a3a26290f4079470</anchor>
      <arglist>(Settings&lt; T &gt; &amp;settings, Results&lt; T &gt; &amp;results, Workspace&lt; T &gt; &amp;work, optional&lt; T &gt; rho_new, optional&lt; T &gt; mu_eq_new, optional&lt; T &gt; mu_in_new)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warm_start</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a0e61ff8678ab095c388aeba57888b0a1</anchor>
      <arglist>(optional&lt; VecRef&lt; T &gt; &gt; x_wm, optional&lt; VecRef&lt; T &gt; &gt; y_wm, optional&lt; VecRef&lt; T &gt; &gt; z_wm, Results&lt; T &gt; &amp;results, Settings&lt; T &gt; &amp;settings, Model&lt; T &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a759156df1b12305405335ecb35156f94</anchor>
      <arglist>(const Model&lt; T &gt; &amp;model1, const Model&lt; T &gt; &amp;model2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>af3fee2a85aef7a9e2f0d73b8b9cd3687</anchor>
      <arglist>(const Model&lt; T &gt; &amp;model1, const Model&lt; T &gt; &amp;model2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refactorize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ae95bc2d90c12d9501ddac4e7442cafaf</anchor>
      <arglist>(const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const isize n_constraints, const DenseBackend &amp;dense_backend, T rho_new)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mu_update</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a6b967ce11df8d3cb7b259444f05c5600</anchor>
      <arglist>(const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, isize n_constraints, const DenseBackend &amp;dense_backend, T mu_eq_new, T mu_in_new)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterative_residual</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ab6855cf4a683aeaa36584e706a85a204</anchor>
      <arglist>(const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const isize n_constraints, isize inner_pb_dim, const HessianType &amp;hessian_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_linear_system</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a93d1478285b1a253adccd03357469b2e</anchor>
      <arglist>(proxsuite::proxqp::dense::Vec&lt; T &gt; &amp;dw, const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const isize n_constraints, const DenseBackend &amp;dense_backend, isize inner_pb_dim, proxsuite::linalg::veg::dynstack::DynStackMut &amp;stack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterative_solve_with_permut_fact</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a22e89925f2d44dc07ef6ea3dc2601a9c</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;qpsettings, const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const isize n_constraints, const DenseBackend &amp;dense_backend, const HessianType &amp;hessian_type, T eps, isize inner_pb_dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcl_update</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a7b40a56782b8dea37687ad388bf77d4a</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;qpsettings, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, T &amp;primal_feasibility_lhs_new, T &amp;bcl_eta_ext, T &amp;bcl_eta_in, T bcl_eta_ext_init, T eps_in_min, T &amp;new_bcl_mu_in, T &amp;new_bcl_mu_eq, T &amp;new_bcl_mu_in_inv, T &amp;new_bcl_mu_eq_inv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Martinez_update</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a744399b1a4ce958b666cec441c7cbd8b</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;qpsettings, Results&lt; T &gt; &amp;qpresults, T &amp;primal_feasibility_lhs_new, T &amp;primal_feasibility_lhs_old, T &amp;bcl_eta_in, T eps_in_min, T &amp;new_bcl_mu_in, T &amp;new_bcl_mu_eq, T &amp;new_bcl_mu_in_inv, T &amp;new_bcl_mu_eq_inv)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compute_inner_loop_saddle_point</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>aeec7101a03f189024808aa6b5743df1e</anchor>
      <arglist>(const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const Settings&lt; T &gt; &amp;qpsettings) -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>primal_dual_semi_smooth_newton_step</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a4ba4f0b5aeb8b9647b8ad9f365b2e742</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;qpsettings, const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const bool box_constraints, const isize n_constraints, const DenseBackend &amp;dense_backend, const HessianType &amp;hessian_type, T eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>primal_dual_newton_semi_smooth</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a10dfbf319402d91538f6a5c84d270bf0</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;qpsettings, const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const bool box_constraints, const isize n_constraints, preconditioner::RuizEquilibration&lt; T &gt; &amp;ruiz, const DenseBackend &amp;dense_backend, const HessianType &amp;hessian_type, T eps_int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qp_solve</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a9e6cd27b5a43442afc9faa30fe6e8a61</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;qpsettings, const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const bool box_constraints, const DenseBackend &amp;dense_backend, const HessianType &amp;hessian_type, preconditioner::RuizEquilibration&lt; T &gt; &amp;ruiz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_setup_header</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ae677c56b3a375c866b70c0ef75d19b1f</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;settings, const Results&lt; T &gt; &amp;results, const Model&lt; T &gt; &amp;model, const bool box_constraints, const DenseBackend &amp;dense_backend, const HessianType &amp;hessian_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_data</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>af0a58f4db1dc7eecef0979559b597876</anchor>
      <arglist>(const std::string &amp;filename, const ::Eigen::MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_primal_residual</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a92fa0aae43201a7a01069928b47d0918</anchor>
      <arglist>(const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, const Settings&lt; T &gt; &amp;qpsettings, Workspace&lt; T &gt; &amp;qpwork, const preconditioner::RuizEquilibration&lt; T &gt; &amp;ruiz, const bool box_constraints, T &amp;primal_feasibility_lhs, T &amp;primal_feasibility_eq_rhs_0, T &amp;primal_feasibility_in_rhs_0, T &amp;primal_feasibility_eq_lhs, T &amp;primal_feasibility_in_lhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>global_primal_residual_infeasibility</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a7584d2e37c376cda44e8dc77d10c94ed</anchor>
      <arglist>(VectorViewMut&lt; T &gt; ATdy, VectorViewMut&lt; T &gt; CTdz, VectorViewMut&lt; T &gt; dy, VectorViewMut&lt; T &gt; dz, Workspace&lt; T &gt; &amp;qpwork, const Model&lt; T &gt; &amp;qpmodel, const Settings&lt; T &gt; &amp;qpsettings, const bool box_constraints, const preconditioner::RuizEquilibration&lt; T &gt; &amp;ruiz)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>global_dual_residual_infeasibility</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a6a0fd7cef56232f7b998f0994f84c8c1</anchor>
      <arglist>(VectorViewMut&lt; T &gt; Adx, VectorViewMut&lt; T &gt; Cdx, VectorViewMut&lt; T &gt; Hdx, VectorViewMut&lt; T &gt; dx, Workspace&lt; T &gt; &amp;qpwork, const Settings&lt; T &gt; &amp;qpsettings, const Model&lt; T &gt; &amp;qpmodel, const bool box_constraints, const preconditioner::RuizEquilibration&lt; T &gt; &amp;ruiz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_dual_residual</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a57b754c32e01a451aa25f3e1328a2926</anchor>
      <arglist>(Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const Model&lt; T &gt; &amp;qpmodel, const bool box_constraints, const preconditioner::RuizEquilibration&lt; T &gt; &amp;ruiz, T &amp;dual_feasibility_lhs, T &amp;dual_feasibility_rhs_0, T &amp;dual_feasibility_rhs_1, T &amp;dual_feasibility_rhs_3, T &amp;rhs_duality_gap, T &amp;duality_gap, const HessianType &amp;hessian_type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a5798a62f385a594164ea028403e9a951</anchor>
      <arglist>(fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ab9e4215822b98b7116a94171fd7658d3</anchor>
      <arglist>(sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>abac125fdfd928439ba053632f11b7d97</anchor>
      <arglist>(pow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ae07dd375e6c5428f02a60b2c0a3453ce</anchor>
      <arglist>(infty_norm)</arglist>
    </member>
    <member kind="function">
      <type>DenseBackend</type>
      <name>dense_backend_choice</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a5c6347f9b619033b43bb8f22a616aa00</anchor>
      <arglist>(DenseBackend _dense_backend, isize dim, isize n_eq, isize n_in, bool box_constraints)</arglist>
    </member>
    <member kind="function">
      <type>proxqp::Results&lt; T &gt;</type>
      <name>solve</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a871a143ee2375751f1b17eabb1ef7df5</anchor>
      <arglist>(optional&lt; MatRef&lt; T &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; MatRef&lt; T &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; MatRef&lt; T &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, optional&lt; VecRef&lt; T &gt; &gt; x=nullopt, optional&lt; VecRef&lt; T &gt; &gt; y=nullopt, optional&lt; VecRef&lt; T &gt; &gt; z=nullopt, optional&lt; T &gt; eps_abs=nullopt, optional&lt; T &gt; eps_rel=nullopt, optional&lt; T &gt; rho=nullopt, optional&lt; T &gt; mu_eq=nullopt, optional&lt; T &gt; mu_in=nullopt, optional&lt; bool &gt; verbose=nullopt, bool compute_preconditioner=true, bool compute_timings=false, optional&lt; isize &gt; max_iter=nullopt, proxsuite::proxqp::InitialGuessStatus initial_guess=proxsuite::proxqp::InitialGuessStatus::EQUALITY_CONSTRAINED_INITIAL_GUESS, bool check_duality_gap=false, optional&lt; T &gt; eps_duality_gap_abs=nullopt, optional&lt; T &gt; eps_duality_gap_rel=nullopt, bool primal_infeasibility_solving=false, optional&lt; T &gt; manual_minimal_H_eigenvalue=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>proxqp::Results&lt; T &gt;</type>
      <name>solve</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a867b53c06a55bb0182d9d56358b61062</anchor>
      <arglist>(optional&lt; MatRef&lt; T &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; MatRef&lt; T &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; MatRef&lt; T &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, optional&lt; VecRef&lt; T &gt; &gt; l_box, optional&lt; VecRef&lt; T &gt; &gt; u_box, optional&lt; VecRef&lt; T &gt; &gt; x=nullopt, optional&lt; VecRef&lt; T &gt; &gt; y=nullopt, optional&lt; VecRef&lt; T &gt; &gt; z=nullopt, optional&lt; T &gt; eps_abs=nullopt, optional&lt; T &gt; eps_rel=nullopt, optional&lt; T &gt; rho=nullopt, optional&lt; T &gt; mu_eq=nullopt, optional&lt; T &gt; mu_in=nullopt, optional&lt; bool &gt; verbose=nullopt, bool compute_preconditioner=true, bool compute_timings=false, optional&lt; isize &gt; max_iter=nullopt, proxsuite::proxqp::InitialGuessStatus initial_guess=proxsuite::proxqp::InitialGuessStatus::EQUALITY_CONSTRAINED_INITIAL_GUESS, bool check_duality_gap=false, optional&lt; T &gt; eps_duality_gap_abs=nullopt, optional&lt; T &gt; eps_duality_gap_rel=nullopt, bool primal_infeasibility_solving=false, optional&lt; T &gt; manual_minimal_H_eigenvalue=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>aa4bae3b82093e8135634db36a01a6159</anchor>
      <arglist>(const QP&lt; T &gt; &amp;qp1, const QP&lt; T &gt; &amp;qp2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ae6dbbd0fe09b5bf3e017336c6db984a2</anchor>
      <arglist>(const QP&lt; T &gt; &amp;qp1, const QP&lt; T &gt; &amp;qp2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_in_parallel</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>ace1fc72159dd81df18bce20e188014a0</anchor>
      <arglist>(std::vector&lt; proxqp::dense::QP&lt; T &gt; &gt; &amp;qps, const optional&lt; size_t &gt; num_threads=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_in_parallel</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a314b81919935a56d0d454504eb0f190e</anchor>
      <arglist>(proxqp::dense::BatchQP&lt; T &gt; &amp;qps, const optional&lt; size_t &gt; num_threads=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qp_solve_in_parallel</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a0387cfbe34cbdb09a2dbcb40ca50ed44</anchor>
      <arglist>(optional&lt; const size_t &gt; num_threads, proxqp::dense::BatchQP&lt; T &gt; &amp;qps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qp_solve_backward_in_parallel</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a4276db4c928ab371a4a45918f6fca4ac</anchor>
      <arglist>(optional&lt; const size_t &gt; num_threads, std::vector&lt; proxqp::dense::QP&lt; T &gt; &gt; &amp;qps, std::vector&lt; proxqp::dense::Vec&lt; T &gt; &gt; &amp;loss_derivatives, T eps=1.E-4, T rho_new=1.E-6, T mu_new=1.E-6)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qp_solve_backward_in_parallel</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a0ae27449545fc7a976ebcdb8c0721031</anchor>
      <arglist>(optional&lt; const size_t &gt; num_threads, proxqp::dense::BatchQP&lt; T &gt; &amp;qps, std::vector&lt; proxqp::dense::Vec&lt; T &gt; &gt; &amp;loss_derivatives, T eps=1.E-4, T rho_new=1.E-6, T mu_new=1.E-6)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DYN</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense.html</anchorfile>
      <anchor>a6f880437281a6ccde0b9cdcb9d4e0c6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::dense::detail</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1dense_1_1detail.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>ruiz_scale_qp_in_place</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense_1_1detail.html</anchorfile>
      <anchor>a8eefe9fdeaa7b60e693eaffc67b4ee33</anchor>
      <arglist>(VectorViewMut&lt; T &gt; delta_, std::ostream *logger_ptr, QpViewBoxMut&lt; T &gt; qp, T epsilon, isize max_iter, bool preconditioning_for_infeasible_problems, Symmetry sym, HessianType HessianType, const bool box_constraints, proxsuite::linalg::veg::dynstack::DynStackMut stack) -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::dense::linesearch</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1dense_1_1linesearch.html</filename>
    <class kind="struct">proxsuite::proxqp::dense::linesearch::PrimalDualDerivativeResult</class>
    <member kind="function">
      <type>auto</type>
      <name>gpdal_derivative_results</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense_1_1linesearch.html</anchorfile>
      <anchor>a0b239ce8970e28a0e63080d5678be4f2</anchor>
      <arglist>(const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const Settings&lt; T &gt; &amp;qpsettings, isize n_constraints, T alpha) -&gt; PrimalDualDerivativeResult&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>primal_dual_derivative_results</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense_1_1linesearch.html</anchorfile>
      <anchor>ace4116e055769e37e3bc0cab6d45b65b</anchor>
      <arglist>(const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, isize n_constraints, T alpha) -&gt; PrimalDualDerivativeResult&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>primal_dual_ls</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense_1_1linesearch.html</anchorfile>
      <anchor>ad909d99c87bbff37eeb37d5ffca5d257</anchor>
      <arglist>(const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, Workspace&lt; T &gt; &amp;qpwork, const Settings&lt; T &gt; &amp;qpsettings, const isize n_constraints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>active_set_change</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense_1_1linesearch.html</anchorfile>
      <anchor>aa7095c5785fec1231f32581521401747</anchor>
      <arglist>(const Model&lt; T &gt; &amp;qpmodel, Results&lt; T &gt; &amp;qpresults, const DenseBackend &amp;dense_backend, const isize n_constraints, Workspace&lt; T &gt; &amp;qpwork)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::dense::nb</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1dense_1_1nb.html</filename>
    <class kind="struct">proxsuite::proxqp::dense::nb::fabs</class>
    <class kind="struct">proxsuite::proxqp::dense::nb::infty_norm</class>
    <class kind="struct">proxsuite::proxqp::dense::nb::pow</class>
    <class kind="struct">proxsuite::proxqp::dense::nb::sqrt</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::dense::preconditioner</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1dense_1_1preconditioner.html</filename>
    <class kind="struct">proxsuite::proxqp::dense::preconditioner::IdentityPrecond</class>
    <class kind="struct">proxsuite::proxqp::dense::preconditioner::RuizEquilibration</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense_1_1preconditioner.html</anchorfile>
      <anchor>ae5d9646e4e1fcc5d1b59464cad3679ab</anchor>
      <arglist>(const RuizEquilibration&lt; T &gt; &amp;ruiz1, const RuizEquilibration&lt; T &gt; &amp;ruiz2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1dense_1_1preconditioner.html</anchorfile>
      <anchor>ade6e5dd4d6e67bf542bb15c219c1f4ae</anchor>
      <arglist>(const RuizEquilibration&lt; T &gt; &amp;ruiz1, const RuizEquilibration&lt; T &gt; &amp;ruiz2)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::detail</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1detail.html</filename>
    <namespace>proxsuite::proxqp::detail::nb</namespace>
    <class kind="struct">proxsuite::proxqp::detail::Defer</class>
    <class kind="struct">proxsuite::proxqp::detail::DetectedImpl</class>
    <class kind="struct">proxsuite::proxqp::detail::DetectedImpl&lt; Void&lt; F&lt; Ts... &gt; &gt;, Fallback, F, Ts... &gt;</class>
    <class kind="struct">proxsuite::proxqp::detail::ElementAccess</class>
    <class kind="struct">proxsuite::proxqp::detail::ElementAccess&lt; Layout::colmajor &gt;</class>
    <class kind="struct">proxsuite::proxqp::detail::ElementAccess&lt; Layout::rowmajor &gt;</class>
    <class kind="struct">proxsuite::proxqp::detail::FnInfo</class>
    <class kind="struct">proxsuite::proxqp::detail::NoCopy</class>
    <class kind="struct">proxsuite::proxqp::detail::Ret_</class>
    <class kind="struct">proxsuite::proxqp::detail::SetZeroImpl</class>
    <class kind="struct">proxsuite::proxqp::detail::SetZeroImpl&lt; T, true &gt;</class>
    <class kind="struct">proxsuite::proxqp::detail::unlref</class>
    <class kind="struct">proxsuite::proxqp::detail::unlref&lt; T &amp; &gt;</class>
    <member kind="typedef">
      <type>void</type>
      <name>Void</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>ac2670778d1df0cc0ffd319e9d524e606</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(static_cast&lt; T * &gt;(VEG_DECLVAL(Mat &amp;).data()))</type>
      <name>DataExpr</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>aa51793f70863419821369a6b6603abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename DetectedImpl&lt; void, Fallback, F, Ts... &gt;::Type</type>
      <name>Detected</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>af540eca573a787a783891de22a43f979</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::constant&lt; isize, isize(T::ColsAtCompileTime)&gt;</type>
      <name>CompTimeColsImpl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a9f200e311262a953008e93110df90e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::constant&lt; isize, isize(T::RowsAtCompileTime)&gt;</type>
      <name>CompTimeRowsImpl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a03e1a0c5758c9577b4dd0f97110e4fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta::constant&lt; isize, isize(T::InnerStrideAtCompileTime)&gt;</type>
      <name>CompTimeInnerStrideImpl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>abd383934b749ff1df2f191d8e14849ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>proxsuite::linalg::veg::meta:: constant&lt; Layout,(bool(T::IsRowMajor) ? rowmajor :colmajor)&gt;</type>
      <name>LayoutImpl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>adb93d257a0ac855614483f028894386c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic,(L==colmajor) ? Eigen::ColMajor :Eigen::RowMajor &gt; const, Eigen::Unaligned, Eigen::OuterStride&lt; Eigen::Dynamic &gt; &gt;</type>
      <name>EigenMatMap</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a5144f570bb31aa465320d54e97e661ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic,(L==colmajor) ? Eigen::ColMajor :Eigen::RowMajor &gt;, Eigen::Unaligned, Eigen::OuterStride&lt; Eigen::Dynamic &gt; &gt;</type>
      <name>EigenMatMapMut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>ab69d8ad4c3e0aa688f0b959d2ad69fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; const, Eigen::Unaligned, Stride &gt;</type>
      <name>EigenVecMap</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>aeaee45262a108dc0924845262617d886</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;, Eigen::Unaligned, Stride &gt;</type>
      <name>EigenVecMapMut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>ad6d88680e95ab643fd80fb0f552de59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EigenVecMap&lt; T, typename ElementAccess&lt; L &gt;::NextRowStride &gt;</type>
      <name>ColToVec</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a96a71439088fb38a38b9213a966a7b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EigenVecMap&lt; T, typename ElementAccess&lt; L &gt;::NextColStride &gt;</type>
      <name>RowToVec</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>ac0ef5d11e76e978185ea172e24168f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EigenVecMapMut&lt; T, typename ElementAccess&lt; L &gt;::NextRowStride &gt;</type>
      <name>ColToVecMut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a3ff418d31c57735b6b51b477f5f24fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EigenVecMapMut&lt; T, typename ElementAccess&lt; L &gt;::NextColStride &gt;</type>
      <name>RowToVecMut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>abeed6275c8bfd9a6df50823d9e7c8244</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EigenVecMap&lt; T, Eigen::Stride&lt; 0, 0 &gt; &gt;</type>
      <name>VecMap</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a5fed8f66c5a32db88dc3990cd7a12dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EigenVecMapMut&lt; T, Eigen::Stride&lt; 0, 0 &gt; &gt;</type>
      <name>VecMapMut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a7e9f49d8135d87b24c597e75b042a76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>min_list_impl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a8f5f5adc24d3828535d91bcaf562ce39</anchor>
      <arglist>(T init, T const *arr, usize n) noexcept -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>cx_min_list</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a40cb2cecaf6ce2ba1fff1aa388daaa31</anchor>
      <arglist>(T const (&amp;arr)[N]) noexcept -&gt; T</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>abfaf22c2f7b4ffafc63bbd440ce51a09</anchor>
      <arglist>(defer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a67f56b91f83245a0b4623e979f2ccf2d</anchor>
      <arglist>(max2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>aad7feeeed37baeffc729305cd0ccaa77</anchor>
      <arglist>(min2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_NIEBLOID</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a595de64f20bbdbb801b7147042acc420</anchor>
      <arglist>(max_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_zero</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>ababccf2f860c7a79bc9848494e17d151</anchor>
      <arglist>(T *dest, usize n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>round_up</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>ae6c57d7e9b07e59e8bc21b88275277a8</anchor>
      <arglist>(isize n, isize k) noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>uround_up</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>affa230df4f9eb47b24ee572fc5858c21</anchor>
      <arglist>(usize n, usize k) noexcept -&gt; usize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>bytes_to_prev_aligned</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a6da1e0034e19abbe32d4ac3770c9833a</anchor>
      <arglist>(void *ptr, usize align) noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>bytes_to_next_aligned</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a84f0bf7fbaef4142e8b5c6ff5ee45044</anchor>
      <arglist>(void *ptr, usize align) noexcept -&gt; isize</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>next_aligned</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a77998c69091161366c75819d2be5d638</anchor>
      <arglist>(void *ptr, usize align) noexcept -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>prev_aligned</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a0d3ac2c288f4fbbec35221db98ad287a</anchor>
      <arglist>(void *ptr, usize align) noexcept -&gt; void *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>is_eigen_matrix_base_impl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a450e79e7696d2c5f9adc1a2018c244b5</anchor>
      <arglist>(Eigen::MatrixBase&lt; T &gt; const volatile *) -&gt; proxsuite::linalg::veg::meta::true_type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>is_eigen_matrix_base_impl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a6c2032f27e398f6f63e2d2938092157c</anchor>
      <arglist>(void const volatile *) -&gt; proxsuite::linalg::veg::meta::false_type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>is_eigen_owning_matrix_base_impl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a4c54c56f79e822e75774196b040a54aa</anchor>
      <arglist>(Eigen::PlainObjectBase&lt; T &gt; const volatile *) -&gt; proxsuite::linalg::veg::meta::true_type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>is_eigen_owning_matrix_base_impl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>af8c2f6a5e99c609442ebad7143c1a9c0</anchor>
      <arglist>(void const volatile *) -&gt; proxsuite::linalg::veg::meta::false_type</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noalias_mul_add</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a82ba8e18328b9e3ab2433715fa4805a3</anchor>
      <arglist>(MatrixViewMut&lt; T, colmajor &gt; dst, MatrixView&lt; T, colmajor &gt; lhs, MatrixView&lt; T, colmajor &gt; rhs, T factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noalias_mul_add_vec</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>aeda862486bdc466734a2749472813f3f</anchor>
      <arglist>(VectorViewMut&lt; T &gt; dst, MatrixView&lt; T, colmajor &gt; lhs, VectorView&lt; T &gt; rhs, T factor)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dot</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a9b388d6c6442a4e8072d00f8a600d0f3</anchor>
      <arglist>(StridedVectorView&lt; T &gt; lhs, VectorView&lt; T &gt; rhs) -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_cwise_prod</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>ae93a53bb9ef1132b4344cf8b1c528356</anchor>
      <arglist>(VectorViewMut&lt; T &gt; out, StridedVectorView&lt; T &gt; lhs, StridedVectorView&lt; T &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_scalar_prod</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>adb31a4d501ddc394e48b582471268710</anchor>
      <arglist>(VectorViewMut&lt; T &gt; out, T factor, VectorView&lt; T &gt; in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trans_tr_unit_up_solve_in_place_on_right</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>adfd9a0989c1db8ce6758b0a730cb7115</anchor>
      <arglist>(MatrixView&lt; T, colmajor &gt; tr, MatrixViewMut&lt; T, colmajor &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_diag_inv_on_right</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>abd1be3dfb6df3d1826c04a4317c78345</anchor>
      <arglist>(MatrixViewMut&lt; T, colmajor &gt; out, StridedVectorView&lt; T &gt; d, MatrixView&lt; T, colmajor &gt; in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_diag_on_right</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>a11de089956c90146573853cda2941473</anchor>
      <arglist>(MatrixViewMut&lt; T, colmajor &gt; out, StridedVectorView&lt; T &gt; d, MatrixView&lt; T, colmajor &gt; in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noalias_mul_sub_tr_lo</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1detail.html</anchorfile>
      <anchor>aee0e9ea3e281074950f1152515d396e9</anchor>
      <arglist>(MatrixViewMut&lt; T, colmajor &gt; out, MatrixView&lt; T, colmajor &gt; lhs, MatrixView&lt; T, rowmajor &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::detail::nb</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1detail_1_1nb.html</filename>
    <class kind="struct">proxsuite::proxqp::detail::nb::defer</class>
    <class kind="struct">proxsuite::proxqp::detail::nb::max2</class>
    <class kind="struct">proxsuite::proxqp::detail::nb::max_list</class>
    <class kind="struct">proxsuite::proxqp::detail::nb::min2</class>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::eigen</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1eigen.html</filename>
    <member kind="typedef">
      <type>detail::Detected&lt; proxsuite::linalg::veg::meta::constant&lt; isize, 0 &gt;, detail::CompTimeColsImpl, T &gt;</type>
      <name>CompTimeCols</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1eigen.html</anchorfile>
      <anchor>a2cb64c5513d082129ffd4f38ee368569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Detected&lt; proxsuite::linalg::veg::meta::constant&lt; isize, 0 &gt;, detail::CompTimeRowsImpl, T &gt;</type>
      <name>CompTimeRows</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1eigen.html</anchorfile>
      <anchor>a6cce1cf422464d8de7c3fd07302e7e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Detected&lt; proxsuite::linalg::veg::meta::constant&lt; isize, 0 &gt;, detail::CompTimeInnerStrideImpl, T &gt;</type>
      <name>CompTimeInnerStride</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1eigen.html</anchorfile>
      <anchor>a5882872650b6d5e5729f4e3cbc0eb92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Detected&lt; proxsuite::linalg::veg::meta:: constant&lt; Layout, Layout(static_cast&lt; unsigned char &gt;(-1))&gt;, detail::LayoutImpl, T &gt;</type>
      <name>GetLayout</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1eigen.html</anchorfile>
      <anchor>a9b01ec3e1219c32fbe17463af02dca00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::sparse</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1sparse.html</filename>
    <namespace>proxsuite::proxqp::sparse::detail</namespace>
    <namespace>proxsuite::proxqp::sparse::preconditioner</namespace>
    <class kind="struct">proxsuite::proxqp::sparse::BatchQP</class>
    <class kind="struct">proxsuite::proxqp::sparse::Ldlt</class>
    <class kind="struct">proxsuite::proxqp::sparse::Model</class>
    <class kind="struct">proxsuite::proxqp::sparse::PrimalDualGradResult</class>
    <class kind="struct">proxsuite::proxqp::sparse::QP</class>
    <class kind="struct">proxsuite::proxqp::sparse::QpView</class>
    <class kind="struct">proxsuite::proxqp::sparse::QpViewMut</class>
    <class kind="struct">proxsuite::proxqp::sparse::SparseModel</class>
    <class kind="struct">proxsuite::proxqp::sparse::Workspace</class>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, -1, -1 &gt;</type>
      <name>DMat</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>ad86ae8f1c121c9207d9505f3b47998ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::SparseMatrix&lt; T, Eigen::ColMajor, I &gt;</type>
      <name>SparseMat</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a7256137c14ed444abfdc0c47ab4fb0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::Matrix&lt; T, DYN, 1 &gt; const  &gt;</type>
      <name>VecRef</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>aa5218b103ba1aef5f9f55a556f9701c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::Matrix&lt; T, DYN, DYN &gt; const  &gt;</type>
      <name>MatRef</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>aa9a41727ab932ed8954062df687ef623</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, DYN, 1 &gt;</type>
      <name>Vec</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>adb04a7a1439dcd5099cdbc3d9df027f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::SparseMatrix&lt; T, Eigen::ColMajor, I &gt;</type>
      <name>Mat</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>af45aac1028df2aceb6ee3a76ebc1888f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; bool, DYN, 1 &gt;</type>
      <name>VecBool</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>ae1691bfe488ba7b6308d6d017d87ffb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int64_t</type>
      <name>i64</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a37918b296afbf07fd39cfb6381e2de4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_detail::_meta::make_signed&lt; usize &gt;::Type</type>
      <name>isize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>af13f536f55f7e3a7af1d0e6cf9ac3c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(sizeof(0))</type>
      <name>usize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a1d967c038db74b6696a5a46e4576a085</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>layout</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>ad1e4b2fcaf7cceb8906f3f25989d7d6dade9d2c5153e323a7516e60f6af7f7080</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_in_parallel</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a4df01d0b00a2b8dba05bfa47e62ccf39</anchor>
      <arglist>(proxqp::sparse::BatchQP&lt; T, I &gt; &amp;qps, const optional&lt; size_t &gt; num_threads=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_in_parallel</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>afb1821e3f6dcfa877c71e3a5c68f0384</anchor>
      <arglist>(std::vector&lt; proxqp::sparse::QP&lt; T, I &gt; &gt; &amp;qps, const optional&lt; size_t &gt; num_threads=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>power_iteration</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>adc1f3ce42bd975defa44d2f1b12c608e</anchor>
      <arglist>(SparseMat&lt; T, I &gt; &amp;H, sparse::Vec&lt; T &gt; &amp;dw, sparse::Vec&lt; T &gt; &amp;rhs, sparse::Vec&lt; T &gt; &amp;err_v, T power_iteration_accuracy, isize nb_power_iteration)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min_eigen_value_via_modified_power_iteration</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>ac7678cf74e32adcae711b562679e990e</anchor>
      <arglist>(SparseMat&lt; T, I &gt; &amp;H, sparse::Vec&lt; T &gt; &amp;dw, sparse::Vec&lt; T &gt; &amp;rhs, sparse::Vec&lt; T &gt; &amp;err_v, T max_eigen_value, T power_iteration_accuracy, isize nb_power_iteration)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>estimate_minimal_eigen_value_of_symmetric_matrix</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a28548042df940d649c5e666906af5596</anchor>
      <arglist>(SparseMat&lt; T, I &gt; &amp;H, T power_iteration_accuracy, isize nb_power_iteration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_default_rho_with_minimal_Hessian_eigen_value</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>aef1076db2dd488f362e1f59602fda3e6</anchor>
      <arglist>(optional&lt; T &gt; manual_minimal_H_eigenvalue, Results&lt; T &gt; &amp;results, Settings&lt; T &gt; &amp;settings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_proximal_parameters</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a46e3b1532480633e6d18189282bb272d</anchor>
      <arglist>(Settings&lt; T &gt; &amp;settings, Results&lt; T &gt; &amp;results, Workspace&lt; T, I &gt; &amp;work, optional&lt; T &gt; rho_new, optional&lt; T &gt; mu_eq_new, optional&lt; T &gt; mu_in_new)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warm_start</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a0a5e73e4206441a05dfcde640c39cb1e</anchor>
      <arglist>(optional&lt; VecRef&lt; T &gt; &gt; x_wm, optional&lt; VecRef&lt; T &gt; &gt; y_wm, optional&lt; VecRef&lt; T &gt; &gt; z_wm, Results&lt; T &gt; &amp;results, Settings&lt; T &gt; &amp;settings, Model&lt; T, I &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qp_setup</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>adce70965d198a96746b041b659fed279</anchor>
      <arglist>(QpView&lt; T, I &gt; qp, Results&lt; T &gt; &amp;results, Model&lt; T, I &gt; &amp;data, Workspace&lt; T, I &gt; &amp;work, Settings&lt; T &gt; &amp;settings, P &amp;precond, PreconditionerStatus &amp;preconditioner_status)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>have_same_structure</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>abdc7d0082c64016e09b3327b92d1685f</anchor>
      <arglist>(proxsuite::linalg::sparse::MatRef&lt; T, I &gt; a, proxsuite::linalg::sparse::MatRef&lt; T, I &gt; b) -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a953490c11f922a3fe28d838bc739634a</anchor>
      <arglist>(proxsuite::linalg::sparse::MatMut&lt; T, I &gt; a, proxsuite::linalg::sparse::MatRef&lt; T, I &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ldl_solve</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>abd6a3ee54e2af8e9f7dffc455e8ee4ab</anchor>
      <arglist>(VectorViewMut&lt; T &gt; sol, VectorView&lt; T &gt; rhs, isize n_tot, proxsuite::linalg::sparse::MatMut&lt; T, I &gt; ldl, Eigen::MINRES&lt; detail::AugmentedKkt&lt; T, I &gt;, Eigen::Upper|Eigen::Lower, Eigen::IdentityPreconditioner &gt; &amp;iterative_solver, bool do_ldlt, proxsuite::linalg::veg::dynstack::DynStackMut stack, T *ldl_values, I *perm, I *ldl_col_ptrs, I const *perm_inv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ldl_iter_solve_noalias</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a03cc034874dbb17022d8996835154843</anchor>
      <arglist>(VectorViewMut&lt; T &gt; sol, VectorView&lt; T &gt; rhs, VectorView&lt; T &gt; init_guess, Results&lt; T &gt; const &amp;results, Model&lt; T, I &gt; const &amp;data, isize n_tot, proxsuite::linalg::sparse::MatMut&lt; T, I &gt; ldl, Eigen::MINRES&lt; detail::AugmentedKkt&lt; T, I &gt;, Eigen::Upper|Eigen::Lower, Eigen::IdentityPreconditioner &gt; &amp;iterative_solver, bool do_ldlt, proxsuite::linalg::veg::dynstack::DynStackMut stack, T *ldl_values, I *perm, I *ldl_col_ptrs, I const *perm_inv, Settings&lt; T &gt; const &amp;settings, proxsuite::linalg::sparse::MatMut&lt; T, I &gt; kkt_active, proxsuite::linalg::veg::SliceMut&lt; bool &gt; active_constraints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ldl_solve_in_place</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a28719923085de8afc86abf5cdeaf28d4</anchor>
      <arglist>(VectorViewMut&lt; T &gt; rhs, VectorView&lt; T &gt; init_guess, Results&lt; T &gt; const &amp;results, Model&lt; T, I &gt; const &amp;data, isize n_tot, proxsuite::linalg::sparse::MatMut&lt; T, I &gt; ldl, Eigen::MINRES&lt; detail::AugmentedKkt&lt; T, I &gt;, Eigen::Upper|Eigen::Lower, Eigen::IdentityPreconditioner &gt; &amp;iterative_solver, bool do_ldlt, proxsuite::linalg::veg::dynstack::DynStackMut stack, T *ldl_values, I *perm, I *ldl_col_ptrs, I const *perm_inv, Settings&lt; T &gt; const &amp;settings, proxsuite::linalg::sparse::MatMut&lt; T, I &gt; kkt_active, proxsuite::linalg::veg::SliceMut&lt; bool &gt; active_constraints)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>inner_reconstructed_matrix</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a1b12a295287ebefe88ccdfdb164f337c</anchor>
      <arglist>(proxsuite::linalg::sparse::MatMut&lt; T, I &gt; ldl) -&gt; DMat&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>reconstructed_matrix</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a83a914499e344c66f62d23c474d40273</anchor>
      <arglist>(proxsuite::linalg::sparse::MatMut&lt; T, I &gt; ldl, I const *perm_inv, isize n_tot) -&gt; DMat&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>reconstruction_error</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>af790d437a41c805e3cc857155aaadd54</anchor>
      <arglist>(proxsuite::linalg::sparse::MatMut&lt; T, I &gt; ldl, I const *perm_inv, Results&lt; T &gt; const &amp;results, Model&lt; T, I &gt; const &amp;data, isize n_tot, proxsuite::linalg::sparse::MatMut&lt; T, I &gt; kkt_active, proxsuite::linalg::veg::SliceMut&lt; bool &gt; active_constraints) -&gt; DMat&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qp_solve</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a5ba249322aabb491b34d2dfcb4b8660b</anchor>
      <arglist>(Results&lt; T &gt; &amp;results, Model&lt; T, I &gt; &amp;data, const Settings&lt; T &gt; &amp;settings, Workspace&lt; T, I &gt; &amp;work, P &amp;precond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_setup_header</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>aa3c995adc4bd5230f3f7ef89e92573af</anchor>
      <arglist>(const Settings&lt; T &gt; &amp;settings, Results&lt; T &gt; &amp;results, const Model&lt; T, I &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refactorize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a11f5b3a80c82c9c42371ea9d476a457f</anchor>
      <arglist>(Workspace&lt; T, I &gt; &amp;work, Results&lt; T &gt; const &amp;results, Settings&lt; T &gt; const &amp;settings, proxsuite::linalg::sparse::MatMut&lt; T, I &gt; kkt_active, proxsuite::linalg::veg::SliceMut&lt; bool &gt; active_constraints, Model&lt; T, I &gt; const &amp;data, proxsuite::linalg::veg::dynstack::DynStackMut stack, proxsuite::linalg::veg::Tag&lt; T &gt; &amp;xtag)</arglist>
    </member>
    <member kind="function">
      <type>proxqp::Results&lt; T &gt;</type>
      <name>solve</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>a79803f770b3b7be596e5545fa8e5e63f</anchor>
      <arglist>(optional&lt; SparseMat&lt; T, I &gt; &gt; H, optional&lt; VecRef&lt; T &gt; &gt; g, optional&lt; SparseMat&lt; T, I &gt; &gt; A, optional&lt; VecRef&lt; T &gt; &gt; b, optional&lt; SparseMat&lt; T, I &gt; &gt; C, optional&lt; VecRef&lt; T &gt; &gt; l, optional&lt; VecRef&lt; T &gt; &gt; u, optional&lt; VecRef&lt; T &gt; &gt; x=nullopt, optional&lt; VecRef&lt; T &gt; &gt; y=nullopt, optional&lt; VecRef&lt; T &gt; &gt; z=nullopt, optional&lt; T &gt; eps_abs=nullopt, optional&lt; T &gt; eps_rel=nullopt, optional&lt; T &gt; rho=nullopt, optional&lt; T &gt; mu_eq=nullopt, optional&lt; T &gt; mu_in=nullopt, optional&lt; bool &gt; verbose=nullopt, bool compute_preconditioner=true, bool compute_timings=false, optional&lt; isize &gt; max_iter=nullopt, proxsuite::proxqp::InitialGuessStatus initial_guess=proxsuite::proxqp::InitialGuessStatus::EQUALITY_CONSTRAINED_INITIAL_GUESS, proxsuite::proxqp::SparseBackend sparse_backend=proxsuite::proxqp::SparseBackend::Automatic, bool check_duality_gap=false, optional&lt; T &gt; eps_duality_gap_abs=nullopt, optional&lt; T &gt; eps_duality_gap_rel=nullopt, bool primal_infeasibility_solving=false, optional&lt; T &gt; manual_minimal_H_eigenvalue=nullopt)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DYN</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse.html</anchorfile>
      <anchor>ac9ede8007c247085583031077cdd1084</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::sparse::detail</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</filename>
    <class kind="struct">proxsuite::proxqp::sparse::detail::AugmentedKkt</class>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;, Eigen::Unaligned, Eigen::Stride&lt; Eigen::Dynamic, 1 &gt; &gt;</type>
      <name>VecMapMut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>add54b256fcb6816a2835e84f692ebd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; const, Eigen::Unaligned, Eigen::Stride&lt; Eigen::Dynamic, 1 &gt; &gt;</type>
      <name>VecMap</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>afa722bda8ffbc2b509688a911bef3d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VEG_NO_INLINE void</type>
      <name>noalias_gevmmv_add_impl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>a6cb076d5ef454c6d10c86eaec8d384dd</anchor>
      <arglist>(VectorViewMut&lt; T &gt; out_l, VectorViewMut&lt; T &gt; out_r, proxsuite::linalg::sparse::MatRef&lt; T, I &gt; a, VectorView&lt; T &gt; in_l, VectorView&lt; T &gt; in_r)</arglist>
    </member>
    <member kind="function">
      <type>VEG_NO_INLINE void</type>
      <name>noalias_symhiv_add_impl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>a192ea81eb89ea330f139bcda39f9caa5</anchor>
      <arglist>(VectorViewMut&lt; T &gt; out, proxsuite::linalg::sparse::MatRef&lt; T, I &gt; a, VectorView&lt; T &gt; in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noalias_gevmmv_add</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>a17d74d7e245428f1dc9c10eb04b24878</anchor>
      <arglist>(OutL &amp;&amp;out_l, OutR &amp;&amp;out_r, A const &amp;a, InL const &amp;in_l, InR const &amp;in_r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noalias_symhiv_add</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>a2d711dedc7828f00a6164d5f4a4b880a</anchor>
      <arglist>(Out &amp;&amp;out, A const &amp;a, In const &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vec</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>abc6bb1fe64d1bb56af4012bfaf9520af</anchor>
      <arglist>(V const &amp;v) -&gt; VecMap&lt; typename V::Scalar &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vec_mut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>ab9487f0ccbc8eb11c47a9e7fd935147f</anchor>
      <arglist>(V &amp;&amp;v) -&gt; VecMapMut&lt; typename proxsuite::linalg::veg::uncvref_t&lt; V &gt;::Scalar &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>middle_cols</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>a2d371512f87a4f1ede6ee2f10e8ddf95</anchor>
      <arglist>(proxsuite::linalg::sparse::MatRef&lt; T, I &gt; mat, isize start, isize ncols, isize nnz) -&gt; proxsuite::linalg::sparse::MatRef&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>middle_cols_mut</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>a7ef606dd610b9be01937f0542f67f6fe</anchor>
      <arglist>(proxsuite::linalg::sparse::MatMut&lt; T, I &gt; mat, isize start, isize ncols, isize nnz) -&gt; proxsuite::linalg::sparse::MatMut&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>top_rows_unchecked</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>a697a3031c5e9a8ffc104b003359ac884</anchor>
      <arglist>(proxsuite::linalg::veg::Unsafe, proxsuite::linalg::sparse::MatRef&lt; T, I &gt; mat, isize nrows) -&gt; proxsuite::linalg::sparse::MatRef&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>top_rows_mut_unchecked</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>a9c961aba3d0b5fc16b0b3a908e22fd20</anchor>
      <arglist>(proxsuite::linalg::veg::Unsafe, proxsuite::linalg::sparse::MatMut&lt; T, I &gt; mat, isize nrows) -&gt; proxsuite::linalg::sparse::MatMut&lt; T, I &gt;</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>global_primal_residual_infeasibility</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>a256d1f677a7aa9aa0dca06aeccf460ad</anchor>
      <arglist>(VectorViewMut&lt; T &gt; ATdy, VectorViewMut&lt; T &gt; CTdz, VectorViewMut&lt; T &gt; dy, VectorViewMut&lt; T &gt; dz, const QpView&lt; T, I &gt; qp_scaled, const Settings&lt; T &gt; &amp;qpsettings, const P &amp;ruiz)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>global_dual_residual_infeasibility</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>abfa4d6a743bffb4bbaf0318d51a10ca9</anchor>
      <arglist>(VectorViewMut&lt; T &gt; Adx, VectorViewMut&lt; T &gt; Cdx, VectorViewMut&lt; T &gt; Hdx, VectorViewMut&lt; T &gt; dx, const QpView&lt; T, I &gt; qp_scaled, const Settings&lt; T &gt; &amp;qpsettings, const Model&lt; T, I &gt; &amp;qpmodel, const P &amp;ruiz)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>unscaled_primal_dual_residual</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1detail.html</anchorfile>
      <anchor>ae87124fd4924cda725838446368f5afb</anchor>
      <arglist>(Workspace&lt; T, I &gt; &amp;work, Results&lt; T &gt; &amp;results, const Settings&lt; T &gt; &amp;settings, VecMapMut&lt; T &gt; primal_residual_eq_scaled, VecMapMut&lt; T &gt; primal_residual_in_scaled_lo, VecMapMut&lt; T &gt; primal_residual_in_scaled_up, VecMapMut&lt; T &gt; dual_residual_scaled, T &amp;primal_feasibility_eq_rhs_0, T &amp;primal_feasibility_in_rhs_0, T &amp;dual_feasibility_rhs_0, T &amp;dual_feasibility_rhs_1, T &amp;dual_feasibility_rhs_3, T &amp;rhs_duality_gap, const P &amp;precond, Model&lt; T, I &gt; const &amp;data, const QpView&lt; T, I &gt; qp_scaled, VecMapMut&lt; T &gt; x_e, VecMapMut&lt; T &gt; y_e, VecMapMut&lt; T &gt; z_e, proxsuite::linalg::veg::dynstack::DynStackMut stack) -&gt; proxsuite::linalg::veg::Tuple&lt; T, T &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::sparse::preconditioner</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1sparse_1_1preconditioner.html</filename>
    <namespace>proxsuite::proxqp::sparse::preconditioner::detail</namespace>
    <class kind="struct">proxsuite::proxqp::sparse::preconditioner::Identity</class>
    <class kind="struct">proxsuite::proxqp::sparse::preconditioner::RuizEquilibration</class>
    <member kind="enumeration">
      <type></type>
      <name>Symmetry</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1preconditioner.html</anchorfile>
      <anchor>afb92a10096e57e15550a698ebb35e48f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceproxsuite_1_1proxqp_1_1sparse_1_1preconditioner.html" anchor="afb92a10096e57e15550a698ebb35e48faa7c48ba367e019d004bfb0239b85f2b3">LOWER</enumvalue>
      <enumvalue file="namespaceproxsuite_1_1proxqp_1_1sparse_1_1preconditioner.html" anchor="afb92a10096e57e15550a698ebb35e48fa9e43f5291e6fcb2ad99c8e3f91acd179">UPPER</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::sparse::preconditioner::detail</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1detail.html</filename>
    <member kind="function">
      <type>void</type>
      <name>rowwise_infty_norm</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1detail.html</anchorfile>
      <anchor>aa0e1b4d7859b60da43a60f9319cce465</anchor>
      <arglist>(T *row_norm, proxsuite::linalg::sparse::MatRef&lt; T, I &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colwise_infty_norm_symhi</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1detail.html</anchorfile>
      <anchor>a5e42cb3151b8ad78eba59afd4e60a76b</anchor>
      <arglist>(T *col_norm, proxsuite::linalg::sparse::MatRef&lt; T, I &gt; h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colwise_infty_norm_symlo</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1detail.html</anchorfile>
      <anchor>ac89e267030f0c62493c694443311f328</anchor>
      <arglist>(T *col_norm, proxsuite::linalg::sparse::MatRef&lt; T, I &gt; h)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ruiz_scale_qp_in_place</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1sparse_1_1preconditioner_1_1detail.html</anchorfile>
      <anchor>aaa04687c33ec3368a0b54a9c3b9d1447</anchor>
      <arglist>(VectorViewMut&lt; T &gt; delta_, QpViewMut&lt; T, I &gt; qp, T epsilon, isize max_iter, bool preconditioning_for_infeasible_problems, Symmetry sym, proxsuite::linalg::veg::dynstack::DynStackMut stack) -&gt; T</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::tags</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1tags.html</filename>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1tags.html</anchorfile>
      <anchor>aa86c14b81c15c972e2bd98c0a6db655e</anchor>
      <arglist>(from_ptr_size, FromPtrSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1tags.html</anchorfile>
      <anchor>af590e82417de5470ca4e00e36f0508ee</anchor>
      <arglist>(from_ptr_size_stride, FromPtrSizeStride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1tags.html</anchorfile>
      <anchor>adb258896b22637ecc6725f24f25e26d6</anchor>
      <arglist>(from_ptr_rows_cols_stride, FromPtrRowsColsStride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1tags.html</anchorfile>
      <anchor>acdf83458168221144e3a563d193038d5</anchor>
      <arglist>(from_eigen, FromEigen)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::utils</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1utils.html</filename>
    <namespace>proxsuite::proxqp::utils::eigen</namespace>
    <namespace>proxsuite::proxqp::utils::osqp</namespace>
    <namespace>proxsuite::proxqp::utils::rand</namespace>
    <class kind="struct">proxsuite::proxqp::utils::EigenNoAlloc</class>
    <member kind="typedef">
      <type>long long</type>
      <name>c_int</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a560443a59cd22b063b42dbd38252e976</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>c_float</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>afdef36a2ead1083bb5a2f1fae71f4cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic,(L==proxqp::colmajor) ? Eigen::ColMajor :Eigen::RowMajor &gt;</type>
      <name>Mat</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>aec7b211974940610d6426987e8b87b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
      <name>Vec</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a04cb2a84a4f4ef35f833117b9edfff42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::SparseMatrix&lt; Scalar, Eigen::ColMajor, c_int &gt;</type>
      <name>SparseMat</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a1b62912e88b55f32ca89a5cd90f43ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(sizeof(0))</type>
      <name>usize</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a1d967c038db74b6696a5a46e4576a085</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>matmul_impl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a4d7307efc1968f1d5661ff4fde0d6a88</anchor>
      <arglist>(Mat&lt; T, proxqp::colmajor &gt; const &amp;lhs, Mat&lt; T, proxqp::colmajor &gt; const &amp;rhs) -&gt; Mat&lt; T, proxqp::colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>mat_cast</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a35d0576fde9da8418aabef198e05df8b</anchor>
      <arglist>(Mat&lt; From, proxqp::colmajor &gt; const &amp;from) -&gt; Mat&lt; To, proxqp::colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a1ec759ae8d50b987b54d50d6bb40c5af</anchor>
      <arglist>(2, matmul_impl&lt; long double &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>ac990e89ad3186249495d7b141271af68</anchor>
      <arglist>(1, mat_cast&lt; proxqp::f64, long double &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a6e5cc9095783f1c32d40c142453d92ae</anchor>
      <arglist>(1, mat_cast&lt; proxqp::f32, long double &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>matmul</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>af8c3e64ebd04c4bc8f37f65e749c86c0</anchor>
      <arglist>(MatLhs const &amp;a, MatRhs const &amp;b) -&gt; Mat&lt; T, proxqp::colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>matmul3</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a2fe7717da4b91ae3de50eeaae5d649e6</anchor>
      <arglist>(MatLhs const &amp;a, MatMid const &amp;b, MatRhs const &amp;c) -&gt; Mat&lt; T, proxqp::colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VEG_TAG</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>ab5188d534306ea4b1ddc1df7772eec7a</anchor>
      <arglist>(from_data, FromData)</arglist>
    </member>
    <member kind="function">
      <type>proxsuite::proxqp::dense::Model&lt; Scalar &gt;</type>
      <name>dense_unconstrained_qp</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a232e63b8336299f151105cadc27b6f32</anchor>
      <arglist>(proxqp::isize dim, Scalar sparsity_factor, Scalar strong_convexity_factor=Scalar(1e-2))</arglist>
    </member>
    <member kind="function">
      <type>proxsuite::proxqp::dense::Model&lt; Scalar &gt;</type>
      <name>dense_strongly_convex_qp</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a06cba1fc5370fa8f7edcfa6bed96e4a2</anchor>
      <arglist>(proxqp::isize dim, proxqp::isize n_eq, proxqp::isize n_in, Scalar sparsity_factor, Scalar strong_convexity_factor=Scalar(1e-2))</arglist>
    </member>
    <member kind="function">
      <type>proxsuite::proxqp::dense::Model&lt; Scalar &gt;</type>
      <name>dense_not_strongly_convex_qp</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>ae3ebc225b518a6114e7518883808319b</anchor>
      <arglist>(proxqp::isize dim, proxqp::isize n_eq, proxqp::isize n_in, Scalar sparsity_factor)</arglist>
    </member>
    <member kind="function">
      <type>proxsuite::proxqp::dense::Model&lt; Scalar &gt;</type>
      <name>dense_degenerate_qp</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a1a515b7a625cace3c212eee8fc7a0cd1</anchor>
      <arglist>(proxqp::isize dim, proxqp::isize n_eq, proxqp::isize n_in, Scalar sparsity_factor, Scalar strong_convexity_factor=Scalar(1e-2))</arglist>
    </member>
    <member kind="function">
      <type>proxsuite::proxqp::dense::Model&lt; Scalar &gt;</type>
      <name>dense_box_constrained_qp</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a178bbddef3be630ee6d18d475d8ebf67</anchor>
      <arglist>(proxqp::isize dim, proxqp::isize n_eq, proxqp::isize n_in, Scalar sparsity_factor, Scalar strong_convexity_factor=Scalar(1e-2))</arglist>
    </member>
    <member kind="function">
      <type>proxsuite::proxqp::sparse::SparseModel&lt; Scalar &gt;</type>
      <name>sparse_strongly_convex_qp</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils.html</anchorfile>
      <anchor>a942f7aedde26c2fcf86b6d60848efaaa</anchor>
      <arglist>(proxqp::isize dim, proxqp::isize n_eq, proxqp::isize n_in, Scalar sparsity_factor, Scalar strong_convexity_factor=Scalar(1e-2))</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::utils::eigen</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</filename>
    <member kind="function">
      <type>void</type>
      <name>llt_compute</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>abe872643659f188f2cc27fbe81e39d05</anchor>
      <arglist>(Eigen::LLT&lt; T &gt; &amp;out, T const &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ldlt_compute</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>ab512947a6ba54684aa17bdaef553076a</anchor>
      <arglist>(Eigen::LDLT&lt; T &gt; &amp;out, T const &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>af71d36faf4789b52570e752091a308d4</anchor>
      <arglist>(2, llt_compute&lt; Mat&lt; f32, colmajor &gt; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>a79731bc07b030de690470af3fff8ea3a</anchor>
      <arglist>(2, ldlt_compute&lt; Mat&lt; f32, colmajor &gt; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>ae902cbedf8f2f6fb46496600fa01c10a</anchor>
      <arglist>(2, llt_compute&lt; Mat&lt; f32, rowmajor &gt; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>a2587017952fe292a9d73050f7062954d</anchor>
      <arglist>(2, ldlt_compute&lt; Mat&lt; f32, rowmajor &gt; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>a88d15d7abd860702fdb5d7889d07170d</anchor>
      <arglist>(2, llt_compute&lt; Mat&lt; f64, colmajor &gt; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>a88e717a209ca9af85468c248ef2b6f05</anchor>
      <arglist>(2, ldlt_compute&lt; Mat&lt; f64, colmajor &gt; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>aff7f9c9171e843744d01d0e2dbd1861f</anchor>
      <arglist>(2, llt_compute&lt; Mat&lt; f64, rowmajor &gt; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT_EXPLICIT_TPL_DECL</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1eigen.html</anchorfile>
      <anchor>a7b1b21b0242dea05a03e4b920c727aef</anchor>
      <arglist>(2, ldlt_compute&lt; Mat&lt; f64, rowmajor &gt; &gt;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::utils::osqp</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1utils_1_1osqp.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>to_sparse</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1osqp.html</anchorfile>
      <anchor>a6c5e32e1a425a1596608b9289206f67c</anchor>
      <arglist>(Mat&lt; c_float, colmajor &gt; const &amp;mat) -&gt; SparseMat&lt; c_float &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_sparse_sym</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1osqp.html</anchorfile>
      <anchor>a07772afc79760f3ef022c07b9301e696</anchor>
      <arglist>(Mat&lt; c_float, colmajor &gt; const &amp;mat) -&gt; SparseMat&lt; c_float &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::utils::rand</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</filename>
    <namespace>proxsuite::proxqp::utils::rand::detail</namespace>
    <member kind="typedef">
      <type>__uint128_t</type>
      <name>u128</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a49008d9b1e872781e5c25a56a8bb2fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>u32</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>aee32ae81452cbe40dc6aeb76103314fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>u64</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>aeb8f03d5ae98ce38dff0169b7a8da956</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>lehmer64_constant</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a6af03047c09baf6e73f3c282df5ee822</anchor>
      <arglist>(0xda942042e4dd58b5)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lehmer_global</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>ae249cd53371961d94483e54f08ad46c0</anchor>
      <arglist>() -&gt; u128 &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lehmer64</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a02f3345843aaefe3dc43203e2dd58d4f</anchor>
      <arglist>() -&gt; u64</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_seed</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>ae961fa33b220260fb576a2b57d22d024</anchor>
      <arglist>(u64 seed)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>uniform_rand</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>af355d223da76566f9f505a12a7684d94</anchor>
      <arglist>() -&gt; double</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>normal_rand</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>ae08986a3486d945de447d08184bdeaeb</anchor>
      <arglist>() -&gt; double</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vector_rand</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a5c16bf64a05861dc4bf8b302f9fa91d6</anchor>
      <arglist>(isize nrows) -&gt; Vec&lt; Scalar &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>matrix_rand</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a466dac26fc960b7ceeac0b3314f37f3a</anchor>
      <arglist>(isize nrows, isize ncols) -&gt; Mat&lt; Scalar, colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>orthonormal_rand</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a032c691de13a1646d591dba98149b816</anchor>
      <arglist>(isize n) -&gt; Mat&lt; Scalar, colmajor &gt; const &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>positive_definite_rand</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a53701ae9e7955327e9af15a23d616faa</anchor>
      <arglist>(isize n, Scalar cond) -&gt; Mat&lt; Scalar, colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sparse_positive_definite_rand</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a51eb1a46428d5c6a4ba8c97816eb3248</anchor>
      <arglist>(isize n, Scalar cond, Scalar p) -&gt; SparseMat&lt; Scalar &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sparse_positive_definite_rand_compressed</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a11ff69d65adbea4d887140d5920ef0eb</anchor>
      <arglist>(isize n, Scalar rho, Scalar p) -&gt; SparseMat&lt; Scalar &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sparse_positive_definite_rand_not_compressed</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a68cb5f4431028238a893e8f0ccc5f22a</anchor>
      <arglist>(isize n, Scalar rho, Scalar p) -&gt; Mat&lt; Scalar, colmajor &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sparse_matrix_rand</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a903e7c2b3b352a6f21e51e5dcdee7be9</anchor>
      <arglist>(isize nrows, isize ncols, Scalar p) -&gt; SparseMat&lt; Scalar &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sparse_matrix_rand_not_compressed</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand.html</anchorfile>
      <anchor>a0a1f2d7f27002411ec971f1a1b5ff560</anchor>
      <arglist>(isize nrows, isize ncols, Scalar p) -&gt; Mat&lt; Scalar, colmajor &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::proxqp::utils::rand::detail</name>
    <filename>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand_1_1detail.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; u128, isize &gt;</type>
      <name>Input</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand_1_1detail.html</anchorfile>
      <anchor>a7b91310139c9b3322594f1a6d3d77a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>orthonormal_rand_impl</name>
      <anchorfile>namespaceproxsuite_1_1proxqp_1_1utils_1_1rand_1_1detail.html</anchorfile>
      <anchor>ab92dd6e718670bc3141c5eaf4efb6611</anchor>
      <arglist>(isize n) -&gt; Mat&lt; Scalar, colmajor &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::serialization</name>
    <filename>namespaceproxsuite_1_1serialization.html</filename>
    <member kind="function">
      <type>void</type>
      <name>loadFromStringStream</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>aa7ac8d29b25413a4190abf14957592e4</anchor>
      <arglist>(T &amp;object, std::istringstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveToStringStream</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>ac7b8592a9b84b2ce53bea5c51c3bba51</anchor>
      <arglist>(const T &amp;object, std::stringstream &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromString</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>a7e0b2c808a76113d9ede77c60ee5c21b</anchor>
      <arglist>(T &amp;object, const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>saveToString</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>a98e81a3f8e58dfb9018eb1414ed03a34</anchor>
      <arglist>(const T &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromBinary</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>a3b14c17ded43c6c3b420647af400c985</anchor>
      <arglist>(T &amp;object, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveToBinary</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>a729c9d66d985a87fa672a5631fd0e6ec</anchor>
      <arglist>(const T &amp;object, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromJSON</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>aa0a7e502258ec13db3b3746d75ebdb45</anchor>
      <arglist>(T &amp;object, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveToJSON</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>a651dba8295fc46a5b1bceb3fe4b5d152</anchor>
      <arglist>(const T &amp;object, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromXML</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>a872fb14c8b9e412e1d5941ce24e32643</anchor>
      <arglist>(T &amp;object, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveToXML</name>
      <anchorfile>namespaceproxsuite_1_1serialization.html</anchorfile>
      <anchor>a56b2ff7878f97a17d218bfbe6ee908a2</anchor>
      <arglist>(const T &amp;object, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::torch</name>
    <filename>namespaceproxsuite_1_1torch.html</filename>
    <namespace>proxsuite::torch::qplayer</namespace>
    <namespace>proxsuite::torch::utils</namespace>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::torch::qplayer</name>
    <filename>namespaceproxsuite_1_1torch_1_1qplayer.html</filename>
    <member kind="function">
      <type></type>
      <name>QPFunction</name>
      <anchorfile>namespaceproxsuite_1_1torch_1_1qplayer.html</anchorfile>
      <anchor>afc9cde845f72e99251297afc206ff135</anchor>
      <arglist>(eps=1e-9, maxIter=1000, eps_backward=1.0e-4, rho_backward=1.0e-6, mu_backward=1.0e-6, omp_parallel=False, structural_feasibility=True)</arglist>
      <docanchor file="namespaceproxsuite_1_1torch_1_1qplayer.html" title="Forward method">qpfunction-forward</docanchor>
      <docanchor file="namespaceproxsuite_1_1torch_1_1qplayer.html" title="Backward method">qpfunction-backward</docanchor>
    </member>
  </compound>
  <compound kind="namespace">
    <name>proxsuite::torch::utils</name>
    <filename>namespaceproxsuite_1_1torch_1_1utils.html</filename>
    <member kind="function">
      <type></type>
      <name>extract_nBatch</name>
      <anchorfile>namespaceproxsuite_1_1torch_1_1utils.html</anchorfile>
      <anchor>accadc23e05735fdb21812f8707b744e2</anchor>
      <arglist>(Q, p, A, b, G, l, u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>print_header</name>
      <anchorfile>namespaceproxsuite_1_1torch_1_1utils.html</anchorfile>
      <anchor>a173d1bfa7b2d1f9354ecd559a7e7f5a8</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>to_np</name>
      <anchorfile>namespaceproxsuite_1_1torch_1_1utils.html</anchorfile>
      <anchor>ad8066f2282b1b59d078b561a9c965136</anchor>
      <arglist>(t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bger</name>
      <anchorfile>namespaceproxsuite_1_1torch_1_1utils.html</anchorfile>
      <anchor>af664dd51803af5cc70edde515bfeeaeb</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>get_sizes</name>
      <anchorfile>namespaceproxsuite_1_1torch_1_1utils.html</anchorfile>
      <anchor>a8e8e0f27d3d7de1165641fbb6f053e44</anchor>
      <arglist>(G, A=None)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bdiag</name>
      <anchorfile>namespaceproxsuite_1_1torch_1_1utils.html</anchorfile>
      <anchor>a9c7c0eca90960f68064eb631d73b58d8</anchor>
      <arglist>(d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expandParam</name>
      <anchorfile>namespaceproxsuite_1_1torch_1_1utils.html</anchorfile>
      <anchor>a32836c1cacf94cd6464c74147e41b053</anchor>
      <arglist>(X, nBatch, nDim)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="struct">std::hash&lt; tl::optional&lt; T &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; I, proxsuite::linalg::veg::Tuple&lt; Ts... &gt; &gt;</class>
    <class kind="struct">std::tuple_size&lt; proxsuite::linalg::veg::Tuple&lt; Ts... &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>tl</name>
    <filename>namespacetl.html</filename>
    <namespace>tl::detail</namespace>
    <class kind="class">tl::bad_optional_access</class>
    <class kind="struct">tl::in_place_t</class>
    <class kind="class">tl::monostate</class>
    <class kind="struct">tl::nullopt_t</class>
    <class kind="class">tl::optional</class>
    <class kind="class">tl::optional&lt; T &amp; &gt;</class>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a084771c5d9bbbfcaa75834138c7fc2de</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a2beccb4fc3fb49e62f3c7f5ce3b7cdba</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a689dbc75a75a974c22ddfa7780b27bdf</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>aaed3e9313051e39580425e1907f2a4e0</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>acb05fc04650ad5f785977b069764aaa4</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a44e22b2e2860884a3c95763f369241fe</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const optional&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a5a805bcb1aceca0629fd3e4d410a82de</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>ac7ea27ca0cc0c493f6e7bad6079d4c36</anchor>
      <arglist>(nullopt_t, const optional&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a5fabcc96d91b86ec455da7ec368bc172</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>afb746137b887ef99ca080ffd046c2acb</anchor>
      <arglist>(nullopt_t, const optional&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a0ce5ba2e108d44f45e20c16936bfafcb</anchor>
      <arglist>(const optional&lt; T &gt; &amp;, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a4b6ae181a7d01a5f26d9d88b01ab1616</anchor>
      <arglist>(nullopt_t, const optional&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a4649173a376aff1b9fd37c1eee7b1466</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a658ed7c6d9a91d83e911f29c70164780</anchor>
      <arglist>(nullopt_t, const optional&lt; T &gt; &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a65927c372a79c3f371bfb9656049485f</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a850974e4ae0e886f511b3095551757e3</anchor>
      <arglist>(nullopt_t, const optional&lt; T &gt; &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>af1f926f76bee6bc90aac1b61be4d08f8</anchor>
      <arglist>(const optional&lt; T &gt; &amp;, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a055d3ea8414b1f8c957af9a2621aa3ae</anchor>
      <arglist>(nullopt_t, const optional&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>ab2548d36c1878e7eb3f047271857d91d</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const U &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a8eee770b864d408b9042bf42740d9433</anchor>
      <arglist>(const U &amp;lhs, const optional&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>aca638fb52da6a0f4099b5a8cc5834df3</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const U &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a1ce9f7638b0134784c54c3a0c24383c1</anchor>
      <arglist>(const U &amp;lhs, const optional&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a545360386dbe4d587421f58f6cc116ff</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const U &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>aae51ae6faff7c4d983d13e039960c7dc</anchor>
      <arglist>(const U &amp;lhs, const optional&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a245088f3cacf25fb222732cc871232e8</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const U &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>afa6a5cb410560ab1d350b9f70a20c8b1</anchor>
      <arglist>(const U &amp;lhs, const optional&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>acb31cfee3bb84704ff9238f24d153f2f</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const U &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a9e80f30a02c6f7666ed82e41e60567e1</anchor>
      <arglist>(const U &amp;lhs, const optional&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>ad7449a37ed02fe7dedfe5bfaae026f00</anchor>
      <arglist>(const optional&lt; T &gt; &amp;lhs, const U &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a2d059d528f79b56370193eab5e8a0dd3</anchor>
      <arglist>(const U &amp;lhs, const optional&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>af3f5d0fbaf69e948c6515f029225ffde</anchor>
      <arglist>(optional&lt; T &gt; &amp;lhs, optional&lt; T &gt; &amp;rhs) noexcept(noexcept(lhs.swap(rhs)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; Ret &gt;</type>
      <name>make_optional</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a91dde2242a17cdff6cc058a9967e478b</anchor>
      <arglist>(U &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; T &gt;</type>
      <name>make_optional</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>ac9259ca12749335dbd4df1f9c7789935</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; T &gt;</type>
      <name>make_optional</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>ae2595ca978ac3fa4564f1ca83da7e5f0</anchor>
      <arglist>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr in_place_t</type>
      <name>in_place</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a78dc406529f1e72bc33aa4befe5d89ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr nullopt_t</type>
      <name>nullopt</name>
      <anchorfile>namespacetl.html</anchorfile>
      <anchor>a28faef14fa0efb12848f0cd4c087740e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tl::detail</name>
    <filename>namespacetl_1_1detail.html</filename>
    <namespace>tl::detail::swap_adl_tests</namespace>
    <class kind="struct">tl::detail::conjunction</class>
    <class kind="struct">tl::detail::conjunction&lt; B &gt;</class>
    <class kind="struct">tl::detail::conjunction&lt; B, Bs... &gt;</class>
    <class kind="struct">tl::detail::i_am_secret</class>
    <class kind="struct">tl::detail::invoke_result_impl</class>
    <class kind="struct">tl::detail::invoke_result_impl&lt; F, decltype(detail::invoke(std::declval&lt; F &gt;(), std::declval&lt; Us &gt;()...), void()), Us... &gt;</class>
    <class kind="struct">tl::detail::is_nothrow_swappable</class>
    <class kind="struct">tl::detail::is_optional_impl</class>
    <class kind="struct">tl::detail::is_optional_impl&lt; optional&lt; T &gt; &gt;</class>
    <class kind="struct">tl::detail::is_swappable</class>
    <class kind="struct">tl::detail::is_swappable&lt; T[N], T[N]&gt;</class>
    <class kind="struct">tl::detail::optional_copy_assign_base</class>
    <class kind="struct">tl::detail::optional_copy_assign_base&lt; T, false &gt;</class>
    <class kind="struct">tl::detail::optional_copy_base</class>
    <class kind="struct">tl::detail::optional_copy_base&lt; T, false &gt;</class>
    <class kind="struct">tl::detail::optional_delete_assign_base</class>
    <class kind="struct">tl::detail::optional_delete_assign_base&lt; T, false, false &gt;</class>
    <class kind="struct">tl::detail::optional_delete_assign_base&lt; T, false, true &gt;</class>
    <class kind="struct">tl::detail::optional_delete_assign_base&lt; T, true, false &gt;</class>
    <class kind="struct">tl::detail::optional_delete_ctor_base</class>
    <class kind="struct">tl::detail::optional_delete_ctor_base&lt; T, false, false &gt;</class>
    <class kind="struct">tl::detail::optional_delete_ctor_base&lt; T, false, true &gt;</class>
    <class kind="struct">tl::detail::optional_delete_ctor_base&lt; T, true, false &gt;</class>
    <class kind="struct">tl::detail::optional_move_assign_base</class>
    <class kind="struct">tl::detail::optional_move_assign_base&lt; T, false &gt;</class>
    <class kind="struct">tl::detail::optional_move_base</class>
    <class kind="struct">tl::detail::optional_move_base&lt; T, false &gt;</class>
    <class kind="struct">tl::detail::optional_operations_base</class>
    <class kind="struct">tl::detail::optional_storage_base</class>
    <class kind="struct">tl::detail::optional_storage_base&lt; T, true &gt;</class>
    <class kind="struct">tl::detail::returns_void_impl</class>
    <class kind="struct">tl::detail::returns_void_impl&lt; F, void_t&lt; invoke_result_t&lt; F, U... &gt; &gt;, U... &gt;</class>
    <class kind="struct">tl::detail::voider</class>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>remove_const_t</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a6b2c171700318ca91de50705c5feb59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_reference&lt; T &gt;::type</type>
      <name>remove_reference_t</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a212a10bd3a5ea5625faa6a42ccaeb824</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::decay&lt; T &gt;::type</type>
      <name>decay_t</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a4b7fec0b3924439ddf76809104d6b64c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::enable_if&lt; E, T &gt;::type</type>
      <name>enable_if_t</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a379193aff8f2bcacc0ff8dc482d7fe1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; B, T, F &gt;::type</type>
      <name>conditional_t</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a98bcfd09f061e49e9cc82a2b82c47dea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>invoke_result_impl&lt; F, void, Us... &gt;</type>
      <name>invoke_result</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a220f06772a6064d0ba973747039f4df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename invoke_result&lt; F, Us... &gt;::type</type>
      <name>invoke_result_t</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>aba5f39333e343d71bde27f9729f587bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename voider&lt; Ts... &gt;::type</type>
      <name>void_t</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>aa1b45dd84a433eb6eecf9ce6fa04ca76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>is_optional_impl&lt; decay_t&lt; T &gt; &gt;</type>
      <name>is_optional</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a1169bfeb101143d909ddccc6e00ccb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conditional_t&lt; std::is_void&lt; U &gt;::value, monostate, U &gt;</type>
      <name>fixup_void</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>ab6a1e80e9bb436b29c50f948104476f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>optional&lt; fixup_void&lt; invoke_result_t&lt; F, U &gt; &gt; &gt;</type>
      <name>get_map_return</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a1b51878a52f7bffb1094f6c454a62990</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>returns_void_impl&lt; F, void, U... &gt;</type>
      <name>returns_void</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a7b6e714b5e500d3cdda6f8f2fedde5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enable_if_t&lt; returns_void&lt; T &amp;&amp;, U... &gt;::value &gt;</type>
      <name>enable_if_ret_void</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a9eeeab248bb7ebe0f814369aead3ef6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enable_if_t&lt;!returns_void&lt; T &amp;&amp;, U... &gt;::value &gt;</type>
      <name>disable_if_ret_void</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a0eed1a48bb0676f98631dc1764aa7107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::enable_if_t&lt; std::is_constructible&lt; T, U &amp;&amp; &gt;::value &amp;&amp; !std::is_same&lt; detail::decay_t&lt; U &gt;, in_place_t &gt;::value &amp;&amp; !std::is_same&lt; optional&lt; T &gt;, detail::decay_t&lt; U &gt; &gt;::value &gt;</type>
      <name>enable_forward_value</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a65843704b496fca976731c3f640715c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::enable_if_t&lt; std::is_constructible&lt; T, Other &gt;::value &amp;&amp; !std::is_constructible&lt; T, optional&lt; U &gt; &amp; &gt;::value &amp;&amp; !std::is_constructible&lt; T, optional&lt; U &gt; &amp;&amp; &gt;::value &amp;&amp; !std::is_constructible&lt; T, const optional&lt; U &gt; &amp; &gt;::value &amp;&amp; !std::is_constructible&lt; T, const optional&lt; U &gt; &amp;&amp; &gt;::value &amp;&amp; !std::is_convertible&lt; optional&lt; U &gt; &amp;, T &gt;::value &amp;&amp; !std::is_convertible&lt; optional&lt; U &gt; &amp;&amp;, T &gt;::value &amp;&amp; !std::is_convertible&lt; const optional&lt; U &gt; &amp;, T &gt;::value &amp;&amp; !std::is_convertible&lt; const optional&lt; U &gt; &amp;&amp;, T &gt;::value &gt;</type>
      <name>enable_from_other</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>af8122b55a2f272015996e516e0591cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::enable_if_t&lt; !std::is_same&lt; optional&lt; T &gt;, detail::decay_t&lt; U &gt; &gt;::value &amp;&amp; !detail::conjunction&lt; std::is_scalar&lt; T &gt;, std::is_same&lt; T, detail::decay_t&lt; U &gt; &gt; &gt;::value &amp;&amp; std::is_constructible&lt; T, U &gt;::value &amp;&amp;std::is_assignable&lt; T &amp;, U &gt;::value &gt;</type>
      <name>enable_assign_forward</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a36e8538cf575c553414ee8e468b33ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::enable_if_t&lt; std::is_constructible&lt; T, Other &gt;::value &amp;&amp; std::is_assignable&lt; T &amp;, Other &gt;::value &amp;&amp; !std::is_constructible&lt; T, optional&lt; U &gt; &amp; &gt;::value &amp;&amp; !std::is_constructible&lt; T, optional&lt; U &gt; &amp;&amp; &gt;::value &amp;&amp; !std::is_constructible&lt; T, const optional&lt; U &gt; &amp; &gt;::value &amp;&amp; !std::is_constructible&lt; T, const optional&lt; U &gt; &amp;&amp; &gt;::value &amp;&amp; !std::is_convertible&lt; optional&lt; U &gt; &amp;, T &gt;::value &amp;&amp; !std::is_convertible&lt; optional&lt; U &gt; &amp;&amp;, T &gt;::value &amp;&amp; !std::is_convertible&lt; const optional&lt; U &gt; &amp;, T &gt;::value &amp;&amp; !std::is_convertible&lt; const optional&lt; U &gt; &amp;&amp;, T &gt;::value &amp;&amp; !std::is_assignable&lt; T &amp;, optional&lt; U &gt; &amp; &gt;::value &amp;&amp; !std::is_assignable&lt; T &amp;, optional&lt; U &gt; &amp;&amp; &gt;::value &amp;&amp; !std::is_assignable&lt; T &amp;, const optional&lt; U &gt; &amp; &gt;::value &amp;&amp; !std::is_assignable&lt; T &amp;, const optional&lt; U &gt; &amp;&amp; &gt;::value &gt;</type>
      <name>enable_assign_from_other</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a0e86ab3f4ed64c810a31979663755d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>invoke</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a7bc74cf307940aa10ead1098c45a297c</anchor>
      <arglist>(Fn &amp;&amp;f, Args &amp;&amp;... args) noexcept(noexcept(std::mem_fn(f)(std::forward&lt; Args &gt;(args)...))) -&gt; decltype(std::mem_fn(f)(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>invoke</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a0ae7caa1752d8052a3ae9a7de8b1bce5</anchor>
      <arglist>(Fn &amp;&amp;f, Args &amp;&amp;... args) noexcept(noexcept(std::forward&lt; Fn &gt;(f)(std::forward&lt; Args &gt;(args)...))) -&gt; decltype(std::forward&lt; Fn &gt;(f)(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>optional_map_impl</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>a8ed7972c5fb03f0eb3ae0010db77d6ec</anchor>
      <arglist>(Opt &amp;&amp;opt, F &amp;&amp;f) -&gt; optional&lt; Ret &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>optional_map_impl</name>
      <anchorfile>namespacetl_1_1detail.html</anchorfile>
      <anchor>ac686dabd2b5e16b7af577b6f6790d928</anchor>
      <arglist>(Opt &amp;&amp;opt, F &amp;&amp;f) -&gt; optional&lt; monostate &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tl::detail::swap_adl_tests</name>
    <filename>namespacetl_1_1detail_1_1swap__adl__tests.html</filename>
    <class kind="struct">tl::detail::swap_adl_tests::is_adl_swap_noexcept</class>
    <class kind="struct">tl::detail::swap_adl_tests::is_std_swap_noexcept</class>
    <class kind="struct">tl::detail::swap_adl_tests::is_std_swap_noexcept&lt; T[N]&gt;</class>
    <class kind="struct">tl::detail::swap_adl_tests::tag</class>
    <member kind="function">
      <type>tag</type>
      <name>swap</name>
      <anchorfile>namespacetl_1_1detail_1_1swap__adl__tests.html</anchorfile>
      <anchor>adfaa1f0e13aadc3a031d2ee42487482e</anchor>
      <arglist>(T &amp;, T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>tag</type>
      <name>swap</name>
      <anchorfile>namespacetl_1_1detail_1_1swap__adl__tests.html</anchorfile>
      <anchor>abf71dd30d4397f304b2efb8213a89b9d</anchor>
      <arglist>(T(&amp;a)[N], T(&amp;b)[N])</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>can_swap</name>
      <anchorfile>namespacetl_1_1detail_1_1swap__adl__tests.html</anchorfile>
      <anchor>a54d2a933983aeb9332b1eeb5c0d3f210</anchor>
      <arglist>(...) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>std::true_type</type>
      <name>can_swap</name>
      <anchorfile>namespacetl_1_1detail_1_1swap__adl__tests.html</anchorfile>
      <anchor>a1a682bf661dae9aa6e4d98289c1996d7</anchor>
      <arglist>(int) noexcept(noexcept(swap(std::declval&lt; T &amp; &gt;(), std::declval&lt; U &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>uses_std</name>
      <anchorfile>namespacetl_1_1detail_1_1swap__adl__tests.html</anchorfile>
      <anchor>a0fa5e6edd0bffbdd56c74eef0c1da04e</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>std::is_same&lt; decltype(swap(std::declval&lt; T &amp; &gt;(), std::declval&lt; U &amp; &gt;())), tag &gt;</type>
      <name>uses_std</name>
      <anchorfile>namespacetl_1_1detail_1_1swap__adl__tests.html</anchorfile>
      <anchor>a457775061f55225062fd706ca606631a</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>md_doc_22-ProxQP__api</name>
    <title>ProxQP API with examples</title>
    <filename>md_doc_22-ProxQP__api.html</filename>
    <docanchor file="md_doc_22-ProxQP__api.html" title="ProxQP unified API for dense and sparse backends">OverviewAPIstructure</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The API structure">OverviewAPI</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The init method">explanationInitMethod</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The solve method">explanationSolveMethod</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The update method">explanationUpdateMethod</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The settings subclass">OverviewSettings</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The solver&apos;s settings">OverviewAllSettings</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The different initial guesses">OverviewInitialGuess</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="No initial guess">OverviewNoInitialGuess</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The different options for estimating H minimal Eigenvalue">OverviewEstimatingHminimalEigenValue</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="Equality constrained initial guess">OverviewEqualityConstrainedInitialGuess</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="Warm start with the previous result">OverviewWarmStartWithPreviousResult</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="Warm start">OverviewWarmStart</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="Cold start with previous result">OverviewColdStartWithPreviousResult</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The results subclass">OverviewResults</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The info subclass">OverviewInfoClass</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="The solver&apos;s status">OverviewSolverStatus</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="Which backend to use?">OverviewWhichBackend</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="Some important remarks when computing timings">OverviewBenchmark</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="What do the timings take into account?">OverviewTimings</docanchor>
    <docanchor file="md_doc_22-ProxQP__api.html" title="Architecture options when compiling ProxSuite">OverviewArchitectureOptions</docanchor>
  </compound>
  <compound kind="page">
    <name>md_doc_23-ProxQP__solve</name>
    <title>ProxQP solve function without API</title>
    <filename>md_doc_23-ProxQP__solve.html</filename>
    <docanchor file="md_doc_23-ProxQP__solve.html" title="A single solve function for dense and sparse backends">OverviewAsingleSolveFunction</docanchor>
  </compound>
  <compound kind="page">
    <name>md_doc_24-qplayer</name>
    <title>QPLayer</title>
    <filename>md_doc_24-qplayer.html</filename>
    <docanchor file="md_doc_24-qplayer.html" title="How to cite QPLayer ?">QPLayerCite</docanchor>
  </compound>
  <compound kind="page">
    <name>md_doc_25-installation</name>
    <title>Installation</title>
    <filename>md_doc_25-installation.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>proxsuite</title>
    <filename>index.html</filename>
    <docanchor file="index.html">md_doc_21-Overview</docanchor>
    <docanchor file="index.html" title="What is ProxSuite?">OverviewIntro</docanchor>
    <docanchor file="index.html" title="How to install ProxSuite?">OverviewInstall</docanchor>
    <docanchor file="index.html" title="Simplest ProxQP example with compilation command">OverviewSimple</docanchor>
    <docanchor file="index.html" title="Compiling and running your program">OverviewSimpleCompile</docanchor>
    <docanchor file="index.html" title="Explanation of the program">OverviewSimpleExplain</docanchor>
    <docanchor file="index.html" title="About Python wrappings">OverviewPython</docanchor>
    <docanchor file="index.html" title="How to cite ProxSuite?">OverviewCite</docanchor>
    <docanchor file="index.html" title="Where to go from here?">OverviewConclu</docanchor>
  </compound>
</tagfile>
